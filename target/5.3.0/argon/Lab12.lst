
/Users/admin/CTD_2023/Lab12/target/5.3.0/argon/Lab12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008c88  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bcca8  000bcca8  0000cca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001dc  2003e044  000bcccc  0000e044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005d0  2003e220  2003e220  0001e220  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bcea8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bceac  000bceac  0001ceac  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bceb2  000bceb2  0001ceb2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bced6  000bced6  0001ced6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0017d3bd  00000000  00000000  0001ceda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001a5b9  00000000  00000000  0019a297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004dd8c  00000000  00000000  001b4850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000037e8  00000000  00000000  002025dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c790  00000000  00000000  00205dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004761a  00000000  00000000  00212554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005d2b6  00000000  00000000  00259b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001464f2  00000000  00000000  002b6e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000af2c  00000000  00000000  003fd318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_d2ulz>:
   b4a28:	b5d0      	push	{r4, r6, r7, lr}
   b4a2a:	4b0c      	ldr	r3, [pc, #48]	; (b4a5c <__aeabi_d2ulz+0x34>)
   b4a2c:	2200      	movs	r2, #0
   b4a2e:	4606      	mov	r6, r0
   b4a30:	460f      	mov	r7, r1
   b4a32:	f7ff fcb1 	bl	b4398 <__aeabi_dmul>
   b4a36:	f7ff ff87 	bl	b4948 <__aeabi_d2uiz>
   b4a3a:	4604      	mov	r4, r0
   b4a3c:	f7ff fc32 	bl	b42a4 <__aeabi_ui2d>
   b4a40:	4b07      	ldr	r3, [pc, #28]	; (b4a60 <__aeabi_d2ulz+0x38>)
   b4a42:	2200      	movs	r2, #0
   b4a44:	f7ff fca8 	bl	b4398 <__aeabi_dmul>
   b4a48:	4602      	mov	r2, r0
   b4a4a:	460b      	mov	r3, r1
   b4a4c:	4630      	mov	r0, r6
   b4a4e:	4639      	mov	r1, r7
   b4a50:	f7ff faea 	bl	b4028 <__aeabi_dsub>
   b4a54:	f7ff ff78 	bl	b4948 <__aeabi_d2uiz>
   b4a58:	4621      	mov	r1, r4
   b4a5a:	bdd0      	pop	{r4, r6, r7, pc}
   b4a5c:	3df00000 	.word	0x3df00000
   b4a60:	41f00000 	.word	0x41f00000

000b4a64 <strcmp>:
   b4a64:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a68:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a6c:	2a01      	cmp	r2, #1
   b4a6e:	bf28      	it	cs
   b4a70:	429a      	cmpcs	r2, r3
   b4a72:	d0f7      	beq.n	b4a64 <strcmp>
   b4a74:	1ad0      	subs	r0, r2, r3
   b4a76:	4770      	bx	lr

000b4a78 <strlen>:
   b4a78:	4603      	mov	r3, r0
   b4a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a7e:	2a00      	cmp	r2, #0
   b4a80:	d1fb      	bne.n	b4a7a <strlen+0x2>
   b4a82:	1a18      	subs	r0, r3, r0
   b4a84:	3801      	subs	r0, #1
   b4a86:	4770      	bx	lr

000b4a88 <__aeabi_d2lz>:
   b4a88:	b538      	push	{r3, r4, r5, lr}
   b4a8a:	2200      	movs	r2, #0
   b4a8c:	2300      	movs	r3, #0
   b4a8e:	4604      	mov	r4, r0
   b4a90:	460d      	mov	r5, r1
   b4a92:	f7ff fef3 	bl	b487c <__aeabi_dcmplt>
   b4a96:	b928      	cbnz	r0, b4aa4 <__aeabi_d2lz+0x1c>
   b4a98:	4620      	mov	r0, r4
   b4a9a:	4629      	mov	r1, r5
   b4a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4aa0:	f7ff bfc2 	b.w	b4a28 <__aeabi_d2ulz>
   b4aa4:	4620      	mov	r0, r4
   b4aa6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4aaa:	f7ff ffbd 	bl	b4a28 <__aeabi_d2ulz>
   b4aae:	4240      	negs	r0, r0
   b4ab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4ab4:	bd38      	pop	{r3, r4, r5, pc}
   b4ab6:	bf00      	nop

000b4ab8 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4ab8:	4809      	ldr	r0, [pc, #36]	; (b4ae0 <module_user_pre_init+0x28>)
   b4aba:	490a      	ldr	r1, [pc, #40]	; (b4ae4 <module_user_pre_init+0x2c>)
   b4abc:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4abe:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4ac0:	d005      	beq.n	b4ace <module_user_pre_init+0x16>
   b4ac2:	4a09      	ldr	r2, [pc, #36]	; (b4ae8 <module_user_pre_init+0x30>)
   b4ac4:	4282      	cmp	r2, r0
   b4ac6:	d002      	beq.n	b4ace <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4ac8:	1a12      	subs	r2, r2, r0
   b4aca:	f004 fd28 	bl	b951e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4ace:	4807      	ldr	r0, [pc, #28]	; (b4aec <module_user_pre_init+0x34>)
   b4ad0:	4a07      	ldr	r2, [pc, #28]	; (b4af0 <module_user_pre_init+0x38>)
   b4ad2:	2100      	movs	r1, #0
   b4ad4:	1a12      	subs	r2, r2, r0
   b4ad6:	f004 fd30 	bl	b953a <memset>
    return &link_global_data_start;
}
   b4ada:	4801      	ldr	r0, [pc, #4]	; (b4ae0 <module_user_pre_init+0x28>)
   b4adc:	bd08      	pop	{r3, pc}
   b4ade:	bf00      	nop
   b4ae0:	2003e044 	.word	0x2003e044
   b4ae4:	000bcccc 	.word	0x000bcccc
   b4ae8:	2003e220 	.word	0x2003e220
   b4aec:	2003e220 	.word	0x2003e220
   b4af0:	2003e7f0 	.word	0x2003e7f0

000b4af4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4af4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4af6:	4e07      	ldr	r6, [pc, #28]	; (b4b14 <module_user_init+0x20>)
   b4af8:	4c07      	ldr	r4, [pc, #28]	; (b4b18 <module_user_init+0x24>)
    module_user_init_hook();
   b4afa:	f004 fa7d 	bl	b8ff8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4afe:	1ba4      	subs	r4, r4, r6
   b4b00:	08a4      	lsrs	r4, r4, #2
   b4b02:	2500      	movs	r5, #0
   b4b04:	42ac      	cmp	r4, r5
   b4b06:	d100      	bne.n	b4b0a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b08:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b0a:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b0e:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b10:	3501      	adds	r5, #1
   b4b12:	e7f7      	b.n	b4b04 <module_user_init+0x10>
   b4b14:	000bcc84 	.word	0x000bcc84
   b4b18:	000bcca8 	.word	0x000bcca8

000b4b1c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b1c:	f000 be3c 	b.w	b5798 <setup>

000b4b20 <module_user_loop>:
}

void module_user_loop() {
   b4b20:	b508      	push	{r3, lr}
    loop();
   b4b22:	f000 fc7f 	bl	b5424 <loop>
    _post_loop();
}
   b4b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b2a:	f004 ba1d 	b.w	b8f68 <_post_loop>

000b4b2e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b2e:	f003 b89d 	b.w	b7c6c <malloc>

000b4b32 <_Znaj>:
   b4b32:	f003 b89b 	b.w	b7c6c <malloc>

000b4b36 <_ZdaPv>:
   b4b36:	f003 b8a1 	b.w	b7c7c <free>

000b4b3a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b3a:	f003 b89f 	b.w	b7c7c <free>
	...

000b4b40 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4b40:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4b42:	4a03      	ldr	r2, [pc, #12]	; (b4b50 <__cxa_pure_virtual+0x10>)
   b4b44:	4903      	ldr	r1, [pc, #12]	; (b4b54 <__cxa_pure_virtual+0x14>)
   b4b46:	200c      	movs	r0, #12
   b4b48:	f002 ffdc 	bl	b7b04 <panic_>
  while (1);
   b4b4c:	e7fe      	b.n	b4b4c <__cxa_pure_virtual+0xc>
   b4b4e:	bf00      	nop
   b4b50:	000b7765 	.word	0x000b7765
   b4b54:	000bb530 	.word	0x000bb530

000b4b58 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b58:	7800      	ldrb	r0, [r0, #0]
   b4b5a:	fab0 f080 	clz	r0, r0
   b4b5e:	0940      	lsrs	r0, r0, #5
   b4b60:	4770      	bx	lr

000b4b62 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4b62:	2301      	movs	r3, #1
   b4b64:	7003      	strb	r3, [r0, #0]
   b4b66:	4770      	bx	lr

000b4b68 <_Z9callback2v>:

  getLatAndLong.start();
}

void callback2() {
  getLatAndLongBoolean = true;
   b4b68:	4b01      	ldr	r3, [pc, #4]	; (b4b70 <_Z9callback2v+0x8>)
   b4b6a:	2201      	movs	r2, #1
   b4b6c:	701a      	strb	r2, [r3, #0]
}
   b4b6e:	4770      	bx	lr
   b4b70:	2003e368 	.word	0x2003e368

000b4b74 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4b74:	6943      	ldr	r3, [r0, #20]
   b4b76:	b113      	cbz	r3, b4b7e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b78:	6983      	ldr	r3, [r0, #24]
   b4b7a:	300c      	adds	r0, #12
   b4b7c:	4718      	bx	r3
            callback();
        }
    }
   b4b7e:	4770      	bx	lr

000b4b80 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4b80:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4b82:	2100      	movs	r1, #0
   b4b84:	4604      	mov	r4, r0
   b4b86:	4608      	mov	r0, r1
   b4b88:	f002 fd8c 	bl	b76a4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4b8c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4b8e:	4620      	mov	r0, r4
   b4b90:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4b92:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4b94:	f002 fd9e 	bl	b76d4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4b98:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4b9a:	b10c      	cbz	r4, b4ba0 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4b9c:	2301      	movs	r3, #1
   b4b9e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4ba0:	2100      	movs	r1, #0
   b4ba2:	2001      	movs	r0, #1
   b4ba4:	f002 fd7e 	bl	b76a4 <os_thread_scheduling>
            }
        }
        if (t) {
   b4ba8:	b12c      	cbz	r4, b4bb6 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4baa:	6823      	ldr	r3, [r4, #0]
   b4bac:	4620      	mov	r0, r4
   b4bae:	689b      	ldr	r3, [r3, #8]
   b4bb0:	4798      	blx	r3
            t->running = false;
   b4bb2:	2300      	movs	r3, #0
   b4bb4:	7123      	strb	r3, [r4, #4]
        }
    }
   b4bb6:	b002      	add	sp, #8
   b4bb8:	bd10      	pop	{r4, pc}

000b4bba <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4bba:	2a01      	cmp	r2, #1
   b4bbc:	d102      	bne.n	b4bc4 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4bbe:	6001      	str	r1, [r0, #0]
      }
   b4bc0:	2000      	movs	r0, #0
   b4bc2:	4770      	bx	lr
	  switch (__op)
   b4bc4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4bc6:	bf04      	itt	eq
   b4bc8:	680b      	ldreq	r3, [r1, #0]
   b4bca:	6003      	streq	r3, [r0, #0]
	      break;
   b4bcc:	e7f8      	b.n	b4bc0 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4bce <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4bce:	6803      	ldr	r3, [r0, #0]
   b4bd0:	4718      	bx	r3
	...

000b4bd4 <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4bd4:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4bd6:	f002 fdcd 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4bda:	4b03      	ldr	r3, [pc, #12]	; (b4be8 <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4bdc:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4be2:	f002 bfcb 	b.w	b7b7c <spark_process>
   b4be6:	bf00      	nop
   b4be8:	2003e728 	.word	0x2003e728

000b4bec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4bec:	b510      	push	{r4, lr}
      if (_M_manager)
   b4bee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4bf0:	4604      	mov	r4, r0
      if (_M_manager)
   b4bf2:	b113      	cbz	r3, b4bfa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4bf4:	2203      	movs	r2, #3
   b4bf6:	4601      	mov	r1, r0
   b4bf8:	4798      	blx	r3
    }
   b4bfa:	4620      	mov	r0, r4
   b4bfc:	bd10      	pop	{r4, pc}
	...

000b4c00 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c02:	4b13      	ldr	r3, [pc, #76]	; (b4c50 <_ZN5TimerD1Ev+0x50>)
   b4c04:	6003      	str	r3, [r0, #0]
   b4c06:	4604      	mov	r4, r0
        if (handle) {
   b4c08:	6880      	ldr	r0, [r0, #8]
   b4c0a:	b1c8      	cbz	r0, b4c40 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4c0c:	2500      	movs	r5, #0
   b4c0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4c12:	e9cd 3500 	strd	r3, r5, [sp]
   b4c16:	2102      	movs	r1, #2
   b4c18:	462b      	mov	r3, r5
   b4c1a:	462a      	mov	r2, r5
   b4c1c:	f002 fd62 	bl	b76e4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4c20:	68a0      	ldr	r0, [r4, #8]
   b4c22:	4629      	mov	r1, r5
   b4c24:	f002 fd8e 	bl	b7744 <os_timer_set_id>
            while (running) {
   b4c28:	7923      	ldrb	r3, [r4, #4]
   b4c2a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4c2e:	b113      	cbz	r3, b4c36 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4c30:	f002 fd30 	bl	b7694 <os_thread_yield>
            while (running) {
   b4c34:	e7f8      	b.n	b4c28 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4c36:	68a0      	ldr	r0, [r4, #8]
   b4c38:	4629      	mov	r1, r5
   b4c3a:	f002 fd43 	bl	b76c4 <os_timer_destroy>
            handle = nullptr;
   b4c3e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4c40:	f104 000c 	add.w	r0, r4, #12
   b4c44:	f7ff ffd2 	bl	b4bec <_ZNSt14_Function_baseD1Ev>
    }
   b4c48:	4620      	mov	r0, r4
   b4c4a:	b003      	add	sp, #12
   b4c4c:	bd30      	pop	{r4, r5, pc}
   b4c4e:	bf00      	nop
   b4c50:	000bb62c 	.word	0x000bb62c

000b4c54 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4c54:	b510      	push	{r4, lr}
   b4c56:	4604      	mov	r4, r0
    }
   b4c58:	f7ff ffd2 	bl	b4c00 <_ZN5TimerD1Ev>
   b4c5c:	4620      	mov	r0, r4
   b4c5e:	211c      	movs	r1, #28
   b4c60:	f7ff ff6b 	bl	b4b3a <_ZdlPvj>
   b4c64:	4620      	mov	r0, r4
   b4c66:	bd10      	pop	{r4, pc}

000b4c68 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4c68:	6803      	ldr	r3, [r0, #0]
   b4c6a:	b12b      	cbz	r3, b4c78 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4c6c:	6842      	ldr	r2, [r0, #4]
   b4c6e:	4293      	cmp	r3, r2
   b4c70:	d202      	bcs.n	b4c78 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4c72:	4618      	mov	r0, r3
   b4c74:	f004 bc4b 	b.w	b950e <atoi>
   b4c78:	2000      	movs	r0, #0
   b4c7a:	4770      	bx	lr

000b4c7c <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4c7c:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4c7e:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4c80:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4c82:	b145      	cbz	r5, b4c96 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4c84:	6843      	ldr	r3, [r0, #4]
   b4c86:	429d      	cmp	r5, r3
   b4c88:	d205      	bcs.n	b4c96 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4c8a:	4628      	mov	r0, r5
   b4c8c:	f7ff fef4 	bl	b4a78 <strlen>
   b4c90:	3001      	adds	r0, #1
   b4c92:	4405      	add	r5, r0
   b4c94:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4c96:	4620      	mov	r0, r4
   b4c98:	bd38      	pop	{r3, r4, r5, pc}

000b4c9a <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c9c:	4604      	mov	r4, r0
   b4c9e:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4ca0:	460d      	mov	r5, r1
   b4ca2:	b921      	cbnz	r1, b4cae <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4ca4:	6803      	ldr	r3, [r0, #0]
   b4ca6:	1c7a      	adds	r2, r7, #1
   b4ca8:	6042      	str	r2, [r0, #4]
   b4caa:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4cae:	4608      	mov	r0, r1
   b4cb0:	f7ff fee2 	bl	b4a78 <strlen>
    if (len + l > buff_size)
   b4cb4:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4cb6:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4cb8:	19f2      	adds	r2, r6, r7
   b4cba:	429a      	cmp	r2, r3
   b4cbc:	d8f6      	bhi.n	b4cac <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4cbe:	6820      	ldr	r0, [r4, #0]
   b4cc0:	4632      	mov	r2, r6
   b4cc2:	4629      	mov	r1, r5
   b4cc4:	4438      	add	r0, r7
   b4cc6:	f004 fc2a 	bl	b951e <memcpy>
    len += l;
   b4cca:	6860      	ldr	r0, [r4, #4]
   b4ccc:	4430      	add	r0, r6
   b4cce:	6060      	str	r0, [r4, #4]
   b4cd0:	e7ec      	b.n	b4cac <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4cd4 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4cd4:	b538      	push	{r3, r4, r5, lr}
   b4cd6:	4604      	mov	r4, r0
   b4cd8:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4cda:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4cde:	6825      	ldr	r5, [r4, #0]
   b4ce0:	4a04      	ldr	r2, [pc, #16]	; (b4cf4 <_ZN10BlynkParam3addEi+0x20>)
   b4ce2:	1a09      	subs	r1, r1, r0
   b4ce4:	4428      	add	r0, r5
   b4ce6:	f002 ffd9 	bl	b7c9c <snprintf>
   b4cea:	6863      	ldr	r3, [r4, #4]
   b4cec:	3001      	adds	r0, #1
   b4cee:	4403      	add	r3, r0
   b4cf0:	6063      	str	r3, [r4, #4]
    }
   b4cf2:	bd38      	pop	{r3, r4, r5, pc}
   b4cf4:	000bb545 	.word	0x000bb545

000b4cf8 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4cf8:	b538      	push	{r3, r4, r5, lr}
   b4cfa:	4604      	mov	r4, r0
   b4cfc:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4cfe:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4d02:	6825      	ldr	r5, [r4, #0]
   b4d04:	4a04      	ldr	r2, [pc, #16]	; (b4d18 <_ZN10BlynkParam3addEl+0x20>)
   b4d06:	1a09      	subs	r1, r1, r0
   b4d08:	4428      	add	r0, r5
   b4d0a:	f002 ffc7 	bl	b7c9c <snprintf>
   b4d0e:	6863      	ldr	r3, [r4, #4]
   b4d10:	3001      	adds	r0, #1
   b4d12:	4403      	add	r3, r0
   b4d14:	6063      	str	r3, [r4, #4]
    }
   b4d16:	bd38      	pop	{r3, r4, r5, pc}
   b4d18:	000bb548 	.word	0x000bb548

000b4d1c <_Z12resetDisplayv>:
    client.subscribe("HipposAreTasty/longitude");
    client.subscribe("HipposAreTasty/latitude");
  }
}

void resetDisplay() {
   b4d1c:	b510      	push	{r4, lr}
  display.clearDisplay();
   b4d1e:	4c07      	ldr	r4, [pc, #28]	; (b4d3c <_Z12resetDisplayv+0x20>)
   b4d20:	4620      	mov	r0, r4
   b4d22:	f001 fba9 	bl	b6478 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4d26:	2101      	movs	r1, #1
   b4d28:	4620      	mov	r0, r4
   b4d2a:	f001 f9ec 	bl	b6106 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4d2e:	2200      	movs	r2, #0
   b4d30:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4d34:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0,0);
}
   b4d38:	bd10      	pop	{r4, pc}
   b4d3a:	bf00      	nop
   b4d3c:	2003e2dc 	.word	0x2003e2dc

000b4d40 <_Z17displayLongAndLatv>:
    longitude = value;
    Blynk.virtualWrite(V7, longitude);
  }
}

void displayLongAndLat() {
   b4d40:	b510      	push	{r4, lr}
  resetDisplay();
  display.print("Longitude: ");
   b4d42:	4c0f      	ldr	r4, [pc, #60]	; (b4d80 <_Z17displayLongAndLatv+0x40>)
  resetDisplay();
   b4d44:	f7ff ffea 	bl	b4d1c <_Z12resetDisplayv>
  display.print("Longitude: ");
   b4d48:	490e      	ldr	r1, [pc, #56]	; (b4d84 <_Z17displayLongAndLatv+0x44>)
   b4d4a:	4620      	mov	r0, r4
   b4d4c:	f003 f9fa 	bl	b8144 <_ZN5Print5printEPKc>
  display.println(longitude);
   b4d50:	4b0d      	ldr	r3, [pc, #52]	; (b4d88 <_Z17displayLongAndLatv+0x48>)
   b4d52:	2102      	movs	r1, #2
   b4d54:	ed93 0a00 	vldr	s0, [r3]
   b4d58:	4620      	mov	r0, r4
   b4d5a:	f003 fb07 	bl	b836c <_ZN5Print7printlnEfi>
  display.print("Latitude: ");
   b4d5e:	490b      	ldr	r1, [pc, #44]	; (b4d8c <_Z17displayLongAndLatv+0x4c>)
   b4d60:	4620      	mov	r0, r4
   b4d62:	f003 f9ef 	bl	b8144 <_ZN5Print5printEPKc>
  display.print(latitude);
   b4d66:	4b0a      	ldr	r3, [pc, #40]	; (b4d90 <_Z17displayLongAndLatv+0x50>)
   b4d68:	4620      	mov	r0, r4
   b4d6a:	ed93 0a00 	vldr	s0, [r3]
   b4d6e:	2102      	movs	r1, #2
   b4d70:	f003 fae2 	bl	b8338 <_ZN5Print5printEfi>
  display.display();
   b4d74:	4620      	mov	r0, r4
   b4d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b4d7a:	f001 bdeb 	b.w	b6954 <_ZN16Adafruit_SSD13067displayEv>
   b4d7e:	bf00      	nop
   b4d80:	2003e2dc 	.word	0x2003e2dc
   b4d84:	000bb54c 	.word	0x000bb54c
   b4d88:	2003e370 	.word	0x2003e370
   b4d8c:	000bb558 	.word	0x000bb558
   b4d90:	2003e36c 	.word	0x2003e36c

000b4d94 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4d94:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4d96:	2300      	movs	r3, #0
   b4d98:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4d9a:	6800      	ldr	r0, [r0, #0]
   b4d9c:	f003 ff42 	bl	b8c24 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4da0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4da4:	f002 bb0a 	b.w	b73bc <BlynkNoOpCbk>

000b4da8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4dac:	188f      	adds	r7, r1, r2
   b4dae:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b4db0:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4db2:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4db6:	4606      	mov	r6, r0
   b4db8:	4689      	mov	r9, r1
   b4dba:	4690      	mov	r8, r2
    if (it >= param.end())
   b4dbc:	f080 80c2 	bcs.w	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4dc0:	a805      	add	r0, sp, #20
   b4dc2:	880d      	ldrh	r5, [r1, #0]
   b4dc4:	f7ff ff5a 	bl	b4c7c <_ZN10BlynkParam8iteratorppEv>
   b4dc8:	6803      	ldr	r3, [r0, #0]
   b4dca:	42bb      	cmp	r3, r7
   b4dcc:	f080 80ba 	bcs.w	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4dd0:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4dd2:	7803      	ldrb	r3, [r0, #0]
   b4dd4:	2b41      	cmp	r3, #65	; 0x41
   b4dd6:	d149      	bne.n	b4e6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b4dd8:	3001      	adds	r0, #1
   b4dda:	f004 fb98 	bl	b950e <atoi>
   b4dde:	2805      	cmp	r0, #5
   b4de0:	dd37      	ble.n	b4e52 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4de2:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4de4:	f247 2376 	movw	r3, #29302	; 0x7276
   b4de8:	429d      	cmp	r5, r3
   b4dea:	f000 80d3 	beq.w	b4f94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4dee:	d841      	bhi.n	b4e74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4df0:	f247 2361 	movw	r3, #29281	; 0x7261
   b4df4:	429d      	cmp	r5, r3
   b4df6:	f000 80a8 	beq.w	b4f4a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b4dfa:	f247 2364 	movw	r3, #29284	; 0x7264
   b4dfe:	429d      	cmp	r5, r3
   b4e00:	d06b      	beq.n	b4eda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b4e02:	f646 5370 	movw	r3, #28016	; 0x6d70
   b4e06:	429d      	cmp	r5, r3
   b4e08:	d141      	bne.n	b4e8e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4e0a:	4d78      	ldr	r5, [pc, #480]	; (b4fec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4e0c:	4e78      	ldr	r6, [pc, #480]	; (b4ff0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4e0e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b5004 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b4e12:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b4e14:	42b8      	cmp	r0, r7
   b4e16:	f080 8095 	bcs.w	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4e1a:	7803      	ldrb	r3, [r0, #0]
   b4e1c:	2b41      	cmp	r3, #65	; 0x41
   b4e1e:	d14b      	bne.n	b4eb8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4e20:	3001      	adds	r0, #1
   b4e22:	f004 fb74 	bl	b950e <atoi>
   b4e26:	2805      	cmp	r0, #5
   b4e28:	dd39      	ble.n	b4e9e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b4e2a:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4e2c:	a805      	add	r0, sp, #20
   b4e2e:	f7ff ff25 	bl	b4c7c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4e32:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4e36:	4629      	mov	r1, r5
   b4e38:	4648      	mov	r0, r9
   b4e3a:	f7ff fe13 	bl	b4a64 <strcmp>
   b4e3e:	4601      	mov	r1, r0
   b4e40:	2800      	cmp	r0, #0
   b4e42:	d13d      	bne.n	b4ec0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b4e44:	4620      	mov	r0, r4
   b4e46:	f004 f947 	bl	b90d8 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4e4a:	a805      	add	r0, sp, #20
   b4e4c:	f7ff ff16 	bl	b4c7c <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4e50:	e7df      	b.n	b4e12 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4e52:	9805      	ldr	r0, [sp, #20]
   b4e54:	3001      	adds	r0, #1
   b4e56:	f004 fb5a 	bl	b950e <atoi>
   b4e5a:	2800      	cmp	r0, #0
   b4e5c:	dbc1      	blt.n	b4de2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b4e5e:	9805      	ldr	r0, [sp, #20]
   b4e60:	3001      	adds	r0, #1
   b4e62:	f004 fb54 	bl	b950e <atoi>
   b4e66:	300e      	adds	r0, #14
   b4e68:	b2c4      	uxtb	r4, r0
   b4e6a:	e7bb      	b.n	b4de4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b4e6c:	a805      	add	r0, sp, #20
   b4e6e:	f7ff fefb 	bl	b4c68 <_ZNK10BlynkParam8iterator5asIntEv>
   b4e72:	e7f9      	b.n	b4e68 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b4e74:	f247 7364 	movw	r3, #30564	; 0x7764
   b4e78:	429d      	cmp	r5, r3
   b4e7a:	d04f      	beq.n	b4f1c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b4e7c:	f247 7376 	movw	r3, #30582	; 0x7776
   b4e80:	429d      	cmp	r5, r3
   b4e82:	f000 8097 	beq.w	b4fb4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b4e86:	f247 7361 	movw	r3, #30561	; 0x7761
   b4e8a:	429d      	cmp	r5, r3
   b4e8c:	d06f      	beq.n	b4f6e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4e8e:	2300      	movs	r3, #0
   b4e90:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4e94:	2202      	movs	r2, #2
   b4e96:	9200      	str	r2, [sp, #0]
   b4e98:	8b72      	ldrh	r2, [r6, #26]
   b4e9a:	4619      	mov	r1, r3
   b4e9c:	e03a      	b.n	b4f14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4e9e:	9805      	ldr	r0, [sp, #20]
   b4ea0:	3001      	adds	r0, #1
   b4ea2:	f004 fb34 	bl	b950e <atoi>
   b4ea6:	2800      	cmp	r0, #0
   b4ea8:	dbbf      	blt.n	b4e2a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b4eaa:	9805      	ldr	r0, [sp, #20]
   b4eac:	3001      	adds	r0, #1
   b4eae:	f004 fb2e 	bl	b950e <atoi>
   b4eb2:	300e      	adds	r0, #14
   b4eb4:	b2c4      	uxtb	r4, r0
   b4eb6:	e7b9      	b.n	b4e2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b4eb8:	a805      	add	r0, sp, #20
   b4eba:	f7ff fed5 	bl	b4c68 <_ZNK10BlynkParam8iterator5asIntEv>
   b4ebe:	e7f9      	b.n	b4eb4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4ec0:	4631      	mov	r1, r6
   b4ec2:	4648      	mov	r0, r9
   b4ec4:	f7ff fdce 	bl	b4a64 <strcmp>
   b4ec8:	b128      	cbz	r0, b4ed6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b4eca:	4641      	mov	r1, r8
   b4ecc:	4648      	mov	r0, r9
   b4ece:	f7ff fdc9 	bl	b4a64 <strcmp>
   b4ed2:	2800      	cmp	r0, #0
   b4ed4:	d1b9      	bne.n	b4e4a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b4ed6:	2101      	movs	r1, #1
   b4ed8:	e7b4      	b.n	b4e44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4eda:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4edc:	4945      	ldr	r1, [pc, #276]	; (b4ff4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b4ede:	9307      	str	r3, [sp, #28]
   b4ee0:	a807      	add	r0, sp, #28
   b4ee2:	2310      	movs	r3, #16
   b4ee4:	2500      	movs	r5, #0
   b4ee6:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4eea:	f7ff fed6 	bl	b4c9a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4eee:	a807      	add	r0, sp, #28
   b4ef0:	4621      	mov	r1, r4
   b4ef2:	f7ff feef 	bl	b4cd4 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b4ef6:	4620      	mov	r0, r4
   b4ef8:	f004 f918 	bl	b912c <digitalRead>
        rsp.add(analogRead(pin));
   b4efc:	4601      	mov	r1, r0
   b4efe:	a807      	add	r0, sp, #28
   b4f00:	f7ff fefa 	bl	b4cf8 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4f04:	9b08      	ldr	r3, [sp, #32]
   b4f06:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4f0a:	3b01      	subs	r3, #1
   b4f0c:	9300      	str	r3, [sp, #0]
   b4f0e:	9b07      	ldr	r3, [sp, #28]
   b4f10:	462a      	mov	r2, r5
   b4f12:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4f14:	4630      	mov	r0, r6
   b4f16:	f000 facd 	bl	b54b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4f1a:	e013      	b.n	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b4f1c:	a805      	add	r0, sp, #20
   b4f1e:	f7ff fead 	bl	b4c7c <_ZN10BlynkParam8iteratorppEv>
   b4f22:	6803      	ldr	r3, [r0, #0]
   b4f24:	429f      	cmp	r7, r3
   b4f26:	d90d      	bls.n	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b4f28:	b2a4      	uxth	r4, r4
   b4f2a:	2101      	movs	r1, #1
   b4f2c:	4620      	mov	r0, r4
   b4f2e:	f004 f8d3 	bl	b90d8 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4f32:	a805      	add	r0, sp, #20
   b4f34:	f7ff fe98 	bl	b4c68 <_ZNK10BlynkParam8iterator5asIntEv>
   b4f38:	1e01      	subs	r1, r0, #0
   b4f3a:	bf18      	it	ne
   b4f3c:	2101      	movne	r1, #1
   b4f3e:	4620      	mov	r0, r4
   b4f40:	f004 f8db 	bl	b90fa <digitalWrite>
    }
}
   b4f44:	b00f      	add	sp, #60	; 0x3c
   b4f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4f4a:	ab0a      	add	r3, sp, #40	; 0x28
   b4f4c:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4f4e:	a807      	add	r0, sp, #28
   b4f50:	2310      	movs	r3, #16
   b4f52:	4929      	ldr	r1, [pc, #164]	; (b4ff8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b4f54:	2500      	movs	r5, #0
   b4f56:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4f5a:	f7ff fe9e 	bl	b4c9a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4f5e:	a807      	add	r0, sp, #28
   b4f60:	4621      	mov	r1, r4
   b4f62:	f7ff feb7 	bl	b4cd4 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b4f66:	4620      	mov	r0, r4
   b4f68:	f004 f8f3 	bl	b9152 <analogRead>
   b4f6c:	e7c6      	b.n	b4efc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b4f6e:	a805      	add	r0, sp, #20
   b4f70:	f7ff fe84 	bl	b4c7c <_ZN10BlynkParam8iteratorppEv>
   b4f74:	6803      	ldr	r3, [r0, #0]
   b4f76:	429f      	cmp	r7, r3
   b4f78:	d9e4      	bls.n	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b4f7a:	b2a4      	uxth	r4, r4
   b4f7c:	2101      	movs	r1, #1
   b4f7e:	4620      	mov	r0, r4
   b4f80:	f004 f8aa 	bl	b90d8 <pinMode>
        analogWrite(pin, it.asInt());
   b4f84:	a805      	add	r0, sp, #20
   b4f86:	f7ff fe6f 	bl	b4c68 <_ZNK10BlynkParam8iterator5asIntEv>
   b4f8a:	4601      	mov	r1, r0
   b4f8c:	4620      	mov	r0, r4
   b4f8e:	f004 f8f7 	bl	b9180 <_Z11analogWritetm>
    } break;
   b4f92:	e7d7      	b.n	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b4f94:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b4f96:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b4f9a:	f002 fa11 	bl	b73c0 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b4f9e:	4603      	mov	r3, r0
            handler(req);
   b4fa0:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b4fa2:	b123      	cbz	r3, b4fae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b4fa4:	4a15      	ldr	r2, [pc, #84]	; (b4ffc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b4fa6:	4293      	cmp	r3, r2
   b4fa8:	d001      	beq.n	b4fae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b4faa:	4798      	blx	r3
   b4fac:	e7ca      	b.n	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b4fae:	f002 fa03 	bl	b73b8 <BlynkWidgetRead>
        }
    }
   b4fb2:	e7c7      	b.n	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b4fb4:	a805      	add	r0, sp, #20
   b4fb6:	f7ff fe61 	bl	b4c7c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4fba:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4fbc:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4fc0:	eba3 0109 	sub.w	r1, r3, r9
   b4fc4:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b4fc8:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b4fca:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b4fce:	910c      	str	r1, [sp, #48]	; 0x30
   b4fd0:	f002 fa00 	bl	b73d4 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b4fd4:	4603      	mov	r3, r0
            handler(req, param);
   b4fd6:	a90a      	add	r1, sp, #40	; 0x28
   b4fd8:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b4fda:	b123      	cbz	r3, b4fe6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b4fdc:	4a08      	ldr	r2, [pc, #32]	; (b5000 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b4fde:	4293      	cmp	r3, r2
   b4fe0:	d001      	beq.n	b4fe6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b4fe2:	4798      	blx	r3
   b4fe4:	e7ae      	b.n	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b4fe6:	f002 f9e8 	bl	b73ba <BlynkWidgetWrite>
    } break;
   b4fea:	e7ab      	b.n	b4f44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b4fec:	000bb563 	.word	0x000bb563
   b4ff0:	000bb566 	.word	0x000bb566
   b4ff4:	000bb56e 	.word	0x000bb56e
   b4ff8:	000bb571 	.word	0x000bb571
   b4ffc:	000b73b9 	.word	0x000b73b9
   b5000:	000b73bb 	.word	0x000b73bb
   b5004:	000bb56a 	.word	0x000bb56a

000b5008 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b5008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b500c:	b08c      	sub	sp, #48	; 0x30
   b500e:	af04      	add	r7, sp, #16
   b5010:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b5012:	2205      	movs	r2, #5
   b5014:	6800      	ldr	r0, [r0, #0]
   b5016:	1d39      	adds	r1, r7, #4
   b5018:	f003 fab5 	bl	b8586 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b501c:	b3a8      	cbz	r0, b508a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b501e:	2805      	cmp	r0, #5
   b5020:	d004      	beq.n	b502c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b5022:	2000      	movs	r0, #0
}
   b5024:	3720      	adds	r7, #32
   b5026:	46bd      	mov	sp, r7
   b5028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b502c:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b5030:	f002 fc58 	bl	b78e4 <inet_ntohs>
   b5034:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b5038:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b503c:	f002 fc52 	bl	b78e4 <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b5040:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b5044:	f8a7 0007 	strh.w	r0, [r7, #7]
   b5048:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b504a:	2b00      	cmp	r3, #0
   b504c:	d0e9      	beq.n	b5022 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b504e:	793b      	ldrb	r3, [r7, #4]
   b5050:	bb23      	cbnz	r3, b509c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x94>
        lastActivityIn = BlynkMillis();
   b5052:	f002 f9af 	bl	b73b4 <_Z11BlynkMillisv>
   b5056:	4602      	mov	r2, r0
   b5058:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b505a:	7f60      	ldrb	r0, [r4, #29]
   b505c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5060:	b9c0      	cbnz	r0, b5094 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
   b5062:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b5066:	2901      	cmp	r1, #1
   b5068:	d114      	bne.n	b5094 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
            switch (hdr.length) {
   b506a:	2b09      	cmp	r3, #9
   b506c:	d00f      	beq.n	b508e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b506e:	2bc8      	cmp	r3, #200	; 0xc8
   b5070:	d001      	beq.n	b5076 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b5072:	2b04      	cmp	r3, #4
   b5074:	d1d6      	bne.n	b5024 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b5076:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b5078:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b507a:	4620      	mov	r0, r4
                state = CONNECTED;
   b507c:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b507e:	f000 fac9 	bl	b5614 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b5082:	f7ff fda7 	bl	b4bd4 <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b5086:	f002 f999 	bl	b73bc <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b508a:	2001      	movs	r0, #1
   b508c:	e7ca      	b.n	b5024 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b508e:	2303      	movs	r3, #3
   b5090:	7763      	strb	r3, [r4, #29]
                break;
   b5092:	e7c7      	b.n	b5024 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b5094:	1f58      	subs	r0, r3, #5
   b5096:	bf18      	it	ne
   b5098:	2001      	movne	r0, #1
   b509a:	e7c3      	b.n	b5024 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b509c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b50a0:	d903      	bls.n	b50aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa2>
        internalReconnect();
   b50a2:	4620      	mov	r0, r4
   b50a4:	f7ff fe76 	bl	b4d94 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b50a8:	e7ef      	b.n	b508a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b50aa:	f100 0308 	add.w	r3, r0, #8
   b50ae:	f023 0307 	bic.w	r3, r3, #7
   b50b2:	466e      	mov	r6, sp
   b50b4:	ebad 0d03 	sub.w	sp, sp, r3
   b50b8:	ad04      	add	r5, sp, #16
   b50ba:	4602      	mov	r2, r0
   b50bc:	4629      	mov	r1, r5
   b50be:	6820      	ldr	r0, [r4, #0]
   b50c0:	f003 fa61 	bl	b8586 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b50c4:	4580      	cmp	r8, r0
   b50c6:	f04f 0000 	mov.w	r0, #0
   b50ca:	d17f      	bne.n	b51cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
    inputBuffer[hdr.length] = '\0';
   b50cc:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b50d0:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b50d2:	f002 f96f 	bl	b73b4 <_Z11BlynkMillisv>
    switch (hdr.type)
   b50d6:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b50d8:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b50da:	2b14      	cmp	r3, #20
   b50dc:	f000 80a6 	beq.w	b522c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b50e0:	d848      	bhi.n	b5174 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
   b50e2:	2b0f      	cmp	r3, #15
   b50e4:	f000 80a2 	beq.w	b522c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b50e8:	d807      	bhi.n	b50fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b50ea:	2b02      	cmp	r3, #2
   b50ec:	d048      	beq.n	b5180 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
   b50ee:	2b06      	cmp	r3, #6
   b50f0:	d051      	beq.n	b5196 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        internalReconnect();
   b50f2:	4620      	mov	r0, r4
   b50f4:	f7ff fe4e 	bl	b4d94 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b50f8:	e058      	b.n	b51ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
    switch (hdr.type)
   b50fa:	2b11      	cmp	r3, #17
   b50fc:	d1f9      	bne.n	b50f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        BlynkReq req = { 0 };
   b50fe:	2300      	movs	r3, #0
   b5100:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b5102:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b5106:	442b      	add	r3, r5
        if (it >= param.end())
   b5108:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b510a:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b510e:	d24d      	bcs.n	b51ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        ++it;
   b5110:	f107 000c 	add.w	r0, r7, #12
   b5114:	f8d5 8000 	ldr.w	r8, [r5]
   b5118:	f7ff fdb0 	bl	b4c7c <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b511c:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b511e:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b5122:	1b5d      	subs	r5, r3, r5
   b5124:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b5126:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b512a:	687b      	ldr	r3, [r7, #4]
   b512c:	61fd      	str	r5, [r7, #28]
   b512e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b5132:	8363      	strh	r3, [r4, #26]
   b5134:	4b64      	ldr	r3, [pc, #400]	; (b52c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b5136:	4598      	cmp	r8, r3
   b5138:	f000 80bf 	beq.w	b52ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
   b513c:	f200 808c 	bhi.w	b5258 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
   b5140:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b5144:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b5148:	4413      	add	r3, r2
   b514a:	4598      	cmp	r8, r3
   b514c:	f000 809d 	beq.w	b528a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x282>
   b5150:	d879      	bhi.n	b5246 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
   b5152:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b5156:	3b06      	subs	r3, #6
   b5158:	4598      	cmp	r8, r3
   b515a:	f000 809c 	beq.w	b5296 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28e>
   b515e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b5162:	3303      	adds	r3, #3
   b5164:	4598      	cmp	r8, r3
   b5166:	d16b      	bne.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b5168:	f107 0114 	add.w	r1, r7, #20
   b516c:	4638      	mov	r0, r7
   b516e:	f002 f924 	bl	b73ba <BlynkWidgetWrite>
   b5172:	e065      	b.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
    switch (hdr.type)
   b5174:	2b29      	cmp	r3, #41	; 0x29
   b5176:	d01b      	beq.n	b51b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   b5178:	2b37      	cmp	r3, #55	; 0x37
   b517a:	d017      	beq.n	b51ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b517c:	2b1d      	cmp	r3, #29
   b517e:	d1b8      	bne.n	b50f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b5180:	7f63      	ldrb	r3, [r4, #29]
   b5182:	b943      	cbnz	r3, b5196 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
            state = CONNECTED;
   b5184:	2301      	movs	r3, #1
   b5186:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b5188:	4620      	mov	r0, r4
   b518a:	f000 fa43 	bl	b5614 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b518e:	f7ff fd21 	bl	b4bd4 <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b5192:	f002 f913 	bl	b73bc <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b5196:	2300      	movs	r3, #0
   b5198:	21c8      	movs	r1, #200	; 0xc8
   b519a:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b519e:	9100      	str	r1, [sp, #0]
   b51a0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b51a4:	4619      	mov	r1, r3
   b51a6:	4620      	mov	r0, r4
   b51a8:	f000 f984 	bl	b54b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b51ac:	2001      	movs	r0, #1
   b51ae:	e00d      	b.n	b51cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        if (!redir_serv) {
   b51b0:	68a3      	ldr	r3, [r4, #8]
   b51b2:	b91b      	cbnz	r3, b51bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
             redir_serv = (char*)malloc(64);
   b51b4:	2040      	movs	r0, #64	; 0x40
   b51b6:	f002 fd59 	bl	b7c6c <malloc>
   b51ba:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b51bc:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b51c0:	44a8      	add	r8, r5
        if (it >= param.end())
   b51c2:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b51c4:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b51c8:	d302      	bcc.n	b51d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
            return false;
   b51ca:	2000      	movs	r0, #0
   b51cc:	46b5      	mov	sp, r6
   b51ce:	e729      	b.n	b5024 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b51d0:	4629      	mov	r1, r5
   b51d2:	2240      	movs	r2, #64	; 0x40
   b51d4:	68a0      	ldr	r0, [r4, #8]
   b51d6:	f004 f9fb 	bl	b95d0 <strncpy>
        redir_serv[63] = '\0';
   b51da:	68a3      	ldr	r3, [r4, #8]
   b51dc:	2500      	movs	r5, #0
   b51de:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b51e2:	f107 0014 	add.w	r0, r7, #20
   b51e6:	f7ff fd49 	bl	b4c7c <_ZN10BlynkParam8iteratorppEv>
   b51ea:	6803      	ldr	r3, [r0, #0]
   b51ec:	4598      	cmp	r8, r3
   b51ee:	d91b      	bls.n	b5228 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b51f0:	6978      	ldr	r0, [r7, #20]
   b51f2:	b120      	cbz	r0, b51fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
   b51f4:	69bb      	ldr	r3, [r7, #24]
   b51f6:	4298      	cmp	r0, r3
   b51f8:	d214      	bcs.n	b5224 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b51fa:	f004 f98c 	bl	b9516 <atol>
            redir_port = it.asLong();
   b51fe:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b5200:	6820      	ldr	r0, [r4, #0]
   b5202:	f003 fd0f 	bl	b8c24 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b5206:	6823      	ldr	r3, [r4, #0]
   b5208:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b520a:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b520c:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b520e:	2300      	movs	r3, #0
   b5210:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b5212:	f002 f8cf 	bl	b73b4 <_Z11BlynkMillisv>
   b5216:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b521a:	3808      	subs	r0, #8
   b521c:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b5220:	6160      	str	r0, [r4, #20]
   b5222:	e7c3      	b.n	b51ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b5224:	4628      	mov	r0, r5
   b5226:	e7ea      	b.n	b51fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b5228:	2550      	movs	r5, #80	; 0x50
   b522a:	e7e9      	b.n	b5200 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        msgIdOutOverride = hdr.msg_id;
   b522c:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b522e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b5232:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b5236:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b5238:	4629      	mov	r1, r5
   b523a:	4620      	mov	r0, r4
   b523c:	f7ff fdb4 	bl	b4da8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b5240:	2300      	movs	r3, #0
   b5242:	8363      	strh	r3, [r4, #26]
   b5244:	e7b2      	b.n	b51ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b5246:	4b21      	ldr	r3, [pc, #132]	; (b52cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b5248:	4598      	cmp	r8, r3
   b524a:	d1f9      	bne.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b524c:	f107 0114 	add.w	r1, r7, #20
   b5250:	4638      	mov	r0, r7
   b5252:	f002 f8b2 	bl	b73ba <BlynkWidgetWrite>
   b5256:	e7f3      	b.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b5258:	4b1d      	ldr	r3, [pc, #116]	; (b52d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   b525a:	4598      	cmp	r8, r3
   b525c:	d021      	beq.n	b52a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29a>
   b525e:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b5262:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b5266:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b526a:	4598      	cmp	r8, r3
   b526c:	d01f      	beq.n	b52ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a6>
   b526e:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b5272:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b5276:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b527a:	4598      	cmp	r8, r3
   b527c:	d1e0      	bne.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b527e:	f107 0114 	add.w	r1, r7, #20
   b5282:	4638      	mov	r0, r7
   b5284:	f002 f899 	bl	b73ba <BlynkWidgetWrite>
   b5288:	e7da      	b.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b528a:	f107 0114 	add.w	r1, r7, #20
   b528e:	4638      	mov	r0, r7
   b5290:	f002 f893 	bl	b73ba <BlynkWidgetWrite>
   b5294:	e7d4      	b.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b5296:	f107 0114 	add.w	r1, r7, #20
   b529a:	4638      	mov	r0, r7
   b529c:	f002 f88d 	bl	b73ba <BlynkWidgetWrite>
   b52a0:	e7ce      	b.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b52a2:	f107 0114 	add.w	r1, r7, #20
   b52a6:	4638      	mov	r0, r7
   b52a8:	f002 f887 	bl	b73ba <BlynkWidgetWrite>
   b52ac:	e7c8      	b.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b52ae:	f107 0114 	add.w	r1, r7, #20
   b52b2:	4638      	mov	r0, r7
   b52b4:	f002 f881 	bl	b73ba <BlynkWidgetWrite>
   b52b8:	e7c2      	b.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b52ba:	f107 0114 	add.w	r1, r7, #20
   b52be:	4638      	mov	r0, r7
   b52c0:	f002 f87b 	bl	b73ba <BlynkWidgetWrite>
   b52c4:	e7bc      	b.n	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b52c6:	bf00      	nop
   b52c8:	00736676 	.word	0x00736676
   b52cc:	00676264 	.word	0x00676264
   b52d0:	6e6f6361 	.word	0x6e6f6361

000b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b52d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52d8:	4604      	mov	r4, r0
   b52da:	b08c      	sub	sp, #48	; 0x30
   b52dc:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b52de:	f7ff fc79 	bl	b4bd4 <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b52e2:	7f63      	ldrb	r3, [r4, #29]
   b52e4:	2b02      	cmp	r3, #2
   b52e6:	d01e      	beq.n	b5326 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b52e8:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b52ea:	8b62      	ldrh	r2, [r4, #26]
   b52ec:	3301      	adds	r3, #1
   b52ee:	b2db      	uxtb	r3, r3
   b52f0:	7723      	strb	r3, [r4, #28]
   b52f2:	b9aa      	cbnz	r2, b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b52f4:	2b02      	cmp	r3, #2
   b52f6:	d813      	bhi.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b52f8:	6820      	ldr	r0, [r4, #0]
   b52fa:	f003 fb5b 	bl	b89b4 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b52fe:	b1a8      	cbz	r0, b532c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b5300:	b925      	cbnz	r5, b530c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b5302:	6820      	ldr	r0, [r4, #0]
   b5304:	f003 fc34 	bl	b8b70 <_ZN9TCPClient9availableEv>
   b5308:	2800      	cmp	r0, #0
   b530a:	dd0f      	ble.n	b532c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b530c:	4620      	mov	r0, r4
   b530e:	f7ff fe7b 	bl	b5008 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b5312:	2800      	cmp	r0, #0
   b5314:	d1f5      	bne.n	b5302 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b5316:	6820      	ldr	r0, [r4, #0]
   b5318:	f003 fc84 	bl	b8c24 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b531c:	f002 f84e 	bl	b73bc <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b5320:	7f23      	ldrb	r3, [r4, #28]
   b5322:	3b01      	subs	r3, #1
   b5324:	7723      	strb	r3, [r4, #28]
}
   b5326:	b00c      	add	sp, #48	; 0x30
   b5328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b532c:	f002 f842 	bl	b73b4 <_Z11BlynkMillisv>
   b5330:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b5332:	6820      	ldr	r0, [r4, #0]
   b5334:	f003 fb3e 	bl	b89b4 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b5338:	7f67      	ldrb	r7, [r4, #29]
   b533a:	2f01      	cmp	r7, #1
   b533c:	4606      	mov	r6, r0
   b533e:	d124      	bne.n	b538a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b5340:	b920      	cbnz	r0, b534c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b5342:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b5344:	4620      	mov	r0, r4
   b5346:	f7ff fd25 	bl	b4d94 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b534a:	e7e9      	b.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b534c:	68e3      	ldr	r3, [r4, #12]
   b534e:	f24f 6218 	movw	r2, #63000	; 0xf618
   b5352:	1aeb      	subs	r3, r5, r3
   b5354:	4293      	cmp	r3, r2
   b5356:	d8f5      	bhi.n	b5344 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b5358:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b535c:	4293      	cmp	r3, r2
   b535e:	d803      	bhi.n	b5368 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5360:	6923      	ldr	r3, [r4, #16]
   b5362:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b5364:	4293      	cmp	r3, r2
   b5366:	d9db      	bls.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5368:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b536a:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b536e:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5370:	4293      	cmp	r3, r2
   b5372:	d9d5      	bls.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b5374:	2300      	movs	r3, #0
   b5376:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b537a:	9300      	str	r3, [sp, #0]
   b537c:	461a      	mov	r2, r3
   b537e:	2106      	movs	r1, #6
   b5380:	4620      	mov	r0, r4
   b5382:	f000 f897 	bl	b54b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b5386:	6165      	str	r5, [r4, #20]
                return false;
   b5388:	e7ca      	b.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b538a:	2f00      	cmp	r7, #0
   b538c:	d1c8      	bne.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b538e:	6963      	ldr	r3, [r4, #20]
   b5390:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b5392:	b140      	cbz	r0, b53a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b5394:	f241 7270 	movw	r2, #6000	; 0x1770
   b5398:	4293      	cmp	r3, r2
   b539a:	d9c1      	bls.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b539c:	6820      	ldr	r0, [r4, #0]
   b539e:	f003 fc41 	bl	b8c24 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b53a2:	7767      	strb	r7, [r4, #29]
            return false;
   b53a4:	e7bc      	b.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b53a6:	f241 3288 	movw	r2, #5000	; 0x1388
   b53aa:	4293      	cmp	r3, r2
   b53ac:	d9b8      	bls.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b53ae:	6820      	ldr	r0, [r4, #0]
   b53b0:	f003 fc38 	bl	b8c24 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b53b4:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b53b8:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b53bc:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b53c0:	f1be 0f00 	cmp.w	lr, #0
   b53c4:	d01b      	beq.n	b53fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b53c6:	4633      	mov	r3, r6
   b53c8:	4642      	mov	r2, r8
   b53ca:	4671      	mov	r1, lr
   b53cc:	4660      	mov	r0, ip
   b53ce:	f003 fa73 	bl	b88b8 <_ZN9TCPClient7connectEPKctm>
   b53d2:	2801      	cmp	r0, #1
   b53d4:	d1d7      	bne.n	b5386 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b53d6:	6863      	ldr	r3, [r4, #4]
   b53d8:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b53da:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b53dc:	4618      	mov	r0, r3
            msgIdOut = 1;
   b53de:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b53e0:	f7ff fb4a 	bl	b4a78 <strlen>
   b53e4:	2200      	movs	r2, #0
   b53e6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b53ea:	9b05      	ldr	r3, [sp, #20]
   b53ec:	9000      	str	r0, [sp, #0]
   b53ee:	462a      	mov	r2, r5
   b53f0:	211d      	movs	r1, #29
   b53f2:	4620      	mov	r0, r4
   b53f4:	f000 f85e 	bl	b54b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b53f8:	6923      	ldr	r3, [r4, #16]
   b53fa:	6163      	str	r3, [r4, #20]
            return true;
   b53fc:	e790      	b.n	b5320 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b53fe:	4b08      	ldr	r3, [pc, #32]	; (b5420 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b5400:	9306      	str	r3, [sp, #24]
   b5402:	f10c 0720 	add.w	r7, ip, #32
   b5406:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5408:	ae07      	add	r6, sp, #28
   b540a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b540c:	683b      	ldr	r3, [r7, #0]
   b540e:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b5410:	4642      	mov	r2, r8
   b5412:	4673      	mov	r3, lr
   b5414:	a906      	add	r1, sp, #24
   b5416:	4660      	mov	r0, ip
   b5418:	f003 fb2e 	bl	b8a78 <_ZN9TCPClient7connectE9IPAddresstm>
   b541c:	e7d9      	b.n	b53d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b541e:	bf00      	nop
   b5420:	000bc650 	.word	0x000bc650

000b5424 <loop>:
void loop() {
   b5424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Blynk.run();
   b5426:	2100      	movs	r1, #0
   b5428:	4819      	ldr	r0, [pc, #100]	; (b5490 <loop+0x6c>)
   b542a:	f7ff ff53 	bl	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  timer.run();
   b542e:	4819      	ldr	r0, [pc, #100]	; (b5494 <loop+0x70>)
   b5430:	f002 f853 	bl	b74da <_ZN10BlynkTimer3runEv>
  display.loop();
   b5434:	4818      	ldr	r0, [pc, #96]	; (b5498 <loop+0x74>)
   b5436:	f002 f914 	bl	b7662 <_ZN16OledWingAdafruit4loopEv>
  if (client.isConnected()) {
   b543a:	4818      	ldr	r0, [pc, #96]	; (b549c <loop+0x78>)
   b543c:	f001 fc96 	bl	b6d6c <_ZN4MQTT11isConnectedEv>
   b5440:	b188      	cbz	r0, b5466 <loop+0x42>
    if (getLatAndLongBoolean) {
   b5442:	4c17      	ldr	r4, [pc, #92]	; (b54a0 <loop+0x7c>)
    client.loop();
   b5444:	4815      	ldr	r0, [pc, #84]	; (b549c <loop+0x78>)
   b5446:	f001 fe68 	bl	b711a <_ZN4MQTT4loopEv>
    if (getLatAndLongBoolean) {
   b544a:	7823      	ldrb	r3, [r4, #0]
   b544c:	b133      	cbz	r3, b545c <loop+0x38>
      client.publish("HipposAreTasty/Get", "yo");
   b544e:	4a15      	ldr	r2, [pc, #84]	; (b54a4 <loop+0x80>)
   b5450:	4915      	ldr	r1, [pc, #84]	; (b54a8 <loop+0x84>)
   b5452:	4812      	ldr	r0, [pc, #72]	; (b549c <loop+0x78>)
   b5454:	f001 fe05 	bl	b7062 <_ZN4MQTT7publishEPKcS1_>
      getLatAndLongBoolean = false;
   b5458:	2300      	movs	r3, #0
   b545a:	7023      	strb	r3, [r4, #0]
}
   b545c:	b004      	add	sp, #16
   b545e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    displayLongAndLat();
   b5462:	f7ff bc6d 	b.w	b4d40 <_Z17displayLongAndLatv>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b5466:	4668      	mov	r0, sp
   b5468:	f002 fb90 	bl	b7b8c <spark_deviceID>
    client.connect(System.deviceID());
   b546c:	9900      	ldr	r1, [sp, #0]
   b546e:	480b      	ldr	r0, [pc, #44]	; (b549c <loop+0x78>)
   b5470:	f001 fd6c 	bl	b6f4c <_ZN4MQTT7connectEPKc>
   b5474:	4668      	mov	r0, sp
   b5476:	f003 f89b 	bl	b85b0 <_ZN6StringD1Ev>
    client.subscribe("HipposAreTasty/longitude");
   b547a:	490c      	ldr	r1, [pc, #48]	; (b54ac <loop+0x88>)
   b547c:	4807      	ldr	r0, [pc, #28]	; (b549c <loop+0x78>)
   b547e:	f001 ff94 	bl	b73aa <_ZN4MQTT9subscribeEPKc>
    client.subscribe("HipposAreTasty/latitude");
   b5482:	490b      	ldr	r1, [pc, #44]	; (b54b0 <loop+0x8c>)
   b5484:	4805      	ldr	r0, [pc, #20]	; (b549c <loop+0x78>)
}
   b5486:	b004      	add	sp, #16
   b5488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    client.subscribe("HipposAreTasty/latitude");
   b548c:	f001 bf8d 	b.w	b73aa <_ZN4MQTT9subscribeEPKc>
   b5490:	2003e220 	.word	0x2003e220
   b5494:	2003e374 	.word	0x2003e374
   b5498:	2003e2dc 	.word	0x2003e2dc
   b549c:	2003e27c 	.word	0x2003e27c
   b54a0:	2003e368 	.word	0x2003e368
   b54a4:	000bb574 	.word	0x000bb574
   b54a8:	000bb577 	.word	0x000bb577
   b54ac:	000bb58a 	.word	0x000bb58a
   b54b0:	000bb5a3 	.word	0x000bb5a3

000b54b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b54b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54b8:	b083      	sub	sp, #12
   b54ba:	af00      	add	r7, sp, #0
   b54bc:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b54be:	6800      	ldr	r0, [r0, #0]
   b54c0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b54c2:	4688      	mov	r8, r1
   b54c4:	4616      	mov	r6, r2
   b54c6:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b54c8:	46eb      	mov	fp, sp
   b54ca:	f003 fa73 	bl	b89b4 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b54ce:	2800      	cmp	r0, #0
   b54d0:	f000 8081 	beq.w	b55d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b54d4:	f1b8 0f1d 	cmp.w	r8, #29
   b54d8:	d804      	bhi.n	b54e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b54da:	4b4d      	ldr	r3, [pc, #308]	; (b5610 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b54dc:	fa23 f308 	lsr.w	r3, r3, r8
   b54e0:	07db      	lsls	r3, r3, #31
   b54e2:	d402      	bmi.n	b54ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b54e4:	7f63      	ldrb	r3, [r4, #29]
   b54e6:	2b01      	cmp	r3, #1
   b54e8:	d175      	bne.n	b55d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b54ea:	b946      	cbnz	r6, b54fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b54ec:	8b66      	ldrh	r6, [r4, #26]
   b54ee:	b936      	cbnz	r6, b54fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b54f0:	8b23      	ldrh	r3, [r4, #24]
   b54f2:	3301      	adds	r3, #1
   b54f4:	b29b      	uxth	r3, r3
   b54f6:	2b00      	cmp	r3, #0
   b54f8:	d072      	beq.n	b55e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b54fa:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b54fc:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b54fe:	f1a8 030c 	sub.w	r3, r8, #12
   b5502:	2b08      	cmp	r3, #8
   b5504:	d816      	bhi.n	b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b5506:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b550a:	4293      	cmp	r3, r2
   b550c:	bf38      	it	cc
   b550e:	4613      	movcc	r3, r2
   b5510:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b5514:	f001 ff4e 	bl	b73b4 <_Z11BlynkMillisv>
   b5518:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b551c:	2800      	cmp	r0, #0
   b551e:	db61      	blt.n	b55e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b5520:	2100      	movs	r1, #0
   b5522:	4620      	mov	r0, r4
   b5524:	f7ff fed6 	bl	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b5528:	f001 ff44 	bl	b73b4 <_Z11BlynkMillisv>
   b552c:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b5530:	2800      	cmp	r0, #0
   b5532:	daf5      	bge.n	b5520 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b5534:	f1b9 0f00 	cmp.w	r9, #0
   b5538:	d05b      	beq.n	b55f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b553a:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b553c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b553e:	2a00      	cmp	r2, #0
   b5540:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b5542:	bf08      	it	eq
   b5544:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b5546:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b554a:	f10a 0307 	add.w	r3, sl, #7
   b554e:	f023 0307 	bic.w	r3, r3, #7
   b5552:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b5556:	4630      	mov	r0, r6
    hdr->type = cmd;
   b5558:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b555c:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b5560:	f002 f9c8 	bl	b78f4 <inet_htons>
    hdr->length = htons(length+length2);
   b5564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b5566:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b556a:	18e8      	adds	r0, r5, r3
   b556c:	b280      	uxth	r0, r0
   b556e:	f002 f9c1 	bl	b78f4 <inet_htons>
   b5572:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b5576:	f1b9 0f00 	cmp.w	r9, #0
   b557a:	d03c      	beq.n	b55f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b557c:	2d00      	cmp	r5, #0
   b557e:	d03a      	beq.n	b55f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b5580:	462a      	mov	r2, r5
   b5582:	4649      	mov	r1, r9
   b5584:	f10d 0005 	add.w	r0, sp, #5
   b5588:	f003 ffc9 	bl	b951e <memcpy>
        pos += length;
   b558c:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b5590:	b13b      	cbz	r3, b55a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b5592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b5594:	b12b      	cbz	r3, b55a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b5596:	461a      	mov	r2, r3
   b5598:	687b      	ldr	r3, [r7, #4]
   b559a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b559c:	4418      	add	r0, r3
   b559e:	f003 ffbe 	bl	b951e <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b55a2:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b55a4:	4555      	cmp	r5, sl
   b55a6:	d22a      	bcs.n	b55fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b55a8:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b55ac:	687b      	ldr	r3, [r7, #4]
   b55ae:	6820      	ldr	r0, [r4, #0]
   b55b0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b55b4:	bf28      	it	cs
   b55b6:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b55ba:	1959      	adds	r1, r3, r5
   b55bc:	f003 f8ad 	bl	b871a <_ZN9TCPClient5writeEPKhj>
   b55c0:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b55c2:	2000      	movs	r0, #0
   b55c4:	f001 fef4 	bl	b73b0 <_Z10BlynkDelaym>
        if (w == 0) {
   b55c8:	b9be      	cbnz	r6, b55fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b55ca:	6820      	ldr	r0, [r4, #0]
   b55cc:	f003 fb2a 	bl	b8c24 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b55d0:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b55d2:	f001 fef3 	bl	b73bc <BlynkNoOpCbk>
}
   b55d6:	370c      	adds	r7, #12
   b55d8:	46dd      	mov	sp, fp
   b55da:	46bd      	mov	sp, r7
   b55dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b55e0:	2301      	movs	r3, #1
   b55e2:	e78a      	b.n	b54fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b55e4:	7f21      	ldrb	r1, [r4, #28]
   b55e6:	2900      	cmp	r1, #0
   b55e8:	d1a4      	bne.n	b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b55ea:	4620      	mov	r0, r4
   b55ec:	f7ff fe72 	bl	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b55f0:	e7a0      	b.n	b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b55f2:	2305      	movs	r3, #5
   b55f4:	e7a2      	b.n	b553c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b55f6:	2005      	movs	r0, #5
   b55f8:	e7c9      	b.n	b558e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b55fa:	4435      	add	r5, r6
    while (wlen < full_length) {
   b55fc:	e7d2      	b.n	b55a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b55fe:	d003      	beq.n	b5608 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b5600:	4620      	mov	r0, r4
   b5602:	f7ff fbc7 	bl	b4d94 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b5606:	e7e6      	b.n	b55d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b5608:	f001 fed4 	bl	b73b4 <_Z11BlynkMillisv>
   b560c:	6120      	str	r0, [r4, #16]
   b560e:	e7e2      	b.n	b55d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b5610:	20000045 	.word	0x20000045

000b5614 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b5614:	b530      	push	{r4, r5, lr}
   b5616:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5618:	ab08      	add	r3, sp, #32
   b561a:	4604      	mov	r4, r0
   b561c:	9305      	str	r3, [sp, #20]
   b561e:	2500      	movs	r5, #0
   b5620:	2340      	movs	r3, #64	; 0x40
        add(key);
   b5622:	a805      	add	r0, sp, #20
   b5624:	490b      	ldr	r1, [pc, #44]	; (b5654 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5626:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b562a:	f7ff fb36 	bl	b4c9a <_ZN10BlynkParam3addEPKc>
        add(val);
   b562e:	a805      	add	r0, sp, #20
   b5630:	4909      	ldr	r1, [pc, #36]	; (b5658 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b5632:	f7ff fb32 	bl	b4c9a <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b5636:	9b06      	ldr	r3, [sp, #24]
   b5638:	9302      	str	r3, [sp, #8]
   b563a:	9b05      	ldr	r3, [sp, #20]
   b563c:	9301      	str	r3, [sp, #4]
   b563e:	2365      	movs	r3, #101	; 0x65
   b5640:	9300      	str	r3, [sp, #0]
   b5642:	462a      	mov	r2, r5
   b5644:	4b05      	ldr	r3, [pc, #20]	; (b565c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b5646:	2111      	movs	r1, #17
   b5648:	4620      	mov	r0, r4
   b564a:	f7ff ff33 	bl	b54b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b564e:	b019      	add	sp, #100	; 0x64
   b5650:	bd30      	pop	{r4, r5, pc}
   b5652:	bf00      	nop
   b5654:	000bb5bb 	.word	0x000bb5bb
   b5658:	000bb5c0 	.word	0x000bb5c0
   b565c:	000bb640 	.word	0x000bb640

000b5660 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b5660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5664:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5668:	ab08      	add	r3, sp, #32
   b566a:	2400      	movs	r4, #0
   b566c:	4605      	mov	r5, r0
   b566e:	460e      	mov	r6, r1
   b5670:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b5672:	a805      	add	r0, sp, #20
   b5674:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b5678:	4915      	ldr	r1, [pc, #84]	; (b56d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x70>)
    void virtualWrite(int pin, Args... values) {
   b567a:	ee10 8a10 	vmov	r8, s0
   b567e:	e9cd 4306 	strd	r4, r3, [sp, #24]
        cmd.add("vw");
   b5682:	f7ff fb0a 	bl	b4c9a <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b5686:	a805      	add	r0, sp, #20
   b5688:	4631      	mov	r1, r6
   b568a:	f7ff fb23 	bl	b4cd4 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   b568e:	e9dd 6106 	ldrd	r6, r1, [sp, #24]
   b5692:	9b05      	ldr	r3, [sp, #20]
   b5694:	4640      	mov	r0, r8
   b5696:	1b8f      	subs	r7, r1, r6
   b5698:	441e      	add	r6, r3
   b569a:	f7fe fe25 	bl	b42e8 <__aeabi_f2d>
   b569e:	4a0d      	ldr	r2, [pc, #52]	; (b56d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_+0x74>)
   b56a0:	e9cd 0100 	strd	r0, r1, [sp]
   b56a4:	4639      	mov	r1, r7
   b56a6:	4630      	mov	r0, r6
   b56a8:	f002 faf8 	bl	b7c9c <snprintf>
   b56ac:	1c43      	adds	r3, r0, #1
   b56ae:	9806      	ldr	r0, [sp, #24]
   b56b0:	4403      	add	r3, r0
   b56b2:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b56b4:	3b01      	subs	r3, #1
   b56b6:	9300      	str	r3, [sp, #0]
   b56b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b56bc:	9b05      	ldr	r3, [sp, #20]
   b56be:	4622      	mov	r2, r4
   b56c0:	2114      	movs	r1, #20
   b56c2:	4628      	mov	r0, r5
   b56c4:	f7ff fef6 	bl	b54b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b56c8:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b56cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b56d0:	000bb5ce 	.word	0x000bb5ce
   b56d4:	000bb5d1 	.word	0x000bb5d1

000b56d8 <_Z8callbackPcPhj>:
void callback(char *topic, byte *payload, unsigned int length) {
   b56d8:	b5b0      	push	{r4, r5, r7, lr}
   b56da:	ed2d 8b02 	vpush	{d8}
  char p[length + 1];
   b56de:	f102 0308 	add.w	r3, r2, #8
void callback(char *topic, byte *payload, unsigned int length) {
   b56e2:	b088      	sub	sp, #32
  char p[length + 1];
   b56e4:	f023 0307 	bic.w	r3, r3, #7
void callback(char *topic, byte *payload, unsigned int length) {
   b56e8:	af00      	add	r7, sp, #0
  char p[length + 1];
   b56ea:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char *topic, byte *payload, unsigned int length) {
   b56ee:	4615      	mov	r5, r2
   b56f0:	4604      	mov	r4, r0
  memcpy(p, payload, length);
   b56f2:	4668      	mov	r0, sp
   b56f4:	f003 ff13 	bl	b951e <memcpy>
  p[length] = NULL;
   b56f8:	2300      	movs	r3, #0
  String s = p;
   b56fa:	4669      	mov	r1, sp
   b56fc:	4638      	mov	r0, r7
  p[length] = NULL;
   b56fe:	f80d 3005 	strb.w	r3, [sp, r5]
  String s = p;
   b5702:	f002 ffa0 	bl	b8646 <_ZN6StringC1EPK19__FlashStringHelper>
  double value = s.toFloat();
   b5706:	4638      	mov	r0, r7
   b5708:	f002 ffd6 	bl	b86b8 <_ZNK6String7toFloatEv>
  if (String(topic).equals("HipposAreTasty/latitude")) {
   b570c:	4621      	mov	r1, r4
   b570e:	f107 0010 	add.w	r0, r7, #16
  double value = s.toFloat();
   b5712:	eeb0 8a40 	vmov.f32	s16, s0
  if (String(topic).equals("HipposAreTasty/latitude")) {
   b5716:	f002 ff96 	bl	b8646 <_ZN6StringC1EPK19__FlashStringHelper>
   b571a:	491a      	ldr	r1, [pc, #104]	; (b5784 <_Z8callbackPcPhj+0xac>)
   b571c:	f107 0010 	add.w	r0, r7, #16
   b5720:	f002 ffb7 	bl	b8692 <_ZNK6String6equalsEPKc>
   b5724:	4605      	mov	r5, r0
   b5726:	f107 0010 	add.w	r0, r7, #16
   b572a:	f002 ff41 	bl	b85b0 <_ZN6StringD1Ev>
   b572e:	b185      	cbz	r5, b5752 <_Z8callbackPcPhj+0x7a>
    latitude = value;
   b5730:	4b15      	ldr	r3, [pc, #84]	; (b5788 <_Z8callbackPcPhj+0xb0>)
    Blynk.virtualWrite(V2, latitude);
   b5732:	eeb0 0a48 	vmov.f32	s0, s16
    latitude = value;
   b5736:	ed83 8a00 	vstr	s16, [r3]
    Blynk.virtualWrite(V2, latitude);
   b573a:	2102      	movs	r1, #2
    Blynk.virtualWrite(V7, longitude);
   b573c:	4813      	ldr	r0, [pc, #76]	; (b578c <_Z8callbackPcPhj+0xb4>)
   b573e:	f7ff ff8f 	bl	b5660 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJfEEEviDpT_>
  String s = p;
   b5742:	4638      	mov	r0, r7
   b5744:	f002 ff34 	bl	b85b0 <_ZN6StringD1Ev>
}
   b5748:	3720      	adds	r7, #32
   b574a:	46bd      	mov	sp, r7
   b574c:	ecbd 8b02 	vpop	{d8}
   b5750:	bdb0      	pop	{r4, r5, r7, pc}
  } else if (String(topic).equals("HipposAreTasty/longitude")) {
   b5752:	4621      	mov	r1, r4
   b5754:	f107 0010 	add.w	r0, r7, #16
   b5758:	f002 ff75 	bl	b8646 <_ZN6StringC1EPK19__FlashStringHelper>
   b575c:	490c      	ldr	r1, [pc, #48]	; (b5790 <_Z8callbackPcPhj+0xb8>)
   b575e:	f107 0010 	add.w	r0, r7, #16
   b5762:	f002 ff96 	bl	b8692 <_ZNK6String6equalsEPKc>
   b5766:	4604      	mov	r4, r0
   b5768:	f107 0010 	add.w	r0, r7, #16
   b576c:	f002 ff20 	bl	b85b0 <_ZN6StringD1Ev>
   b5770:	2c00      	cmp	r4, #0
   b5772:	d0e6      	beq.n	b5742 <_Z8callbackPcPhj+0x6a>
    longitude = value;
   b5774:	4b07      	ldr	r3, [pc, #28]	; (b5794 <_Z8callbackPcPhj+0xbc>)
    Blynk.virtualWrite(V7, longitude);
   b5776:	eeb0 0a48 	vmov.f32	s0, s16
    longitude = value;
   b577a:	ed83 8a00 	vstr	s16, [r3]
    Blynk.virtualWrite(V7, longitude);
   b577e:	2107      	movs	r1, #7
   b5780:	e7dc      	b.n	b573c <_Z8callbackPcPhj+0x64>
   b5782:	bf00      	nop
   b5784:	000bb5a3 	.word	0x000bb5a3
   b5788:	2003e36c 	.word	0x2003e36c
   b578c:	2003e220 	.word	0x2003e220
   b5790:	000bb58a 	.word	0x000bb58a
   b5794:	2003e370 	.word	0x2003e370

000b5798 <setup>:
void setup() {
   b5798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  display.setup();
   b579a:	482e      	ldr	r0, [pc, #184]	; (b5854 <setup+0xbc>)
        this->authkey = auth;
   b579c:	4c2e      	ldr	r4, [pc, #184]	; (b5858 <setup+0xc0>)
   b579e:	f001 ff37 	bl	b7610 <_ZN16OledWingAdafruit5setupEv>
  resetDisplay();
   b57a2:	f7ff fabb 	bl	b4d1c <_Z12resetDisplayv>
  display.print("connecting...");
   b57a6:	492d      	ldr	r1, [pc, #180]	; (b585c <setup+0xc4>)
   b57a8:	482a      	ldr	r0, [pc, #168]	; (b5854 <setup+0xbc>)
   b57aa:	f002 fccb 	bl	b8144 <_ZN5Print5printEPKc>
  display.display();
   b57ae:	4829      	ldr	r0, [pc, #164]	; (b5854 <setup+0xbc>)
   b57b0:	f001 f8d0 	bl	b6954 <_ZN16Adafruit_SSD13067displayEv>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b57b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b57b8:	f001 fdfa 	bl	b73b0 <_Z10BlynkDelaym>
   b57bc:	4b28      	ldr	r3, [pc, #160]	; (b5860 <setup+0xc8>)
   b57be:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b57c0:	f001 fdf8 	bl	b73b4 <_Z11BlynkMillisv>
   b57c4:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b57c8:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b57ca:	4a26      	ldr	r2, [pc, #152]	; (b5864 <setup+0xcc>)
   b57cc:	635a      	str	r2, [r3, #52]	; 0x34
   b57ce:	3808      	subs	r0, #8
   b57d0:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b57d4:	2250      	movs	r2, #80	; 0x50
   b57d6:	6160      	str	r0, [r4, #20]
   b57d8:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b57da:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b57dc:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b57e0:	6820      	ldr	r0, [r4, #0]
   b57e2:	f003 fa1f 	bl	b8c24 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b57e6:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b57e8:	f001 fde4 	bl	b73b4 <_Z11BlynkMillisv>
   b57ec:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b57ee:	7f63      	ldrb	r3, [r4, #29]
   b57f0:	2b01      	cmp	r3, #1
   b57f2:	d00c      	beq.n	b580e <setup+0x76>
               (BlynkMillis() - started < timeout))
   b57f4:	f001 fdde 	bl	b73b4 <_Z11BlynkMillisv>
   b57f8:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b57fa:	42b8      	cmp	r0, r7
   b57fc:	d804      	bhi.n	b5808 <setup+0x70>
            run();
   b57fe:	2100      	movs	r1, #0
   b5800:	4620      	mov	r0, r4
   b5802:	f7ff fd67 	bl	b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b5806:	e7f2      	b.n	b57ee <setup+0x56>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b5808:	7f63      	ldrb	r3, [r4, #29]
   b580a:	2b01      	cmp	r3, #1
   b580c:	d1e8      	bne.n	b57e0 <setup+0x48>
  Serial.begin(9600);
   b580e:	f003 fb25 	bl	b8e5c <_Z16_fetch_usbserialv>
   b5812:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5816:	f003 fb11 	bl	b8e3c <_ZN9USBSerial5beginEl>
  while (!Serial.isConnected()) {}
   b581a:	f003 fb1f 	bl	b8e5c <_Z16_fetch_usbserialv>
   b581e:	f003 fb11 	bl	b8e44 <_ZN9USBSerial11isConnectedEv>
   b5822:	2800      	cmp	r0, #0
   b5824:	d0f9      	beq.n	b581a <setup+0x82>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b5826:	4c10      	ldr	r4, [pc, #64]	; (b5868 <setup+0xd0>)
   b5828:	68a0      	ldr	r0, [r4, #8]
   b582a:	b130      	cbz	r0, b583a <setup+0xa2>
   b582c:	2300      	movs	r3, #0
   b582e:	e9cd 3300 	strd	r3, r3, [sp]
   b5832:	461a      	mov	r2, r3
   b5834:	2102      	movs	r1, #2
   b5836:	f001 ff55 	bl	b76e4 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b583a:	68a0      	ldr	r0, [r4, #8]
   b583c:	b140      	cbz	r0, b5850 <setup+0xb8>
   b583e:	2300      	movs	r3, #0
   b5840:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5844:	e9cd 2300 	strd	r2, r3, [sp]
   b5848:	4619      	mov	r1, r3
   b584a:	461a      	mov	r2, r3
   b584c:	f001 ff4a 	bl	b76e4 <os_timer_change>
}
   b5850:	b003      	add	sp, #12
   b5852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5854:	2003e2dc 	.word	0x2003e2dc
   b5858:	2003e220 	.word	0x2003e220
   b585c:	000bb5d7 	.word	0x000bb5d7
   b5860:	000bb5e5 	.word	0x000bb5e5
   b5864:	000bb606 	.word	0x000bb606
   b5868:	2003e34c 	.word	0x2003e34c

000b586c <_GLOBAL__sub_I_Blynk>:
   b586c:	b570      	push	{r4, r5, r6, lr}
        : domain(NULL), port(0)
   b586e:	4d2a      	ldr	r5, [pc, #168]	; (b5918 <_GLOBAL__sub_I_Blynk+0xac>)
   b5870:	b088      	sub	sp, #32
   b5872:	4628      	mov	r0, r5
   b5874:	f003 fa20 	bl	b8cb8 <_ZN9TCPClientC1Ev>
   b5878:	f105 001c 	add.w	r0, r5, #28
   b587c:	f002 fb2c 	bl	b7ed8 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b5880:	4b26      	ldr	r3, [pc, #152]	; (b591c <_GLOBAL__sub_I_Blynk+0xb0>)
   b5882:	2400      	movs	r4, #0
   b5884:	e9c3 5400 	strd	r5, r4, [r3]
   b5888:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b588c:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b5890:	636c      	str	r4, [r5, #52]	; 0x34
   b5892:	872c      	strh	r4, [r5, #56]	; 0x38
   b5894:	619c      	str	r4, [r3, #24]
   b5896:	839c      	strh	r4, [r3, #28]
SYSTEM_THREAD(ENABLED);
   b5898:	4621      	mov	r1, r4
   b589a:	2001      	movs	r0, #1
   b589c:	f002 f952 	bl	b7b44 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b58a0:	4b1f      	ldr	r3, [pc, #124]	; (b5920 <_GLOBAL__sub_I_Blynk+0xb4>)
   b58a2:	4920      	ldr	r1, [pc, #128]	; (b5924 <_GLOBAL__sub_I_Blynk+0xb8>)
   b58a4:	9400      	str	r4, [sp, #0]
   b58a6:	f240 725b 	movw	r2, #1883	; 0x75b
   b58aa:	481f      	ldr	r0, [pc, #124]	; (b5928 <_GLOBAL__sub_I_Blynk+0xbc>)
   b58ac:	f001 f982 	bl	b6bb4 <_ZN4MQTTC1EPKctPFvPcPhjEb>
OledWingAdafruit display;
   b58b0:	2107      	movs	r1, #7
   b58b2:	481e      	ldr	r0, [pc, #120]	; (b592c <_GLOBAL__sub_I_Blynk+0xc0>)
   b58b4:	f001 fe7e 	bl	b75b4 <_ZN16OledWingAdafruitC1Ei>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b58b8:	4b1d      	ldr	r3, [pc, #116]	; (b5930 <_GLOBAL__sub_I_Blynk+0xc4>)
   b58ba:	9304      	str	r3, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58bc:	ad04      	add	r5, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b58be:	4b1d      	ldr	r3, [pc, #116]	; (b5934 <_GLOBAL__sub_I_Blynk+0xc8>)
   b58c0:	4a1d      	ldr	r2, [pc, #116]	; (b5938 <_GLOBAL__sub_I_Blynk+0xcc>)
   b58c2:	601a      	str	r2, [r3, #0]
   b58c4:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b58c8:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58cc:	ae02      	add	r6, sp, #8
   b58ce:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b58d2:	e892 0003 	ldmia.w	r2, {r0, r1}
   b58d6:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b58da:	e896 0003 	ldmia.w	r6, {r0, r1}
   b58de:	e882 0003 	stmia.w	r2, {r0, r1}
   b58e2:	4a16      	ldr	r2, [pc, #88]	; (b593c <_GLOBAL__sub_I_Blynk+0xd0>)
   b58e4:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b58e6:	699a      	ldr	r2, [r3, #24]
   b58e8:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b58ea:	4a15      	ldr	r2, [pc, #84]	; (b5940 <_GLOBAL__sub_I_Blynk+0xd4>)
   b58ec:	619a      	str	r2, [r3, #24]
   b58ee:	711c      	strb	r4, [r3, #4]
   b58f0:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b58f2:	4a14      	ldr	r2, [pc, #80]	; (b5944 <_GLOBAL__sub_I_Blynk+0xd8>)
      __a = _GLIBCXX_MOVE(__b);
   b58f4:	9406      	str	r4, [sp, #24]
   b58f6:	f643 2198 	movw	r1, #15000	; 0x3a98
   b58fa:	f103 0008 	add.w	r0, r3, #8
   b58fe:	e9cd 4400 	strd	r4, r4, [sp]
   b5902:	f001 fed7 	bl	b76b4 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b5906:	4628      	mov	r0, r5
   b5908:	f7ff f970 	bl	b4bec <_ZNSt14_Function_baseD1Ev>
BlynkTimer timer;
   b590c:	480e      	ldr	r0, [pc, #56]	; (b5948 <_GLOBAL__sub_I_Blynk+0xdc>)
   b590e:	b008      	add	sp, #32
   b5910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BlynkTimer timer;
   b5914:	f001 bd74 	b.w	b7400 <_ZN10BlynkTimerC1Ev>
   b5918:	2003e240 	.word	0x2003e240
   b591c:	2003e220 	.word	0x2003e220
   b5920:	000b56d9 	.word	0x000b56d9
   b5924:	000bb612 	.word	0x000bb612
   b5928:	2003e27c 	.word	0x2003e27c
   b592c:	2003e2dc 	.word	0x2003e2dc
   b5930:	000b4b69 	.word	0x000b4b69
   b5934:	2003e34c 	.word	0x2003e34c
   b5938:	000bb62c 	.word	0x000bb62c
   b593c:	000b4bbb 	.word	0x000b4bbb
   b5940:	000b4bcf 	.word	0x000b4bcf
   b5944:	000b4b81 	.word	0x000b4b81
   b5948:	2003e374 	.word	0x2003e374

000b594c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5950:	b085      	sub	sp, #20
   b5952:	461f      	mov	r7, r3
   b5954:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5958:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b595c:	eba8 0902 	sub.w	r9, r8, r2
   b5960:	eba7 0a01 	sub.w	sl, r7, r1
   b5964:	f1b9 0f00 	cmp.w	r9, #0
   b5968:	bfb8      	it	lt
   b596a:	f1c9 0900 	rsblt	r9, r9, #0
   b596e:	f1ba 0f00 	cmp.w	sl, #0
   b5972:	bfb8      	it	lt
   b5974:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5978:	45d1      	cmp	r9, sl
        uint16_t color) {
   b597a:	4683      	mov	fp, r0
   b597c:	460c      	mov	r4, r1
   b597e:	4615      	mov	r5, r2
    if (steep) {
   b5980:	dd04      	ble.n	b598c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5982:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5984:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5986:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5988:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b598a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b598c:	42bc      	cmp	r4, r7
   b598e:	dd05      	ble.n	b599c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5990:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5992:	4645      	mov	r5, r8
   b5994:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5996:	4622      	mov	r2, r4
   b5998:	463c      	mov	r4, r7
   b599a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b599c:	1b3e      	subs	r6, r7, r4
   b599e:	b2b2      	uxth	r2, r6
   b59a0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b59a2:	eba8 0205 	sub.w	r2, r8, r5
   b59a6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b59aa:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b59ae:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b59b2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b59b6:	4545      	cmp	r5, r8
   b59b8:	bfb4      	ite	lt
   b59ba:	2201      	movlt	r2, #1
   b59bc:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b59c0:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b59c2:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b59c4:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b59c6:	42bc      	cmp	r4, r7
   b59c8:	dc1c      	bgt.n	b5a04 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b59ca:	f8db 2000 	ldr.w	r2, [fp]
   b59ce:	9303      	str	r3, [sp, #12]
        if (steep) {
   b59d0:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b59d2:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b59d6:	bfc7      	ittee	gt
   b59d8:	4629      	movgt	r1, r5
   b59da:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b59dc:	462a      	movle	r2, r5
   b59de:	4621      	movle	r1, r4
   b59e0:	4658      	mov	r0, fp
   b59e2:	47c0      	blx	r8
        }
        err -= dy;
   b59e4:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b59e6:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b59e8:	1ab6      	subs	r6, r6, r2
   b59ea:	b2b1      	uxth	r1, r6
   b59ec:	b236      	sxth	r6, r6
        if (err < 0) {
   b59ee:	2e00      	cmp	r6, #0
   b59f0:	da05      	bge.n	b59fe <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b59f2:	9a02      	ldr	r2, [sp, #8]
   b59f4:	4415      	add	r5, r2
            err += dx;
   b59f6:	9a00      	ldr	r2, [sp, #0]
   b59f8:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b59fa:	b22d      	sxth	r5, r5
            err += dx;
   b59fc:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b59fe:	3401      	adds	r4, #1
   b5a00:	b224      	sxth	r4, r4
   b5a02:	e7e0      	b.n	b59c6 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5a04:	b005      	add	sp, #20
   b5a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5a0a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5a0a:	4770      	bx	lr

000b5a0c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5a0c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5a0e:	6804      	ldr	r4, [r0, #0]
   b5a10:	6924      	ldr	r4, [r4, #16]
   b5a12:	46a4      	mov	ip, r4
}
   b5a14:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5a18:	4760      	bx	ip

000b5a1a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5a1a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5a1c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5a1e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5a22:	9502      	str	r5, [sp, #8]
   b5a24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5a26:	46a4      	mov	ip, r4
}
   b5a28:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5a2a:	4760      	bx	ip

000b5a2c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5a2c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5a2e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5a30:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5a34:	9502      	str	r5, [sp, #8]
   b5a36:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5a38:	46a4      	mov	ip, r4
}
   b5a3a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5a3c:	4760      	bx	ip

000b5a3e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5a3e:	b470      	push	{r4, r5, r6}
   b5a40:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5a44:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5a48:	6804      	ldr	r4, [r0, #0]
   b5a4a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5a4e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5a50:	46a4      	mov	ip, r4
}
   b5a52:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5a54:	4760      	bx	ip

000b5a56 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5a56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5a5a:	461c      	mov	r4, r3
    startWrite();
   b5a5c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5a5e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5a62:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5a64:	4605      	mov	r5, r0
   b5a66:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5a68:	3c01      	subs	r4, #1
   b5a6a:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5a6c:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5a6e:	b224      	sxth	r4, r4
    startWrite();
   b5a70:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5a72:	682b      	ldr	r3, [r5, #0]
   b5a74:	f8cd 8004 	str.w	r8, [sp, #4]
   b5a78:	9400      	str	r4, [sp, #0]
   b5a7a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5a7c:	4628      	mov	r0, r5
   b5a7e:	463b      	mov	r3, r7
   b5a80:	4632      	mov	r2, r6
   b5a82:	4639      	mov	r1, r7
   b5a84:	47a0      	blx	r4
    endWrite();
   b5a86:	682b      	ldr	r3, [r5, #0]
   b5a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a8a:	4628      	mov	r0, r5
}
   b5a8c:	b002      	add	sp, #8
   b5a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5a92:	4718      	bx	r3

000b5a94 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5a94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5a98:	461d      	mov	r5, r3
    startWrite();
   b5a9a:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5a9c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5aa0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5aa2:	4604      	mov	r4, r0
   b5aa4:	4617      	mov	r7, r2
   b5aa6:	460e      	mov	r6, r1
    startWrite();
   b5aa8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5aaa:	e9cd 7800 	strd	r7, r8, [sp]
   b5aae:	6822      	ldr	r2, [r4, #0]
   b5ab0:	1e6b      	subs	r3, r5, #1
   b5ab2:	4433      	add	r3, r6
   b5ab4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5ab6:	4620      	mov	r0, r4
   b5ab8:	b21b      	sxth	r3, r3
   b5aba:	463a      	mov	r2, r7
   b5abc:	4631      	mov	r1, r6
   b5abe:	47a8      	blx	r5
    endWrite();
   b5ac0:	6823      	ldr	r3, [r4, #0]
   b5ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ac4:	4620      	mov	r0, r4
}
   b5ac6:	b002      	add	sp, #8
   b5ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5acc:	4718      	bx	r3

000b5ace <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5ace:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5ad2:	461e      	mov	r6, r3
    startWrite();
   b5ad4:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5ad6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5ada:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5adc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5ae0:	460c      	mov	r4, r1
   b5ae2:	4605      	mov	r5, r0
   b5ae4:	4617      	mov	r7, r2
    startWrite();
   b5ae6:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5ae8:	4426      	add	r6, r4
   b5aea:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5aec:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5aee:	da0b      	bge.n	b5b08 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5af0:	f8cd 8000 	str.w	r8, [sp]
   b5af4:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5af8:	4621      	mov	r1, r4
   b5afa:	464b      	mov	r3, r9
   b5afc:	463a      	mov	r2, r7
   b5afe:	4628      	mov	r0, r5
   b5b00:	3401      	adds	r4, #1
   b5b02:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5b04:	b224      	sxth	r4, r4
   b5b06:	e7f0      	b.n	b5aea <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b0a:	4628      	mov	r0, r5
}
   b5b0c:	b002      	add	sp, #8
   b5b0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5b12:	4718      	bx	r3

000b5b14 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5b14:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5b16:	6802      	ldr	r2, [r0, #0]
   b5b18:	9101      	str	r1, [sp, #4]
   b5b1a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5b1e:	9100      	str	r1, [sp, #0]
   b5b20:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5b22:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5b26:	2200      	movs	r2, #0
   b5b28:	4611      	mov	r1, r2
   b5b2a:	47a0      	blx	r4
}
   b5b2c:	b002      	add	sp, #8
   b5b2e:	bd10      	pop	{r4, pc}

000b5b30 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5b34:	4299      	cmp	r1, r3
        uint16_t color) {
   b5b36:	4616      	mov	r6, r2
   b5b38:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5b3c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5b40:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5b42:	4680      	mov	r8, r0
   b5b44:	460d      	mov	r5, r1
   b5b46:	461c      	mov	r4, r3
    if(x0 == x1){
   b5b48:	d113      	bne.n	b5b72 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5b4a:	42be      	cmp	r6, r7
   b5b4c:	bfc8      	it	gt
   b5b4e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5b50:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5b54:	bfc4      	itt	gt
   b5b56:	463e      	movgt	r6, r7
   b5b58:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5b5a:	1c7b      	adds	r3, r7, #1
   b5b5c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5b5e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b60:	b21b      	sxth	r3, r3
   b5b62:	4632      	mov	r2, r6
   b5b64:	4629      	mov	r1, r5
   b5b66:	4640      	mov	r0, r8
   b5b68:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5b6a:	b003      	add	sp, #12
   b5b6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b70:	4760      	bx	ip
    } else if(y0 == y1){
   b5b72:	42be      	cmp	r6, r7
   b5b74:	d10a      	bne.n	b5b8c <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5b76:	4299      	cmp	r1, r3
   b5b78:	bfc2      	ittt	gt
   b5b7a:	460b      	movgt	r3, r1
   b5b7c:	4625      	movgt	r5, r4
   b5b7e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5b80:	1c63      	adds	r3, r4, #1
   b5b82:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5b86:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5b88:	1b5b      	subs	r3, r3, r5
   b5b8a:	e7e9      	b.n	b5b60 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5b8c:	6953      	ldr	r3, [r2, #20]
   b5b8e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5b90:	e9cd 7900 	strd	r7, r9, [sp]
   b5b94:	f8d8 3000 	ldr.w	r3, [r8]
   b5b98:	4640      	mov	r0, r8
   b5b9a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5b9c:	4632      	mov	r2, r6
   b5b9e:	4623      	mov	r3, r4
   b5ba0:	4629      	mov	r1, r5
   b5ba2:	47b8      	blx	r7
        endWrite();
   b5ba4:	f8d8 3000 	ldr.w	r3, [r8]
   b5ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5baa:	4640      	mov	r0, r8
}
   b5bac:	b003      	add	sp, #12
   b5bae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5bb2:	4718      	bx	r3

000b5bb4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5bb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5bb8:	461d      	mov	r5, r3
    startWrite();
   b5bba:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5bbc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5bc0:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5bc2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5bc6:	4604      	mov	r4, r0
   b5bc8:	460f      	mov	r7, r1
   b5bca:	4616      	mov	r6, r2
    startWrite();
   b5bcc:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5bce:	6823      	ldr	r3, [r4, #0]
   b5bd0:	f8cd 8000 	str.w	r8, [sp]
   b5bd4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5bd8:	4632      	mov	r2, r6
   b5bda:	462b      	mov	r3, r5
   b5bdc:	4639      	mov	r1, r7
   b5bde:	4620      	mov	r0, r4
   b5be0:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5be2:	6823      	ldr	r3, [r4, #0]
   b5be4:	f8cd 8000 	str.w	r8, [sp]
   b5be8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5bec:	4432      	add	r2, r6
   b5bee:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5bf2:	4639      	mov	r1, r7
   b5bf4:	462b      	mov	r3, r5
   b5bf6:	4620      	mov	r0, r4
   b5bf8:	b212      	sxth	r2, r2
   b5bfa:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5bfc:	6823      	ldr	r3, [r4, #0]
   b5bfe:	f8cd 8000 	str.w	r8, [sp]
   b5c02:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5c06:	4632      	mov	r2, r6
   b5c08:	464b      	mov	r3, r9
   b5c0a:	4639      	mov	r1, r7
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5c10:	1e6b      	subs	r3, r5, #1
   b5c12:	19d9      	adds	r1, r3, r7
   b5c14:	6823      	ldr	r3, [r4, #0]
   b5c16:	f8cd 8000 	str.w	r8, [sp]
   b5c1a:	6a1d      	ldr	r5, [r3, #32]
   b5c1c:	4620      	mov	r0, r4
   b5c1e:	464b      	mov	r3, r9
   b5c20:	4632      	mov	r2, r6
   b5c22:	b209      	sxth	r1, r1
   b5c24:	47a8      	blx	r5
    endWrite();
   b5c26:	6823      	ldr	r3, [r4, #0]
   b5c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c2a:	4620      	mov	r0, r4
}
   b5c2c:	b002      	add	sp, #8
   b5c2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5c32:	4718      	bx	r3

000b5c34 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5c34:	4770      	bx	lr

000b5c36 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5c36:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5c3a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5c3e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5c40:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5c42:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5c46:	bf59      	ittee	pl
   b5c48:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5c4a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5c4c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5c4e:	81c3      	strhmi	r3, [r0, #14]
}
   b5c50:	4770      	bx	lr
	...

000b5c54 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5c54:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5c56:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5c58:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5c5a:	4a07      	ldr	r2, [pc, #28]	; (b5c78 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5c5c:	4d07      	ldr	r5, [pc, #28]	; (b5c7c <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5c5e:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b5c60:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5c62:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5c68:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5c6c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5c6e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5c70:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5c72:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5c74:	6204      	str	r4, [r0, #32]
}
   b5c76:	bd30      	pop	{r4, r5, pc}
   b5c78:	01000101 	.word	0x01000101
   b5c7c:	000bbbb0 	.word	0x000bbbb0

000b5c80 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c84:	b089      	sub	sp, #36	; 0x24
   b5c86:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5c8a:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5c8c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5c90:	9304      	str	r3, [sp, #16]
   b5c92:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5c96:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5c98:	9305      	str	r3, [sp, #20]
   b5c9a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5c9e:	4604      	mov	r4, r0
    startWrite();
   b5ca0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5ca2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5ca6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5caa:	bf48      	it	mi
   b5cac:	f108 020e 	addmi.w	r2, r8, #14
   b5cb0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5cb4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5cb6:	4635      	mov	r5, r6
   b5cb8:	9b03      	ldr	r3, [sp, #12]
   b5cba:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5cbc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5cc0:	189a      	adds	r2, r3, r2
   b5cc2:	9b05      	ldr	r3, [sp, #20]
   b5cc4:	428b      	cmp	r3, r1
   b5cc6:	b212      	sxth	r2, r2
   b5cc8:	dd27      	ble.n	b5d1a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5cca:	9b04      	ldr	r3, [sp, #16]
   b5ccc:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5cce:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5cd2:	9306      	str	r3, [sp, #24]
   b5cd4:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5cd8:	4580      	cmp	r8, r0
   b5cda:	fa1f f189 	uxth.w	r1, r9
   b5cde:	dd17      	ble.n	b5d10 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5ce0:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5ce2:	bf05      	ittet	eq
   b5ce4:	9b06      	ldreq	r3, [sp, #24]
   b5ce6:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5ce8:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5cea:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5cec:	bf18      	it	ne
   b5cee:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5cf0:	062b      	lsls	r3, r5, #24
   b5cf2:	d50a      	bpl.n	b5d0a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5cf4:	9b02      	ldr	r3, [sp, #8]
   b5cf6:	6820      	ldr	r0, [r4, #0]
   b5cf8:	9207      	str	r2, [sp, #28]
   b5cfa:	4419      	add	r1, r3
   b5cfc:	6983      	ldr	r3, [r0, #24]
   b5cfe:	b209      	sxth	r1, r1
   b5d00:	461f      	mov	r7, r3
   b5d02:	4620      	mov	r0, r4
   b5d04:	4653      	mov	r3, sl
   b5d06:	47b8      	blx	r7
   b5d08:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5d0a:	f109 0901 	add.w	r9, r9, #1
   b5d0e:	e7e1      	b.n	b5cd4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5d10:	9b01      	ldr	r3, [sp, #4]
   b5d12:	3301      	adds	r3, #1
   b5d14:	9301      	str	r3, [sp, #4]
   b5d16:	445e      	add	r6, fp
   b5d18:	e7ce      	b.n	b5cb8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5d1a:	6823      	ldr	r3, [r4, #0]
   b5d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d1e:	4620      	mov	r0, r4
}
   b5d20:	b009      	add	sp, #36	; 0x24
   b5d22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5d26:	4718      	bx	r3

000b5d28 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d2c:	ed2d 8b02 	vpush	{d8}
   b5d30:	b091      	sub	sp, #68	; 0x44
   b5d32:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5d34:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5d36:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5d3a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5d3e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5d42:	9103      	str	r1, [sp, #12]
   b5d44:	461f      	mov	r7, r3
   b5d46:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5d4a:	9304      	str	r3, [sp, #16]
   b5d4c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5d4e:	2a00      	cmp	r2, #0
   b5d50:	f040 80c5 	bne.w	b5ede <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5d54:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5d58:	428b      	cmp	r3, r1
   b5d5a:	f340 814c 	ble.w	b5ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5d5e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5d62:	42b3      	cmp	r3, r6
   b5d64:	f340 8147 	ble.w	b5ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5d68:	2306      	movs	r3, #6
   b5d6a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5d6e:	2b00      	cmp	r3, #0
   b5d70:	f340 8141 	ble.w	b5ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5d74:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5d78:	2b00      	cmp	r3, #0
   b5d7a:	f340 813c 	ble.w	b5ff6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5d7e:	7f03      	ldrb	r3, [r0, #28]
   b5d80:	b91b      	cbnz	r3, b5d8a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5d82:	2faf      	cmp	r7, #175	; 0xaf
   b5d84:	bf84      	itt	hi
   b5d86:	3701      	addhi	r7, #1
   b5d88:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5d8a:	f8db 3000 	ldr.w	r3, [fp]
   b5d8e:	4658      	mov	r0, fp
   b5d90:	695b      	ldr	r3, [r3, #20]
   b5d92:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5d94:	2205      	movs	r2, #5
   b5d96:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5d98:	2200      	movs	r2, #0
   b5d9a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5d9c:	4a98      	ldr	r2, [pc, #608]	; (b6000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5d9e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5da2:	18d3      	adds	r3, r2, r3
   b5da4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5da6:	b2b3      	uxth	r3, r6
   b5da8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5daa:	9a05      	ldr	r2, [sp, #20]
   b5dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5dae:	5c9b      	ldrb	r3, [r3, r2]
   b5db0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5db2:	b2ab      	uxth	r3, r5
   b5db4:	930b      	str	r3, [sp, #44]	; 0x2c
   b5db6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5dba:	9308      	str	r3, [sp, #32]
   b5dbc:	9b03      	ldr	r3, [sp, #12]
   b5dbe:	fb02 f905 	mul.w	r9, r2, r5
   b5dc2:	fa19 f983 	uxtah	r9, r9, r3
   b5dc6:	fa0f f389 	sxth.w	r3, r9
   b5dca:	ee08 3a10 	vmov	s16, r3
   b5dce:	2308      	movs	r3, #8
   b5dd0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5dd2:	9b03      	ldr	r3, [sp, #12]
   b5dd4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5dd8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5ddc:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5de0:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5de2:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5de6:	07d2      	lsls	r2, r2, #31
   b5de8:	d552      	bpl.n	b5e90 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5dea:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5dec:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5df0:	d13e      	bne.n	b5e70 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5df2:	2c01      	cmp	r4, #1
   b5df4:	d13c      	bne.n	b5e70 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5df6:	699b      	ldr	r3, [r3, #24]
   b5df8:	9906      	ldr	r1, [sp, #24]
   b5dfa:	461f      	mov	r7, r3
   b5dfc:	9b04      	ldr	r3, [sp, #16]
   b5dfe:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5e00:	b212      	sxth	r2, r2
   b5e02:	4651      	mov	r1, sl
   b5e04:	4658      	mov	r0, fp
   b5e06:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5e08:	f109 0301 	add.w	r3, r9, #1
   b5e0c:	fa4f f983 	sxtb.w	r9, r3
   b5e10:	9b07      	ldr	r3, [sp, #28]
   b5e12:	085b      	lsrs	r3, r3, #1
   b5e14:	9307      	str	r3, [sp, #28]
   b5e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5e18:	3b01      	subs	r3, #1
   b5e1a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5e1e:	930a      	str	r3, [sp, #40]	; 0x28
   b5e20:	d1de      	bne.n	b5de0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5e22:	9f05      	ldr	r7, [sp, #20]
   b5e24:	3701      	adds	r7, #1
   b5e26:	b27b      	sxtb	r3, r7
   b5e28:	9305      	str	r3, [sp, #20]
   b5e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5e2c:	3b01      	subs	r3, #1
   b5e2e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5e32:	9309      	str	r3, [sp, #36]	; 0x24
   b5e34:	d1b9      	bne.n	b5daa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5e36:	9b04      	ldr	r3, [sp, #16]
   b5e38:	4543      	cmp	r3, r8
   b5e3a:	d00f      	beq.n	b5e5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5e3c:	2d01      	cmp	r5, #1
   b5e3e:	f8db 3000 	ldr.w	r3, [fp]
   b5e42:	d13b      	bne.n	b5ebc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5e44:	2c01      	cmp	r4, #1
   b5e46:	d139      	bne.n	b5ebc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5e48:	9908      	ldr	r1, [sp, #32]
   b5e4a:	f8cd 8000 	str.w	r8, [sp]
   b5e4e:	3105      	adds	r1, #5
   b5e50:	6a1c      	ldr	r4, [r3, #32]
   b5e52:	4632      	mov	r2, r6
   b5e54:	2308      	movs	r3, #8
   b5e56:	b209      	sxth	r1, r1
   b5e58:	4658      	mov	r0, fp
   b5e5a:	47a0      	blx	r4
        endWrite();
   b5e5c:	f8db 3000 	ldr.w	r3, [fp]
   b5e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e62:	4658      	mov	r0, fp
}
   b5e64:	b011      	add	sp, #68	; 0x44
   b5e66:	ecbd 8b02 	vpop	{d8}
   b5e6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5e6e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5e70:	9906      	ldr	r1, [sp, #24]
   b5e72:	fb14 f202 	smulbb	r2, r4, r2
   b5e76:	440a      	add	r2, r1
   b5e78:	9904      	ldr	r1, [sp, #16]
   b5e7a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5e7c:	9400      	str	r4, [sp, #0]
   b5e7e:	69db      	ldr	r3, [r3, #28]
   b5e80:	ee18 1a10 	vmov	r1, s16
   b5e84:	461f      	mov	r7, r3
   b5e86:	b212      	sxth	r2, r2
   b5e88:	462b      	mov	r3, r5
   b5e8a:	4658      	mov	r0, fp
   b5e8c:	47b8      	blx	r7
   b5e8e:	e7bb      	b.n	b5e08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5e90:	9a04      	ldr	r2, [sp, #16]
   b5e92:	4542      	cmp	r2, r8
   b5e94:	d0b8      	beq.n	b5e08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5e96:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5e98:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5e9c:	d107      	bne.n	b5eae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5e9e:	2c01      	cmp	r4, #1
   b5ea0:	d105      	bne.n	b5eae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5ea2:	699b      	ldr	r3, [r3, #24]
   b5ea4:	9906      	ldr	r1, [sp, #24]
   b5ea6:	461f      	mov	r7, r3
   b5ea8:	440a      	add	r2, r1
   b5eaa:	4643      	mov	r3, r8
   b5eac:	e7a8      	b.n	b5e00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5eae:	9906      	ldr	r1, [sp, #24]
   b5eb0:	f8cd 8004 	str.w	r8, [sp, #4]
   b5eb4:	fb14 f202 	smulbb	r2, r4, r2
   b5eb8:	440a      	add	r2, r1
   b5eba:	e7df      	b.n	b5e7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5ebe:	f8cd 8004 	str.w	r8, [sp, #4]
   b5ec2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b5ec6:	9a08      	ldr	r2, [sp, #32]
   b5ec8:	00e4      	lsls	r4, r4, #3
   b5eca:	440a      	add	r2, r1
   b5ecc:	4611      	mov	r1, r2
   b5ece:	9400      	str	r4, [sp, #0]
   b5ed0:	69dc      	ldr	r4, [r3, #28]
   b5ed2:	4632      	mov	r2, r6
   b5ed4:	462b      	mov	r3, r5
   b5ed6:	b209      	sxth	r1, r1
   b5ed8:	4658      	mov	r0, fp
   b5eda:	47a0      	blx	r4
        endWrite();
   b5edc:	e7be      	b.n	b5e5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5ede:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5ee0:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5ee2:	6812      	ldr	r2, [r2, #0]
   b5ee4:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5ee6:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5ee8:	b2ff      	uxtb	r7, r7
   b5eea:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5eee:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5ef2:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5ef4:	789a      	ldrb	r2, [r3, #2]
   b5ef6:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5ef8:	78da      	ldrb	r2, [r3, #3]
   b5efa:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5efc:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5efe:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5f02:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5f06:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5f08:	d801      	bhi.n	b5f0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5f0a:	2c01      	cmp	r4, #1
   b5f0c:	d957      	bls.n	b5fbe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5f0e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5f12:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5f14:	fa0f f38a 	sxth.w	r3, sl
   b5f18:	9307      	str	r3, [sp, #28]
        startWrite();
   b5f1a:	f8db 3000 	ldr.w	r3, [fp]
   b5f1e:	4658      	mov	r0, fp
   b5f20:	695b      	ldr	r3, [r3, #20]
   b5f22:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f24:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5f26:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f2a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f2c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5f30:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5f32:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f34:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b5f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5f38:	429f      	cmp	r7, r3
   b5f3a:	d28f      	bcs.n	b5e5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f3c:	9b07      	ldr	r3, [sp, #28]
   b5f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5f40:	443b      	add	r3, r7
   b5f42:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b5f46:	2200      	movs	r2, #0
   b5f48:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f4c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f4e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f52:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f56:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5f5a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5f5e:	9905      	ldr	r1, [sp, #20]
   b5f60:	4291      	cmp	r1, r2
   b5f62:	d241      	bcs.n	b5fe8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5f64:	1c5a      	adds	r2, r3, #1
   b5f66:	b2d2      	uxtb	r2, r2
   b5f68:	075b      	lsls	r3, r3, #29
   b5f6a:	920d      	str	r2, [sp, #52]	; 0x34
   b5f6c:	d107      	bne.n	b5f7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5f6e:	9b06      	ldr	r3, [sp, #24]
   b5f70:	9906      	ldr	r1, [sp, #24]
   b5f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5f74:	3301      	adds	r3, #1
   b5f76:	b29b      	uxth	r3, r3
   b5f78:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5f7c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5f7e:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5f82:	d012      	beq.n	b5faa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5f84:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f86:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5f8a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5f8e:	d11a      	bne.n	b5fc6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5f90:	2c01      	cmp	r4, #1
   b5f92:	d118      	bne.n	b5fc6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5f96:	699b      	ldr	r3, [r3, #24]
   b5f98:	4411      	add	r1, r2
   b5f9a:	9a05      	ldr	r2, [sp, #20]
   b5f9c:	4411      	add	r1, r2
   b5f9e:	461e      	mov	r6, r3
   b5fa0:	4652      	mov	r2, sl
   b5fa2:	9b04      	ldr	r3, [sp, #16]
   b5fa4:	b209      	sxth	r1, r1
   b5fa6:	4658      	mov	r0, fp
   b5fa8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5faa:	9e05      	ldr	r6, [sp, #20]
   b5fac:	3601      	adds	r6, #1
   b5fae:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5fb0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b5fb4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b5fb6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5fbc:	e7ce      	b.n	b5f5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5fbe:	2300      	movs	r3, #0
   b5fc0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b5fc4:	e7a9      	b.n	b5f1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5fc6:	9805      	ldr	r0, [sp, #20]
   b5fc8:	9a08      	ldr	r2, [sp, #32]
   b5fca:	4402      	add	r2, r0
   b5fcc:	fb02 1105 	mla	r1, r2, r5, r1
   b5fd0:	9a04      	ldr	r2, [sp, #16]
   b5fd2:	e9cd 4200 	strd	r4, r2, [sp]
   b5fd6:	69db      	ldr	r3, [r3, #28]
   b5fd8:	ee18 2a10 	vmov	r2, s16
   b5fdc:	461e      	mov	r6, r3
   b5fde:	b209      	sxth	r1, r1
   b5fe0:	462b      	mov	r3, r5
   b5fe2:	4658      	mov	r0, fp
   b5fe4:	47b0      	blx	r6
   b5fe6:	e7e0      	b.n	b5faa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5fea:	3701      	adds	r7, #1
   b5fec:	4498      	add	r8, r3
   b5fee:	fa5f f888 	uxtb.w	r8, r8
   b5ff2:	b2ff      	uxtb	r7, r7
   b5ff4:	e79f      	b.n	b5f36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b5ff6:	b011      	add	sp, #68	; 0x44
   b5ff8:	ecbd 8b02 	vpop	{d8}
   b5ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6000:	000bb6a7 	.word	0x000bb6a7

000b6004 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b6004:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b6006:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b6008:	b085      	sub	sp, #20
   b600a:	4604      	mov	r4, r0
   b600c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b600e:	2a00      	cmp	r2, #0
   b6010:	d134      	bne.n	b607c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b6012:	290a      	cmp	r1, #10
   b6014:	d108      	bne.n	b6028 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b6016:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b6018:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b601a:	7e42      	ldrb	r2, [r0, #25]
   b601c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b6020:	8263      	strh	r3, [r4, #18]
}
   b6022:	2001      	movs	r0, #1
   b6024:	b005      	add	sp, #20
   b6026:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6028:	290d      	cmp	r1, #13
   b602a:	d0fa      	beq.n	b6022 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b602c:	7ee1      	ldrb	r1, [r4, #27]
   b602e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6030:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6032:	b171      	cbz	r1, b6052 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b6034:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6038:	2106      	movs	r1, #6
   b603a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b603e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b6042:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b6044:	bfc1      	itttt	gt
   b6046:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b604a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b604c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6050:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6052:	8ae2      	ldrh	r2, [r4, #22]
   b6054:	9201      	str	r2, [sp, #4]
   b6056:	8aa2      	ldrh	r2, [r4, #20]
   b6058:	9200      	str	r2, [sp, #0]
   b605a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b605e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6062:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6066:	4620      	mov	r0, r4
   b6068:	f7ff fe5e 	bl	b5d28 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b606c:	7e23      	ldrb	r3, [r4, #24]
   b606e:	8a22      	ldrh	r2, [r4, #16]
   b6070:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b6074:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6078:	8223      	strh	r3, [r4, #16]
   b607a:	e7d2      	b.n	b6022 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b607c:	290a      	cmp	r1, #10
   b607e:	d107      	bne.n	b6090 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6080:	2300      	movs	r3, #0
   b6082:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b6084:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6086:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6088:	8a43      	ldrh	r3, [r0, #18]
   b608a:	fb01 3302 	mla	r3, r1, r2, r3
   b608e:	e7c7      	b.n	b6020 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6090:	290d      	cmp	r1, #13
   b6092:	d0c6      	beq.n	b6022 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b6094:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b6096:	42a9      	cmp	r1, r5
   b6098:	d3c3      	bcc.n	b6022 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b609a:	7a51      	ldrb	r1, [r2, #9]
   b609c:	4299      	cmp	r1, r3
   b609e:	d3c0      	bcc.n	b6022 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b60a0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b60a2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b60a4:	b2ed      	uxtb	r5, r5
   b60a6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b60aa:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b60ac:	b328      	cbz	r0, b60fa <_ZN12Adafruit_GFX5writeEh+0xf6>
   b60ae:	78e9      	ldrb	r1, [r5, #3]
   b60b0:	b319      	cbz	r1, b60fa <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b60b2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b60b4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b60b6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b60b8:	b191      	cbz	r1, b60e0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b60ba:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b60be:	4408      	add	r0, r1
   b60c0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b60c4:	fb06 1100 	mla	r1, r6, r0, r1
   b60c8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b60cc:	4281      	cmp	r1, r0
   b60ce:	dd07      	ble.n	b60e0 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b60d0:	2000      	movs	r0, #0
   b60d2:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b60d4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b60d8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b60da:	fb02 1207 	mla	r2, r2, r7, r1
   b60de:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b60e0:	8ae2      	ldrh	r2, [r4, #22]
   b60e2:	9201      	str	r2, [sp, #4]
   b60e4:	8aa2      	ldrh	r2, [r4, #20]
   b60e6:	9200      	str	r2, [sp, #0]
   b60e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b60ec:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b60f0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b60f4:	4620      	mov	r0, r4
   b60f6:	f7ff fe17 	bl	b5d28 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b60fa:	7929      	ldrb	r1, [r5, #4]
   b60fc:	7e22      	ldrb	r2, [r4, #24]
   b60fe:	8a23      	ldrh	r3, [r4, #16]
   b6100:	fb01 3302 	mla	r3, r1, r2, r3
   b6104:	e7b8      	b.n	b6078 <_ZN12Adafruit_GFX5writeEh+0x74>

000b6106 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b6106:	2901      	cmp	r1, #1
   b6108:	bf38      	it	cc
   b610a:	2101      	movcc	r1, #1
   b610c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b610e:	7641      	strb	r1, [r0, #25]
}
   b6110:	4770      	bx	lr

000b6112 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6112:	4770      	bx	lr

000b6114 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6114:	b510      	push	{r4, lr}
  }
   b6116:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b6118:	4604      	mov	r4, r0
  }
   b611a:	f7fe fd0e 	bl	b4b3a <_ZdlPvj>
   b611e:	4620      	mov	r0, r4
   b6120:	bd10      	pop	{r4, pc}

000b6122 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6122:	b40e      	push	{r1, r2, r3}
   b6124:	b503      	push	{r0, r1, lr}
   b6126:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b6128:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b612a:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b612e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b6130:	f002 f92b 	bl	b838a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b6134:	b002      	add	sp, #8
   b6136:	f85d eb04 	ldr.w	lr, [sp], #4
   b613a:	b003      	add	sp, #12
   b613c:	4770      	bx	lr
	...

000b6140 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6140:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6142:	4604      	mov	r4, r0
   b6144:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b6146:	7922      	ldrb	r2, [r4, #4]
   b6148:	68a3      	ldr	r3, [r4, #8]
   b614a:	b132      	cbz	r2, b615a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b614c:	b9a3      	cbnz	r3, b6178 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b614e:	490b      	ldr	r1, [pc, #44]	; (b617c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6150:	b002      	add	sp, #8
   b6152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b6156:	f001 bff5 	b.w	b8144 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b615a:	4a09      	ldr	r2, [pc, #36]	; (b6180 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b615c:	7b26      	ldrb	r6, [r4, #12]
   b615e:	4d09      	ldr	r5, [pc, #36]	; (b6184 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6160:	4909      	ldr	r1, [pc, #36]	; (b6188 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6162:	7b64      	ldrb	r4, [r4, #13]
   b6164:	2e01      	cmp	r6, #1
   b6166:	bf18      	it	ne
   b6168:	4629      	movne	r1, r5
   b616a:	e9cd 1400 	strd	r1, r4, [sp]
   b616e:	4907      	ldr	r1, [pc, #28]	; (b618c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6170:	f7ff ffd7 	bl	b6122 <_ZN5Print6printfEPKcz>
  }
   b6174:	b002      	add	sp, #8
   b6176:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6178:	4a05      	ldr	r2, [pc, #20]	; (b6190 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b617a:	e7ef      	b.n	b615c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b617c:	000bbc11 	.word	0x000bbc11
   b6180:	000bb557 	.word	0x000bb557
   b6184:	000bbc0d 	.word	0x000bbc0d
   b6188:	000bbc09 	.word	0x000bbc09
   b618c:	000bbc27 	.word	0x000bbc27
   b6190:	000bbc00 	.word	0x000bbc00

000b6194 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6194:	b510      	push	{r4, lr}
   b6196:	4b04      	ldr	r3, [pc, #16]	; (b61a8 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b6198:	6003      	str	r3, [r0, #0]
   b619a:	4604      	mov	r4, r0
  if(buffer) {
   b619c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b619e:	b108      	cbz	r0, b61a4 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b61a0:	f001 fd6c 	bl	b7c7c <free>
    buffer = NULL;
  }
}
   b61a4:	4620      	mov	r0, r4
   b61a6:	bd10      	pop	{r4, pc}
   b61a8:	000bc100 	.word	0x000bc100

000b61ac <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b61ac:	b510      	push	{r4, lr}
   b61ae:	4604      	mov	r4, r0
}
   b61b0:	f7ff fff0 	bl	b6194 <_ZN16Adafruit_SSD1306D1Ev>
   b61b4:	4620      	mov	r0, r4
   b61b6:	2150      	movs	r1, #80	; 0x50
   b61b8:	f7fe fcbf 	bl	b4b3a <_ZdlPvj>
   b61bc:	4620      	mov	r0, r4
   b61be:	bd10      	pop	{r4, pc}

000b61c0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b61c0:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b61c2:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b61c4:	db4b      	blt.n	b625e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b61c6:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b61ca:	428c      	cmp	r4, r1
   b61cc:	dd47      	ble.n	b625e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b61ce:	2a00      	cmp	r2, #0
   b61d0:	db45      	blt.n	b625e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b61d2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b61d6:	4294      	cmp	r4, r2
   b61d8:	dd41      	ble.n	b625e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b61da:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b61dc:	2c02      	cmp	r4, #2
   b61de:	d01f      	beq.n	b6220 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b61e0:	2c03      	cmp	r4, #3
   b61e2:	d026      	beq.n	b6232 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b61e4:	2c01      	cmp	r4, #1
   b61e6:	d104      	bne.n	b61f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b61e8:	8904      	ldrh	r4, [r0, #8]
   b61ea:	43d2      	mvns	r2, r2
   b61ec:	4414      	add	r4, r2
      break;
   b61ee:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b61f0:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b61f2:	2b01      	cmp	r3, #1
   b61f4:	d023      	beq.n	b623e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b61f6:	2b02      	cmp	r3, #2
   b61f8:	d032      	beq.n	b6260 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b61fa:	bb83      	cbnz	r3, b625e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b61fc:	2a00      	cmp	r2, #0
   b61fe:	4613      	mov	r3, r2
   b6200:	8904      	ldrh	r4, [r0, #8]
   b6202:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6204:	bfb8      	it	lt
   b6206:	1dd3      	addlt	r3, r2, #7
   b6208:	10db      	asrs	r3, r3, #3
   b620a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b620e:	f002 0207 	and.w	r2, r2, #7
   b6212:	2301      	movs	r3, #1
   b6214:	4093      	lsls	r3, r2
   b6216:	5c42      	ldrb	r2, [r0, r1]
   b6218:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b621c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b621e:	e01e      	b.n	b625e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b6220:	8904      	ldrh	r4, [r0, #8]
   b6222:	3c01      	subs	r4, #1
   b6224:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6226:	8944      	ldrh	r4, [r0, #10]
   b6228:	43d2      	mvns	r2, r2
   b622a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b622c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b622e:	b212      	sxth	r2, r2
      break;
   b6230:	e7df      	b.n	b61f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b6232:	8944      	ldrh	r4, [r0, #10]
   b6234:	3c01      	subs	r4, #1
   b6236:	1a64      	subs	r4, r4, r1
      break;
   b6238:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b623a:	b222      	sxth	r2, r4
      break;
   b623c:	e7d9      	b.n	b61f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b623e:	2a00      	cmp	r2, #0
   b6240:	8904      	ldrh	r4, [r0, #8]
   b6242:	4613      	mov	r3, r2
   b6244:	bfb8      	it	lt
   b6246:	1dd3      	addlt	r3, r2, #7
   b6248:	10db      	asrs	r3, r3, #3
   b624a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b624e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6250:	f002 0007 	and.w	r0, r2, #7
   b6254:	2201      	movs	r2, #1
   b6256:	4082      	lsls	r2, r0
   b6258:	5c58      	ldrb	r0, [r3, r1]
   b625a:	4302      	orrs	r2, r0
   b625c:	545a      	strb	r2, [r3, r1]
}
   b625e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6260:	2a00      	cmp	r2, #0
   b6262:	4613      	mov	r3, r2
   b6264:	8904      	ldrh	r4, [r0, #8]
   b6266:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6268:	bfb8      	it	lt
   b626a:	1dd3      	addlt	r3, r2, #7
   b626c:	10db      	asrs	r3, r3, #3
   b626e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6272:	f002 0207 	and.w	r2, r2, #7
   b6276:	2301      	movs	r3, #1
   b6278:	fa03 f202 	lsl.w	r2, r3, r2
   b627c:	5c43      	ldrb	r3, [r0, r1]
   b627e:	405a      	eors	r2, r3
   b6280:	e7cc      	b.n	b621c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b6284 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b6284:	b570      	push	{r4, r5, r6, lr}
   b6286:	4604      	mov	r4, r0
   b6288:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b628a:	2600      	movs	r6, #0
   b628c:	f7ff fce2 	bl	b5c54 <_ZN12Adafruit_GFXC1Ess>
   b6290:	4b11      	ldr	r3, [pc, #68]	; (b62d8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b6292:	6023      	str	r3, [r4, #0]
   b6294:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b6296:	b915      	cbnz	r5, b629e <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b6298:	f002 ffb4 	bl	b9204 <_Z19__fetch_global_Wirev>
   b629c:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b629e:	23ff      	movs	r3, #255	; 0xff
   b62a0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b62a4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b62a8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b62ac:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b62b0:	4b0a      	ldr	r3, [pc, #40]	; (b62dc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b62b2:	63a3      	str	r3, [r4, #56]	; 0x38
   b62b4:	2301      	movs	r3, #1
   b62b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b62ba:	9b05      	ldr	r3, [sp, #20]
   b62bc:	64a3      	str	r3, [r4, #72]	; 0x48
   b62be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b62c2:	9b06      	ldr	r3, [sp, #24]
   b62c4:	86a2      	strh	r2, [r4, #52]	; 0x34
   b62c6:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b62ca:	6426      	str	r6, [r4, #64]	; 0x40
   b62cc:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b62d0:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b62d2:	4620      	mov	r0, r4
   b62d4:	bd70      	pop	{r4, r5, r6, pc}
   b62d6:	bf00      	nop
   b62d8:	000bc100 	.word	0x000bc100
   b62dc:	000bbc4c 	.word	0x000bbc4c

000b62e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b62e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62e2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b62e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b62e6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b62e8:	b190      	cbz	r0, b6310 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b62ea:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b62ee:	f001 fdaf 	bl	b7e50 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b62f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b62f4:	6803      	ldr	r3, [r0, #0]
   b62f6:	2100      	movs	r1, #0
   b62f8:	689b      	ldr	r3, [r3, #8]
   b62fa:	4798      	blx	r3
    WIRE_WRITE(c);
   b62fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b62fe:	6803      	ldr	r3, [r0, #0]
   b6300:	4629      	mov	r1, r5
   b6302:	689b      	ldr	r3, [r3, #8]
   b6304:	4798      	blx	r3
    wire->endTransmission();
   b6306:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6308:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b630c:	f001 bda7 	b.w	b7e5e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6310:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6314:	4601      	mov	r1, r0
   b6316:	b298      	uxth	r0, r3
   b6318:	f002 feef 	bl	b90fa <digitalWrite>
  if(spi) {
   b631c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b631e:	b120      	cbz	r0, b632a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6320:	4629      	mov	r1, r5
}
   b6322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6326:	f002 b913 	b.w	b8550 <_ZN8SPIClass8transferEh>
   b632a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b632c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b632e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6332:	ea05 0107 	and.w	r1, r5, r7
   b6336:	b280      	uxth	r0, r0
   b6338:	f002 fedf 	bl	b90fa <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b633c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6340:	2101      	movs	r1, #1
   b6342:	b280      	uxth	r0, r0
   b6344:	f002 fed9 	bl	b90fa <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6348:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b634c:	2100      	movs	r1, #0
   b634e:	b280      	uxth	r0, r0
   b6350:	f002 fed3 	bl	b90fa <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6354:	3e01      	subs	r6, #1
   b6356:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b635a:	d1e8      	bne.n	b632e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b635e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b635e:	b538      	push	{r3, r4, r5, lr}
   b6360:	4604      	mov	r4, r0
  TRANSACTION_START
   b6362:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6364:	460d      	mov	r5, r1
  TRANSACTION_START
   b6366:	b180      	cbz	r0, b638a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6368:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b636a:	f001 fd63 	bl	b7e34 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b636e:	2d00      	cmp	r5, #0
   b6370:	4620      	mov	r0, r4
   b6372:	bf14      	ite	ne
   b6374:	21a7      	movne	r1, #167	; 0xa7
   b6376:	21a6      	moveq	r1, #166	; 0xa6
   b6378:	f7ff ffb2 	bl	b62e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b637c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b637e:	b188      	cbz	r0, b63a4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6380:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6386:	f001 bd55 	b.w	b7e34 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b638a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b638c:	b118      	cbz	r0, b6396 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b638e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6392:	f002 f86f 	bl	b8474 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6396:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b639a:	2100      	movs	r1, #0
   b639c:	b280      	uxth	r0, r0
   b639e:	f002 feac 	bl	b90fa <digitalWrite>
   b63a2:	e7e4      	b.n	b636e <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b63a4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b63a8:	2101      	movs	r1, #1
   b63aa:	b280      	uxth	r0, r0
   b63ac:	f002 fea5 	bl	b90fa <digitalWrite>
   b63b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b63b2:	b118      	cbz	r0, b63bc <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b63b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b63b8:	f002 b842 	b.w	b8440 <_ZN8SPIClass14endTransactionEv>
}
   b63bc:	bd38      	pop	{r3, r4, r5, pc}

000b63be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b63be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b63c2:	4604      	mov	r4, r0
  if(wire) { // I2C
   b63c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b63c6:	460d      	mov	r5, r1
  if(wire) { // I2C
   b63c8:	188f      	adds	r7, r1, r2
   b63ca:	b340      	cbz	r0, b641e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b63cc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b63d0:	f001 fd3e 	bl	b7e50 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b63d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b63d6:	6803      	ldr	r3, [r0, #0]
   b63d8:	2100      	movs	r1, #0
   b63da:	689b      	ldr	r3, [r3, #8]
   b63dc:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b63de:	2601      	movs	r6, #1
    while(n--) {
   b63e0:	42af      	cmp	r7, r5
        wire->endTransmission();
   b63e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b63e4:	d017      	beq.n	b6416 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b63e6:	2e1f      	cmp	r6, #31
   b63e8:	d90c      	bls.n	b6404 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b63ea:	f001 fd38 	bl	b7e5e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b63ee:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b63f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b63f4:	f001 fd2c 	bl	b7e50 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b63f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b63fa:	6803      	ldr	r3, [r0, #0]
   b63fc:	2100      	movs	r1, #0
   b63fe:	689b      	ldr	r3, [r3, #8]
   b6400:	4798      	blx	r3
        bytesOut = 1;
   b6402:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6404:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6406:	f815 1b01 	ldrb.w	r1, [r5], #1
   b640a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b640c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b640e:	689b      	ldr	r3, [r3, #8]
   b6410:	4798      	blx	r3
      bytesOut++;
   b6412:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6414:	e7e4      	b.n	b63e0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6416:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b641a:	f001 bd20 	b.w	b7e5e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b641e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6422:	4601      	mov	r1, r0
   b6424:	b298      	uxth	r0, r3
   b6426:	f002 fe68 	bl	b90fa <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b642a:	42bd      	cmp	r5, r7
   b642c:	d022      	beq.n	b6474 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b642e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6430:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6434:	b118      	cbz	r0, b643e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6436:	4649      	mov	r1, r9
   b6438:	f002 f88a 	bl	b8550 <_ZN8SPIClass8transferEh>
   b643c:	e7f5      	b.n	b642a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b643e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6440:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6444:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6448:	ea09 0108 	and.w	r1, r9, r8
   b644c:	b280      	uxth	r0, r0
   b644e:	f002 fe54 	bl	b90fa <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6452:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6456:	2101      	movs	r1, #1
   b6458:	b280      	uxth	r0, r0
   b645a:	f002 fe4e 	bl	b90fa <digitalWrite>
      digitalWrite(clkPin , LOW);
   b645e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6462:	2100      	movs	r1, #0
   b6464:	b280      	uxth	r0, r0
   b6466:	f002 fe48 	bl	b90fa <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b646a:	3e01      	subs	r6, #1
   b646c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6470:	d1e8      	bne.n	b6444 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b6472:	e7da      	b.n	b642a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b6474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6478 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b6478:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b647c:	1dda      	adds	r2, r3, #7
   b647e:	bf48      	it	mi
   b6480:	f103 020e 	addmi.w	r2, r3, #14
   b6484:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6488:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b648a:	10d2      	asrs	r2, r2, #3
   b648c:	435a      	muls	r2, r3
   b648e:	2100      	movs	r1, #0
   b6490:	f003 b853 	b.w	b953a <memset>

000b6494 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b6494:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6498:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b649a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b649c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b64a0:	4604      	mov	r4, r0
   b64a2:	460f      	mov	r7, r1
   b64a4:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b64a6:	b1c3      	cbz	r3, b64da <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b64a8:	4620      	mov	r0, r4
   b64aa:	f7ff ffe5 	bl	b6478 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b64ae:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b64b2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b64b6:	2820      	cmp	r0, #32
   b64b8:	dc21      	bgt.n	b64fe <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b64ba:	2320      	movs	r3, #32
   b64bc:	2201      	movs	r2, #1
   b64be:	3820      	subs	r0, #32
   b64c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b64c4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b64c8:	2373      	movs	r3, #115	; 0x73
   b64ca:	3973      	subs	r1, #115	; 0x73
   b64cc:	9300      	str	r3, [sp, #0]
   b64ce:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b64d2:	4b89      	ldr	r3, [pc, #548]	; (b66f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b64d4:	f340 024f 	sbfx	r2, r0, #1, #16
   b64d8:	e021      	b.n	b651e <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b64da:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b64de:	1dd8      	adds	r0, r3, #7
   b64e0:	bf48      	it	mi
   b64e2:	f103 000e 	addmi.w	r0, r3, #14
   b64e6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b64ea:	10c0      	asrs	r0, r0, #3
   b64ec:	4358      	muls	r0, r3
   b64ee:	f001 fbbd 	bl	b7c6c <malloc>
   b64f2:	62e0      	str	r0, [r4, #44]	; 0x2c
   b64f4:	2800      	cmp	r0, #0
   b64f6:	d1d7      	bne.n	b64a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b64f8:	b004      	add	sp, #16
   b64fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b64fe:	3840      	subs	r0, #64	; 0x40
   b6500:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b6504:	fa02 f280 	sxtah	r2, r2, r0
   b6508:	2340      	movs	r3, #64	; 0x40
   b650a:	2001      	movs	r0, #1
   b650c:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b6510:	2352      	movs	r3, #82	; 0x52
   b6512:	3952      	subs	r1, #82	; 0x52
   b6514:	9300      	str	r3, [sp, #0]
   b6516:	4b79      	ldr	r3, [pc, #484]	; (b66fc <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b6518:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b651c:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b651e:	4620      	mov	r0, r4
   b6520:	f341 014f 	sbfx	r1, r1, #1, #16
   b6524:	f7ff fbac 	bl	b5c80 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b6528:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b652a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b652e:	2800      	cmp	r0, #0
   b6530:	d078      	beq.n	b6624 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6532:	2d00      	cmp	r5, #0
   b6534:	d174      	bne.n	b6620 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b6536:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b653a:	2b20      	cmp	r3, #32
   b653c:	bf0c      	ite	eq
   b653e:	253c      	moveq	r5, #60	; 0x3c
   b6540:	253d      	movne	r5, #61	; 0x3d
   b6542:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b6546:	f1b8 0f00 	cmp.w	r8, #0
   b654a:	d001      	beq.n	b6550 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b654c:	f001 fc76 	bl	b7e3c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6550:	b1fe      	cbz	r6, b6592 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b6552:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6556:	2800      	cmp	r0, #0
   b6558:	db1b      	blt.n	b6592 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b655a:	2101      	movs	r1, #1
   b655c:	b280      	uxth	r0, r0
   b655e:	f002 fdbb 	bl	b90d8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b6562:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6566:	2101      	movs	r1, #1
   b6568:	b280      	uxth	r0, r0
   b656a:	f002 fdc6 	bl	b90fa <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b656e:	2001      	movs	r0, #1
   b6570:	f001 fbcc 	bl	b7d0c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b6574:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6578:	2100      	movs	r1, #0
   b657a:	b280      	uxth	r0, r0
   b657c:	f002 fdbd 	bl	b90fa <digitalWrite>
    delay(10);                  // Wait 10 ms
   b6580:	200a      	movs	r0, #10
   b6582:	f001 fbc3 	bl	b7d0c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b6586:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b658a:	2101      	movs	r1, #1
   b658c:	b280      	uxth	r0, r0
   b658e:	f002 fdb4 	bl	b90fa <digitalWrite>
  TRANSACTION_START
   b6592:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6594:	2800      	cmp	r0, #0
   b6596:	d074      	beq.n	b6682 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b6598:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b659a:	f001 fc4b 	bl	b7e34 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b659e:	2204      	movs	r2, #4
   b65a0:	4957      	ldr	r1, [pc, #348]	; (b6700 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b65a2:	4620      	mov	r0, r4
   b65a4:	f7ff ff0b 	bl	b63be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b65a8:	8961      	ldrh	r1, [r4, #10]
   b65aa:	3901      	subs	r1, #1
   b65ac:	b2c9      	uxtb	r1, r1
   b65ae:	4620      	mov	r0, r4
   b65b0:	f7ff fe96 	bl	b62e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b65b4:	4953      	ldr	r1, [pc, #332]	; (b6704 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b65b6:	2204      	movs	r2, #4
   b65b8:	4620      	mov	r0, r4
   b65ba:	f7ff ff00 	bl	b63be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b65be:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b65c2:	2b01      	cmp	r3, #1
   b65c4:	bf0c      	ite	eq
   b65c6:	2110      	moveq	r1, #16
   b65c8:	2114      	movne	r1, #20
   b65ca:	4620      	mov	r0, r4
   b65cc:	f7ff fe88 	bl	b62e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b65d0:	2204      	movs	r2, #4
   b65d2:	494d      	ldr	r1, [pc, #308]	; (b6708 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b65d4:	4620      	mov	r0, r4
   b65d6:	f7ff fef2 	bl	b63be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b65da:	68a3      	ldr	r3, [r4, #8]
   b65dc:	4a4b      	ldr	r2, [pc, #300]	; (b670c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b65de:	4293      	cmp	r3, r2
   b65e0:	d15c      	bne.n	b669c <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b65e2:	494b      	ldr	r1, [pc, #300]	; (b6710 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b65e4:	2204      	movs	r2, #4
   b65e6:	4620      	mov	r0, r4
   b65e8:	f7ff fee9 	bl	b63be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b65ec:	21d9      	movs	r1, #217	; 0xd9
   b65ee:	4620      	mov	r0, r4
   b65f0:	f7ff fe76 	bl	b62e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b65f4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b65f8:	2b01      	cmp	r3, #1
   b65fa:	bf0c      	ite	eq
   b65fc:	2122      	moveq	r1, #34	; 0x22
   b65fe:	21f1      	movne	r1, #241	; 0xf1
   b6600:	4620      	mov	r0, r4
   b6602:	f7ff fe6d 	bl	b62e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b6606:	4620      	mov	r0, r4
   b6608:	4942      	ldr	r1, [pc, #264]	; (b6714 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b660a:	2206      	movs	r2, #6
   b660c:	f7ff fed7 	bl	b63be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6610:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6612:	2800      	cmp	r0, #0
   b6614:	d063      	beq.n	b66de <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b6616:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6618:	f001 fc0c 	bl	b7e34 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b661c:	2001      	movs	r0, #1
   b661e:	e76b      	b.n	b64f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6620:	b26d      	sxtb	r5, r5
   b6622:	e78e      	b.n	b6542 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6624:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6628:	2101      	movs	r1, #1
   b662a:	b280      	uxth	r0, r0
   b662c:	f002 fd54 	bl	b90d8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6630:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6634:	2101      	movs	r1, #1
   b6636:	b280      	uxth	r0, r0
   b6638:	f002 fd4e 	bl	b90d8 <pinMode>
    SSD1306_DESELECT
   b663c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6640:	2101      	movs	r1, #1
   b6642:	b280      	uxth	r0, r0
   b6644:	f002 fd59 	bl	b90fa <digitalWrite>
    if(spi) { // Hardware SPI
   b6648:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b664a:	b13d      	cbz	r5, b665c <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b664c:	f1b8 0f00 	cmp.w	r8, #0
   b6650:	f43f af7e 	beq.w	b6550 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6654:	4628      	mov	r0, r5
   b6656:	f001 fedf 	bl	b8418 <_ZN8SPIClass5beginEv>
   b665a:	e779      	b.n	b6550 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b665c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6660:	2101      	movs	r1, #1
   b6662:	b280      	uxth	r0, r0
   b6664:	f002 fd38 	bl	b90d8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b6668:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b666c:	2101      	movs	r1, #1
   b666e:	b280      	uxth	r0, r0
   b6670:	f002 fd32 	bl	b90d8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b6674:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6678:	4629      	mov	r1, r5
   b667a:	b280      	uxth	r0, r0
   b667c:	f002 fd3d 	bl	b90fa <digitalWrite>
   b6680:	e766      	b.n	b6550 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b6682:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6684:	b118      	cbz	r0, b668e <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b6686:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b668a:	f001 fef3 	bl	b8474 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b668e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6692:	2100      	movs	r1, #0
   b6694:	b280      	uxth	r0, r0
   b6696:	f002 fd30 	bl	b90fa <digitalWrite>
   b669a:	e780      	b.n	b659e <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b669c:	4a1e      	ldr	r2, [pc, #120]	; (b6718 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b669e:	4293      	cmp	r3, r2
   b66a0:	d10e      	bne.n	b66c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b66a2:	491e      	ldr	r1, [pc, #120]	; (b671c <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b66a4:	2203      	movs	r2, #3
   b66a6:	4620      	mov	r0, r4
   b66a8:	f7ff fe89 	bl	b63be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b66ac:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b66b0:	2b01      	cmp	r3, #1
   b66b2:	bf0c      	ite	eq
   b66b4:	219f      	moveq	r1, #159	; 0x9f
   b66b6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b66b8:	4620      	mov	r0, r4
   b66ba:	f7ff fe11 	bl	b62e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b66be:	e795      	b.n	b65ec <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b66c0:	4a17      	ldr	r2, [pc, #92]	; (b6720 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b66c2:	4293      	cmp	r3, r2
   b66c4:	d192      	bne.n	b65ec <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b66c6:	4917      	ldr	r1, [pc, #92]	; (b6724 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b66c8:	2203      	movs	r2, #3
   b66ca:	4620      	mov	r0, r4
   b66cc:	f7ff fe77 	bl	b63be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b66d0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b66d4:	2b01      	cmp	r3, #1
   b66d6:	bf0c      	ite	eq
   b66d8:	2110      	moveq	r1, #16
   b66da:	21af      	movne	r1, #175	; 0xaf
   b66dc:	e7ec      	b.n	b66b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b66de:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b66e2:	2101      	movs	r1, #1
   b66e4:	b280      	uxth	r0, r0
   b66e6:	f002 fd08 	bl	b90fa <digitalWrite>
   b66ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b66ec:	2800      	cmp	r0, #0
   b66ee:	d095      	beq.n	b661c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b66f0:	f001 fea6 	bl	b8440 <_ZN8SPIClass14endTransactionEv>
   b66f4:	e792      	b.n	b661c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b66f6:	bf00      	nop
   b66f8:	000bbf18 	.word	0x000bbf18
   b66fc:	000bbc58 	.word	0x000bbc58
   b6700:	000bc160 	.word	0x000bc160
   b6704:	000bc164 	.word	0x000bc164
   b6708:	000bc168 	.word	0x000bc168
   b670c:	00200080 	.word	0x00200080
   b6710:	000bc172 	.word	0x000bc172
   b6714:	000bc16c 	.word	0x000bc16c
   b6718:	00400080 	.word	0x00400080
   b671c:	000bc176 	.word	0x000bc176
   b6720:	00100060 	.word	0x00100060
   b6724:	000bc179 	.word	0x000bc179

000b6728 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6728:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b672a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b672c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6730:	db3d      	blt.n	b67ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6732:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6736:	4294      	cmp	r4, r2
   b6738:	dd39      	ble.n	b67ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b673a:	2900      	cmp	r1, #0
      w += x;
   b673c:	bfbe      	ittt	lt
   b673e:	185b      	addlt	r3, r3, r1
   b6740:	b21b      	sxthlt	r3, r3
      x  = 0;
   b6742:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b6744:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b6748:	18ce      	adds	r6, r1, r3
   b674a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b674c:	bfc4      	itt	gt
   b674e:	1a63      	subgt	r3, r4, r1
   b6750:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b6752:	2b00      	cmp	r3, #0
   b6754:	dd2b      	ble.n	b67ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b6756:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6758:	10d6      	asrs	r6, r2, #3
   b675a:	fb14 1106 	smlabb	r1, r4, r6, r1
   b675e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b6760:	f002 0007 	and.w	r0, r2, #7
   b6764:	2201      	movs	r2, #1
   b6766:	4082      	lsls	r2, r0
      switch(color) {
   b6768:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b676a:	b2d2      	uxtb	r2, r2
      switch(color) {
   b676c:	d016      	beq.n	b679c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b676e:	2d02      	cmp	r5, #2
   b6770:	d00b      	beq.n	b678a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b6772:	b9e5      	cbnz	r5, b67ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b6774:	43d2      	mvns	r2, r2
   b6776:	b2d2      	uxtb	r2, r2
   b6778:	440b      	add	r3, r1
   b677a:	4299      	cmp	r1, r3
   b677c:	d017      	beq.n	b67ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b677e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6782:	4010      	ands	r0, r2
   b6784:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6788:	e7f7      	b.n	b677a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b678a:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b678c:	4299      	cmp	r1, r3
   b678e:	d00e      	beq.n	b67ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6790:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6794:	4050      	eors	r0, r2
   b6796:	f801 0c01 	strb.w	r0, [r1, #-1]
   b679a:	e7f7      	b.n	b678c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b679c:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b679e:	4299      	cmp	r1, r3
   b67a0:	d005      	beq.n	b67ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b67a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b67a6:	4310      	orrs	r0, r2
   b67a8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b67ac:	e7f7      	b.n	b679e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b67ae:	bd70      	pop	{r4, r5, r6, pc}

000b67b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b67b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b67b2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b67b4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b67b8:	db76      	blt.n	b68a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b67ba:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b67be:	42b1      	cmp	r1, r6
   b67c0:	da72      	bge.n	b68a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b67c2:	2a00      	cmp	r2, #0
      __h += __y;
   b67c4:	bfbe      	ittt	lt
   b67c6:	189b      	addlt	r3, r3, r2
   b67c8:	b21b      	sxthlt	r3, r3
      __y = 0;
   b67ca:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b67cc:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b67d0:	18d7      	adds	r7, r2, r3
   b67d2:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b67d4:	bfc4      	itt	gt
   b67d6:	1aa3      	subgt	r3, r4, r2
   b67d8:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b67da:	2b00      	cmp	r3, #0
   b67dc:	dd64      	ble.n	b68a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b67de:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b67e2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b67e4:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b67e8:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b67ec:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b67ee:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b67f2:	d023      	beq.n	b683c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b67f4:	f1c2 0208 	rsb	r2, r2, #8
   b67f8:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b67fa:	492d      	ldr	r1, [pc, #180]	; (b68b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b67fc:	4293      	cmp	r3, r2
   b67fe:	bf3c      	itt	cc
   b6800:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b6804:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b6808:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b680a:	bf3c      	itt	cc
   b680c:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b6810:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b6814:	2d01      	cmp	r5, #1
   b6816:	d007      	beq.n	b6828 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b6818:	2d02      	cmp	r5, #2
   b681a:	d02e      	beq.n	b687a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b681c:	b94d      	cbnz	r5, b6832 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b681e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6822:	ea2c 0101 	bic.w	r1, ip, r1
   b6826:	e003      	b.n	b6830 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b6828:	f817 c006 	ldrb.w	ip, [r7, r6]
   b682c:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b6830:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b6832:	4293      	cmp	r3, r2
   b6834:	d338      	bcc.n	b68a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b6836:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b683a:	440c      	add	r4, r1
        h -= mod;
   b683c:	1a9a      	subs	r2, r3, r2
   b683e:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b6840:	2a07      	cmp	r2, #7
   b6842:	d90e      	bls.n	b6862 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6844:	2d02      	cmp	r5, #2
   b6846:	d11d      	bne.n	b6884 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b6848:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b684a:	7821      	ldrb	r1, [r4, #0]
   b684c:	43c9      	mvns	r1, r1
   b684e:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6850:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6852:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b6856:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6858:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b685a:	440c      	add	r4, r1
            } while(h >= 8);
   b685c:	d8f5      	bhi.n	b684a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b685e:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b6862:	b30a      	cbz	r2, b68a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6864:	4b13      	ldr	r3, [pc, #76]	; (b68b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b6866:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6868:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b686a:	d01a      	beq.n	b68a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b686c:	2d02      	cmp	r5, #2
   b686e:	d01c      	beq.n	b68aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6870:	b9d5      	cbnz	r5, b68a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b6872:	7822      	ldrb	r2, [r4, #0]
   b6874:	ea22 0303 	bic.w	r3, r2, r3
   b6878:	e015      	b.n	b68a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b687a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b687e:	ea81 010c 	eor.w	r1, r1, ip
   b6882:	e7d5      	b.n	b6830 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b6884:	1e29      	subs	r1, r5, #0
   b6886:	bf18      	it	ne
   b6888:	2101      	movne	r1, #1
   b688a:	4249      	negs	r1, r1
   b688c:	b2c9      	uxtb	r1, r1
   b688e:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6890:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b6892:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6894:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b6898:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b689a:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b689c:	4434      	add	r4, r6
            } while(h >= 8);
   b689e:	d8f7      	bhi.n	b6890 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b68a0:	e7dd      	b.n	b685e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b68a2:	7822      	ldrb	r2, [r4, #0]
   b68a4:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b68a6:	7023      	strb	r3, [r4, #0]
}
   b68a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b68aa:	7822      	ldrb	r2, [r4, #0]
   b68ac:	4053      	eors	r3, r2
   b68ae:	e7fa      	b.n	b68a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b68b0:	000bc150 	.word	0x000bc150
   b68b4:	000bc158 	.word	0x000bc158

000b68b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b68b8:	b470      	push	{r4, r5, r6}
   b68ba:	4614      	mov	r4, r2
  switch(rotation) {
   b68bc:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b68be:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b68c2:	2a02      	cmp	r2, #2
   b68c4:	d00d      	beq.n	b68e2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b68c6:	2a03      	cmp	r2, #3
   b68c8:	d018      	beq.n	b68fc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b68ca:	2a01      	cmp	r2, #1
   b68cc:	d111      	bne.n	b68f2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b68ce:	8902      	ldrh	r2, [r0, #8]
   b68d0:	43e4      	mvns	r4, r4
   b68d2:	4414      	add	r4, r2
   b68d4:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b68d6:	9603      	str	r6, [sp, #12]
   b68d8:	460a      	mov	r2, r1
   b68da:	4621      	mov	r1, r4
}
   b68dc:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b68de:	f7ff bf67 	b.w	b67b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b68e2:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b68e4:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b68e6:	43e4      	mvns	r4, r4
    x -= (w-1);
   b68e8:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b68ea:	4414      	add	r4, r2
    x -= (w-1);
   b68ec:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b68ee:	b224      	sxth	r4, r4
    x -= (w-1);
   b68f0:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b68f2:	9603      	str	r6, [sp, #12]
   b68f4:	4622      	mov	r2, r4
}
   b68f6:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b68f8:	f7ff bf16 	b.w	b6728 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b68fc:	8945      	ldrh	r5, [r0, #10]
   b68fe:	4419      	add	r1, r3
   b6900:	1a69      	subs	r1, r5, r1
   b6902:	b209      	sxth	r1, r1
    break;
   b6904:	e7e7      	b.n	b68d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b6906 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6906:	b430      	push	{r4, r5}
   b6908:	4614      	mov	r4, r2
  switch(rotation) {
   b690a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b690c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6910:	2a02      	cmp	r2, #2
   b6912:	d00d      	beq.n	b6930 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6914:	2a03      	cmp	r2, #3
   b6916:	d018      	beq.n	b694a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b6918:	2a01      	cmp	r2, #1
   b691a:	d111      	bne.n	b6940 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b691c:	18e2      	adds	r2, r4, r3
   b691e:	8904      	ldrh	r4, [r0, #8]
   b6920:	1aa4      	subs	r4, r4, r2
   b6922:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6924:	9502      	str	r5, [sp, #8]
   b6926:	460a      	mov	r2, r1
   b6928:	4621      	mov	r1, r4
}
   b692a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b692c:	f7ff befc 	b.w	b6728 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6930:	8902      	ldrh	r2, [r0, #8]
   b6932:	43c9      	mvns	r1, r1
   b6934:	4411      	add	r1, r2
    y -= (h-1);
   b6936:	18e2      	adds	r2, r4, r3
   b6938:	8944      	ldrh	r4, [r0, #10]
   b693a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b693c:	b209      	sxth	r1, r1
    y -= (h-1);
   b693e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6940:	9502      	str	r5, [sp, #8]
   b6942:	4622      	mov	r2, r4
}
   b6944:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b6946:	f7ff bf33 	b.w	b67b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b694a:	8942      	ldrh	r2, [r0, #10]
   b694c:	43c9      	mvns	r1, r1
   b694e:	4411      	add	r1, r2
   b6950:	b209      	sxth	r1, r1
    break;
   b6952:	e7e7      	b.n	b6924 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6954 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6958:	4604      	mov	r4, r0
  TRANSACTION_START
   b695a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b695c:	2800      	cmp	r0, #0
   b695e:	d042      	beq.n	b69e6 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6960:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6962:	f001 fa67 	bl	b7e34 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b6966:	4947      	ldr	r1, [pc, #284]	; (b6a84 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b6968:	2205      	movs	r2, #5
   b696a:	4620      	mov	r0, r4
   b696c:	f7ff fd27 	bl	b63be <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6970:	8921      	ldrh	r1, [r4, #8]
   b6972:	3901      	subs	r1, #1
   b6974:	4620      	mov	r0, r4
   b6976:	b2c9      	uxtb	r1, r1
   b6978:	f7ff fcb2 	bl	b62e0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b697c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6980:	1dde      	adds	r6, r3, #7
   b6982:	bf48      	it	mi
   b6984:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b6988:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b698c:	8923      	ldrh	r3, [r4, #8]
   b698e:	10f6      	asrs	r6, r6, #3
   b6990:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b6994:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b6998:	2800      	cmp	r0, #0
   b699a:	d03a      	beq.n	b6a12 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b699c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b69a0:	f001 fa56 	bl	b7e50 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b69a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b69a6:	6803      	ldr	r3, [r0, #0]
   b69a8:	2140      	movs	r1, #64	; 0x40
   b69aa:	689b      	ldr	r3, [r3, #8]
   b69ac:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b69ae:	2701      	movs	r7, #1
    while(count--) {
   b69b0:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b69b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b69b4:	d024      	beq.n	b6a00 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b69b6:	2f1f      	cmp	r7, #31
   b69b8:	d90c      	bls.n	b69d4 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b69ba:	f001 fa50 	bl	b7e5e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b69be:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b69c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b69c4:	f001 fa44 	bl	b7e50 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b69c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b69ca:	6803      	ldr	r3, [r0, #0]
   b69cc:	2140      	movs	r1, #64	; 0x40
   b69ce:	689b      	ldr	r3, [r3, #8]
   b69d0:	4798      	blx	r3
        bytesOut = 1;
   b69d2:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b69d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b69d6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b69da:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b69dc:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b69de:	689b      	ldr	r3, [r3, #8]
   b69e0:	4798      	blx	r3
      bytesOut++;
   b69e2:	b2ff      	uxtb	r7, r7
    while(count--) {
   b69e4:	e7e4      	b.n	b69b0 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b69e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b69e8:	b118      	cbz	r0, b69f2 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b69ea:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b69ee:	f001 fd41 	bl	b8474 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b69f2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b69f6:	2100      	movs	r1, #0
   b69f8:	b280      	uxth	r0, r0
   b69fa:	f002 fb7e 	bl	b90fa <digitalWrite>
   b69fe:	e7b2      	b.n	b6966 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6a00:	f001 fa2d 	bl	b7e5e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6a04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6a06:	b378      	cbz	r0, b6a68 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b6a08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6a0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6a0e:	f001 ba11 	b.w	b7e34 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6a12:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6a16:	2101      	movs	r1, #1
   b6a18:	b280      	uxth	r0, r0
   b6a1a:	f002 fb6e 	bl	b90fa <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6a1e:	42ae      	cmp	r6, r5
   b6a20:	d0f0      	beq.n	b6a04 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6a22:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6a24:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6a28:	b118      	cbz	r0, b6a32 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b6a2a:	4649      	mov	r1, r9
   b6a2c:	f001 fd90 	bl	b8550 <_ZN8SPIClass8transferEh>
   b6a30:	e7f5      	b.n	b6a1e <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6a32:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6a34:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6a38:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6a3c:	ea09 0108 	and.w	r1, r9, r8
   b6a40:	b280      	uxth	r0, r0
   b6a42:	f002 fb5a 	bl	b90fa <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6a46:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6a4a:	2101      	movs	r1, #1
   b6a4c:	b280      	uxth	r0, r0
   b6a4e:	f002 fb54 	bl	b90fa <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6a52:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6a56:	2100      	movs	r1, #0
   b6a58:	b280      	uxth	r0, r0
   b6a5a:	f002 fb4e 	bl	b90fa <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6a5e:	3f01      	subs	r7, #1
   b6a60:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6a64:	d1e8      	bne.n	b6a38 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b6a66:	e7da      	b.n	b6a1e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6a68:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6a6c:	2101      	movs	r1, #1
   b6a6e:	b280      	uxth	r0, r0
   b6a70:	f002 fb43 	bl	b90fa <digitalWrite>
   b6a74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6a76:	b118      	cbz	r0, b6a80 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b6a78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6a7c:	f001 bce0 	b.w	b8440 <_ZN8SPIClass14endTransactionEv>
}
   b6a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6a84:	000bc17c 	.word	0x000bc17c

000b6a88 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6a88:	2100      	movs	r1, #0
   b6a8a:	220a      	movs	r2, #10
   b6a8c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6a90:	4770      	bx	lr

000b6a92 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b6a92:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b6a94:	b510      	push	{r4, lr}
   b6a96:	4604      	mov	r4, r0
    this->pin = pin;
   b6a98:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6a9a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6a9c:	b288      	uxth	r0, r1
   b6a9e:	f002 fb45 	bl	b912c <digitalRead>
   b6aa2:	b108      	cbz	r0, b6aa8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b6aa4:	2303      	movs	r3, #3
   b6aa6:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6aa8:	f000 fe64 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6aac:	6020      	str	r0, [r4, #0]
#endif
}
   b6aae:	bd10      	pop	{r4, pc}

000b6ab0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6ab0:	b538      	push	{r3, r4, r5, lr}
   b6ab2:	460c      	mov	r4, r1
   b6ab4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b6ab6:	4611      	mov	r1, r2
   b6ab8:	b2a0      	uxth	r0, r4
   b6aba:	f002 fb0d 	bl	b90d8 <pinMode>
  
  this->attach(pin);
   b6abe:	4621      	mov	r1, r4
   b6ac0:	4628      	mov	r0, r5
}
   b6ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b6ac6:	f7ff bfe4 	b.w	b6a92 <_ZN8Debounce6attachEi>

000b6aca <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6aca:	b538      	push	{r3, r4, r5, lr}
   b6acc:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6ace:	79c0      	ldrb	r0, [r0, #7]
   b6ad0:	f002 fb2c 	bl	b912c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b6ad4:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b6ad6:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6ad8:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6adc:	bf18      	it	ne
   b6ade:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6ae0:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b6ae4:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b6ae6:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6ae8:	d00a      	beq.n	b6b00 <_ZN8Debounce6updateEv+0x36>
   b6aea:	f000 fe43 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6aee:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6af0:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b6af2:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b6af6:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b6af8:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b6afa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6afe:	bd38      	pop	{r3, r4, r5, pc}
   b6b00:	f000 fe38 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b6b04:	6823      	ldr	r3, [r4, #0]
   b6b06:	1ac0      	subs	r0, r0, r3
   b6b08:	88a3      	ldrh	r3, [r4, #4]
   b6b0a:	4298      	cmp	r0, r3
   b6b0c:	d3f4      	bcc.n	b6af8 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b6b0e:	79a3      	ldrb	r3, [r4, #6]
   b6b10:	f003 0301 	and.w	r3, r3, #1
   b6b14:	42ab      	cmp	r3, r5
   b6b16:	d0ef      	beq.n	b6af8 <_ZN8Debounce6updateEv+0x2e>
   b6b18:	f000 fe2c 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b6b1c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b6b1e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b6b20:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b6b24:	f043 0308 	orr.w	r3, r3, #8
   b6b28:	e7e5      	b.n	b6af6 <_ZN8Debounce6updateEv+0x2c>

000b6b2a <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b6b2a:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b6b2e:	b510      	push	{r4, lr}
   b6b30:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b6b32:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b6b34:	b113      	cbz	r3, b6b3c <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b6b36:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b6b38:	f000 fdec 	bl	b7714 <os_mutex_lock>
#endif
#endif
#endif
        }
   b6b3c:	4620      	mov	r0, r4
   b6b3e:	bd10      	pop	{r4, pc}

000b6b40 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b6b40:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b6b42:	6803      	ldr	r3, [r0, #0]
   b6b44:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b6b48:	4604      	mov	r4, r0
            if (mqtt->thread)
   b6b4a:	b112      	cbz	r2, b6b52 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b6b4c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b6b4e:	f000 fde9 	bl	b7724 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b6b52:	4620      	mov	r0, r4
   b6b54:	bd10      	pop	{r4, pc}

000b6b56 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b6b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b58:	461f      	mov	r7, r3
   b6b5a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b6b5e:	4604      	mov	r4, r0
   b6b60:	460d      	mov	r5, r1
   b6b62:	4616      	mov	r6, r2
    if (thread) {
   b6b64:	b12b      	cbz	r3, b6b72 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b6b66:	2301      	movs	r3, #1
   b6b68:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b6b6c:	3058      	adds	r0, #88	; 0x58
   b6b6e:	f000 fdc1 	bl	b76f4 <os_mutex_create>
    }
    this->callback = callback;
   b6b72:	9b08      	ldr	r3, [sp, #32]
   b6b74:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b6b76:	2300      	movs	r3, #0
   b6b78:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b6b7a:	b106      	cbz	r6, b6b7e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b6b7c:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b6b7e:	b125      	cbz	r5, b6b8a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b6b80:	4629      	mov	r1, r5
   b6b82:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b6b86:	f001 fd72 	bl	b866e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b6b8a:	9b06      	ldr	r3, [sp, #24]
   b6b8c:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6b8e:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b6b90:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b6b92:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6b96:	2bff      	cmp	r3, #255	; 0xff
   b6b98:	bfb8      	it	lt
   b6b9a:	23ff      	movlt	r3, #255	; 0xff
   b6b9c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b6ba0:	b108      	cbz	r0, b6ba6 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b6ba2:	f7fd ffc8 	bl	b4b36 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b6ba6:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b6baa:	f7fd ffc2 	bl	b4b32 <_Znaj>
   b6bae:	61e0      	str	r0, [r4, #28]
}
   b6bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b6bb4 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6bb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6bb8:	4604      	mov	r4, r0
            bool thread) {
   b6bba:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6bbc:	4617      	mov	r7, r2
   b6bbe:	4698      	mov	r8, r3
   b6bc0:	460e      	mov	r6, r1
            bool thread) {
   b6bc2:	f002 f879 	bl	b8cb8 <_ZN9TCPClientC1Ev>
   b6bc6:	490d      	ldr	r1, [pc, #52]	; (b6bfc <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b6bc8:	61e5      	str	r5, [r4, #28]
   b6bca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b6bce:	f001 fd3a 	bl	b8646 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6bd2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b6bd6:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6bd8:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b6bdc:	22ff      	movs	r2, #255	; 0xff
   b6bde:	230f      	movs	r3, #15
   b6be0:	e9cd 3200 	strd	r3, r2, [sp]
   b6be4:	4620      	mov	r0, r4
            bool thread) {
   b6be6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6bea:	463b      	mov	r3, r7
   b6bec:	462a      	mov	r2, r5
   b6bee:	4631      	mov	r1, r6
   b6bf0:	f7ff ffb1 	bl	b6b56 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b6bf4:	4620      	mov	r0, r4
   b6bf6:	b004      	add	sp, #16
   b6bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6bfc:	000bb557 	.word	0x000bb557

000b6c00 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b6c00:	b510      	push	{r4, lr}
   b6c02:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b6c04:	4620      	mov	r0, r4
   b6c06:	f001 ffb3 	bl	b8b70 <_ZN9TCPClient9availableEv>
   b6c0a:	2800      	cmp	r0, #0
   b6c0c:	d0fa      	beq.n	b6c04 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b6c0e:	4620      	mov	r0, r4
   b6c10:	f001 fd98 	bl	b8744 <_ZN9TCPClient4readEv>
}
   b6c14:	b2c0      	uxtb	r0, r0
   b6c16:	bd10      	pop	{r4, pc}

000b6c18 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b6c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6c1c:	4605      	mov	r5, r0
   b6c1e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b6c20:	f7ff ffee 	bl	b6c00 <_ZN4MQTT8readByteEv>
   b6c24:	69eb      	ldr	r3, [r5, #28]
   b6c26:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b6c28:	69eb      	ldr	r3, [r5, #28]
   b6c2a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b6c2e:	f04f 0901 	mov.w	r9, #1
   b6c32:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b6c36:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b6c38:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b6c3a:	4628      	mov	r0, r5
   b6c3c:	f7ff ffe0 	bl	b6c00 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b6c40:	4626      	mov	r6, r4
   b6c42:	69eb      	ldr	r3, [r5, #28]
   b6c44:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b6c46:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b6c4a:	fb13 f309 	smulbb	r3, r3, r9
   b6c4e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b6c50:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b6c52:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b6c54:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b6c56:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b6c58:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b6c5c:	d4ed      	bmi.n	b6c3a <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b6c5e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b6c60:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b6c64:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b6c68:	d11e      	bne.n	b6ca8 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b6c6a:	4628      	mov	r0, r5
   b6c6c:	f7ff ffc8 	bl	b6c00 <_ZN4MQTT8readByteEv>
   b6c70:	69eb      	ldr	r3, [r5, #28]
   b6c72:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b6c74:	4628      	mov	r0, r5
   b6c76:	f7ff ffc3 	bl	b6c00 <_ZN4MQTT8readByteEv>
   b6c7a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b6c7c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b6c7e:	b2b6      	uxth	r6, r6
   b6c80:	69eb      	ldr	r3, [r5, #28]
   b6c82:	b2a4      	uxth	r4, r4
   b6c84:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b6c86:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b6c88:	b2b6      	uxth	r6, r6
   b6c8a:	42be      	cmp	r6, r7
   b6c8c:	d20e      	bcs.n	b6cac <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b6c8e:	4628      	mov	r0, r5
   b6c90:	f7ff ffb6 	bl	b6c00 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b6c94:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b6c98:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b6c9a:	bf84      	itt	hi
   b6c9c:	69eb      	ldrhi	r3, [r5, #28]
   b6c9e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b6ca0:	3401      	adds	r4, #1
   b6ca2:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b6ca4:	3601      	adds	r6, #1
   b6ca6:	e7ef      	b.n	b6c88 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b6ca8:	2600      	movs	r6, #0
   b6caa:	e7ed      	b.n	b6c88 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b6cac:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b6cb0:	42a3      	cmp	r3, r4
   b6cb2:	bf2c      	ite	cs
   b6cb4:	4620      	movcs	r0, r4
   b6cb6:	2000      	movcc	r0, #0
   b6cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6cbc <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6cbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6cc0:	4615      	mov	r5, r2
   b6cc2:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b6cc4:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6cc6:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6cc8:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b6cca:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b6ccc:	a802      	add	r0, sp, #8
        digit = len % 128;
   b6cce:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b6cd2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b6cd6:	f103 0401 	add.w	r4, r3, #1
   b6cda:	4403      	add	r3, r0
            digit |= 0x80;
   b6cdc:	bf88      	it	hi
   b6cde:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b6ce2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b6ce6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b6cea:	b2e4      	uxtb	r4, r4
   b6cec:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b6cf0:	d81e      	bhi.n	b6d30 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b6cf2:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b6cf6:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b6cfa:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b6cfc:	4622      	mov	r2, r4
   b6cfe:	a901      	add	r1, sp, #4
   b6d00:	4428      	add	r0, r5
    buf[4-llen] = header;
   b6d02:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b6d06:	f002 fc0a 	bl	b951e <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b6d0a:	1c72      	adds	r2, r6, #1
   b6d0c:	4422      	add	r2, r4
   b6d0e:	4641      	mov	r1, r8
   b6d10:	4638      	mov	r0, r7
   b6d12:	f001 fd02 	bl	b871a <_ZN9TCPClient5writeEPKhj>
   b6d16:	4605      	mov	r5, r0
   b6d18:	f000 fd2c 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b6d1c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b6d1e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b6d20:	4432      	add	r2, r6
   b6d22:	b2a8      	uxth	r0, r5
}
   b6d24:	1a13      	subs	r3, r2, r0
   b6d26:	4258      	negs	r0, r3
   b6d28:	4158      	adcs	r0, r3
   b6d2a:	b002      	add	sp, #8
   b6d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b6d30:	4623      	mov	r3, r4
   b6d32:	e7ca      	b.n	b6cca <_ZN4MQTT5writeEhPht+0xe>

000b6d34 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b6d34:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b6d36:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d38:	4605      	mov	r5, r0
    pos += 2;
   b6d3a:	b298      	uxth	r0, r3
   b6d3c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b6d3e:	5cce      	ldrb	r6, [r1, r3]
   b6d40:	b29c      	uxth	r4, r3
   b6d42:	b156      	cbz	r6, b6d5a <_ZN4MQTT11writeStringEPKcPht+0x26>
   b6d44:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b6d48:	4584      	cmp	ip, r0
   b6d4a:	f103 0701 	add.w	r7, r3, #1
   b6d4e:	d904      	bls.n	b6d5a <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b6d50:	1c44      	adds	r4, r0, #1
   b6d52:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b6d54:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b6d56:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b6d58:	e7f1      	b.n	b6d3e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b6d5a:	b299      	uxth	r1, r3
   b6d5c:	1a41      	subs	r1, r0, r1
   b6d5e:	440a      	add	r2, r1
   b6d60:	0a21      	lsrs	r1, r4, #8
   b6d62:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b6d66:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b6d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d6c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b6d6c:	b538      	push	{r3, r4, r5, lr}
   b6d6e:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b6d70:	f001 fe20 	bl	b89b4 <_ZN9TCPClient9connectedEv>
   b6d74:	2800      	cmp	r0, #0
   b6d76:	bf14      	ite	ne
   b6d78:	2501      	movne	r5, #1
   b6d7a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b6d7c:	d102      	bne.n	b6d84 <_ZN4MQTT11isConnectedEv+0x18>
   b6d7e:	4620      	mov	r0, r4
   b6d80:	f001 ff50 	bl	b8c24 <_ZN9TCPClient4stopEv>
    return rc;
}
   b6d84:	4628      	mov	r0, r5
   b6d86:	bd38      	pop	{r3, r4, r5, pc}

000b6d88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b6d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6d8c:	b088      	sub	sp, #32
   b6d8e:	4604      	mov	r4, r0
   b6d90:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b6d94:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6d98:	4689      	mov	r9, r1
   b6d9a:	4617      	mov	r7, r2
   b6d9c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b6d9e:	f7ff ffe5 	bl	b6d6c <_ZN4MQTT11isConnectedEv>
   b6da2:	4605      	mov	r5, r0
   b6da4:	2800      	cmp	r0, #0
   b6da6:	f040 80cd 	bne.w	b6f44 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b6daa:	4621      	mov	r1, r4
   b6dac:	a801      	add	r0, sp, #4
   b6dae:	f7ff febc 	bl	b6b2a <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b6db2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6db4:	2900      	cmp	r1, #0
   b6db6:	f040 8088 	bne.w	b6eca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b6dba:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6dbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6dc0:	462b      	mov	r3, r5
   b6dc2:	4620      	mov	r0, r4
   b6dc4:	f001 fd78 	bl	b88b8 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6dc8:	2800      	cmp	r0, #0
   b6dca:	d07a      	beq.n	b6ec2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b6dcc:	2301      	movs	r3, #1
   b6dce:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6dd0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6dd4:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b6dd6:	2b04      	cmp	r3, #4
   b6dd8:	4b5b      	ldr	r3, [pc, #364]	; (b6f48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b6dda:	f040 8081 	bne.w	b6ee0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b6dde:	6818      	ldr	r0, [r3, #0]
   b6de0:	8899      	ldrh	r1, [r3, #4]
   b6de2:	799b      	ldrb	r3, [r3, #6]
   b6de4:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6de8:	f88d 300e 	strb.w	r3, [sp, #14]
   b6dec:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6dee:	f8c2 0005 	str.w	r0, [r2, #5]
   b6df2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b6df6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b6dfa:	f8a2 1009 	strh.w	r1, [r2, #9]
   b6dfe:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b6e00:	230c      	movs	r3, #12
            if (willTopic) {
   b6e02:	f1b8 0f00 	cmp.w	r8, #0
   b6e06:	f000 8081 	beq.w	b6f0c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b6e0a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b6e0e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b6e12:	0140      	lsls	r0, r0, #5
   b6e14:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b6e18:	f040 0006 	orr.w	r0, r0, #6
   b6e1c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b6e1e:	f1ba 0f00 	cmp.w	sl, #0
   b6e22:	d101      	bne.n	b6e28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b6e24:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b6e28:	b11f      	cbz	r7, b6e32 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b6e2a:	2e00      	cmp	r6, #0
   b6e2c:	d170      	bne.n	b6f10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b6e2e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b6e32:	69e2      	ldr	r2, [r4, #28]
   b6e34:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b6e36:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b6e38:	69e1      	ldr	r1, [r4, #28]
   b6e3a:	1c58      	adds	r0, r3, #1
   b6e3c:	1212      	asrs	r2, r2, #8
   b6e3e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b6e40:	1c9a      	adds	r2, r3, #2
   b6e42:	69e1      	ldr	r1, [r4, #28]
   b6e44:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b6e46:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b6e48:	3303      	adds	r3, #3
   b6e4a:	69e2      	ldr	r2, [r4, #28]
   b6e4c:	4649      	mov	r1, r9
   b6e4e:	4620      	mov	r0, r4
   b6e50:	f7ff ff70 	bl	b6d34 <_ZN4MQTT11writeStringEPKcPht>
   b6e54:	4603      	mov	r3, r0
            if (willTopic) {
   b6e56:	f1b8 0f00 	cmp.w	r8, #0
   b6e5a:	d00b      	beq.n	b6e74 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b6e5c:	69e2      	ldr	r2, [r4, #28]
   b6e5e:	4641      	mov	r1, r8
   b6e60:	4620      	mov	r0, r4
   b6e62:	f7ff ff67 	bl	b6d34 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b6e66:	69e2      	ldr	r2, [r4, #28]
   b6e68:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b6e6a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b6e6c:	4620      	mov	r0, r4
   b6e6e:	f7ff ff61 	bl	b6d34 <_ZN4MQTT11writeStringEPKcPht>
   b6e72:	4603      	mov	r3, r0
            if(user != NULL) {
   b6e74:	b167      	cbz	r7, b6e90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b6e76:	69e2      	ldr	r2, [r4, #28]
   b6e78:	4639      	mov	r1, r7
   b6e7a:	4620      	mov	r0, r4
   b6e7c:	f7ff ff5a 	bl	b6d34 <_ZN4MQTT11writeStringEPKcPht>
   b6e80:	4603      	mov	r3, r0
                if(pass != NULL) {
   b6e82:	b12e      	cbz	r6, b6e90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b6e84:	69e2      	ldr	r2, [r4, #28]
   b6e86:	4631      	mov	r1, r6
   b6e88:	4620      	mov	r0, r4
   b6e8a:	f7ff ff53 	bl	b6d34 <_ZN4MQTT11writeStringEPKcPht>
   b6e8e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6e90:	3b05      	subs	r3, #5
   b6e92:	69e2      	ldr	r2, [r4, #28]
   b6e94:	b29b      	uxth	r3, r3
   b6e96:	2110      	movs	r1, #16
   b6e98:	4620      	mov	r0, r4
   b6e9a:	f7ff ff0f 	bl	b6cbc <_ZN4MQTT5writeEhPht>
   b6e9e:	f000 fc69 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b6ea2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6ea6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b6eaa:	4620      	mov	r0, r4
   b6eac:	f001 fe60 	bl	b8b70 <_ZN9TCPClient9availableEv>
   b6eb0:	bb88      	cbnz	r0, b6f16 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b6eb2:	f000 fc5f 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6eb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6eb8:	1ac0      	subs	r0, r0, r3
   b6eba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6ebc:	4373      	muls	r3, r6
   b6ebe:	4298      	cmp	r0, r3
   b6ec0:	d9f3      	bls.n	b6eaa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b6ec2:	4620      	mov	r0, r4
   b6ec4:	f001 feae 	bl	b8c24 <_ZN9TCPClient4stopEv>
   b6ec8:	e035      	b.n	b6f36 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b6eca:	a802      	add	r0, sp, #8
   b6ecc:	f001 f848 	bl	b7f60 <_ZN9IPAddressC1EPKh>
   b6ed0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6ed4:	462b      	mov	r3, r5
   b6ed6:	a902      	add	r1, sp, #8
   b6ed8:	4620      	mov	r0, r4
   b6eda:	f001 fdcd 	bl	b8a78 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6ede:	e773      	b.n	b6dc8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b6ee0:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b6ee4:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6ee8:	7bdb      	ldrb	r3, [r3, #15]
   b6eea:	f10d 0c08 	add.w	ip, sp, #8
   b6eee:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b6ef2:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b6ef6:	ab02      	add	r3, sp, #8
   b6ef8:	cb03      	ldmia	r3!, {r0, r1}
   b6efa:	f8c2 0005 	str.w	r0, [r2, #5]
   b6efe:	f8c2 1009 	str.w	r1, [r2, #9]
   b6f02:	f89c 3000 	ldrb.w	r3, [ip]
   b6f06:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b6f08:	230e      	movs	r3, #14
   b6f0a:	e77a      	b.n	b6e02 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b6f0c:	2002      	movs	r0, #2
   b6f0e:	e786      	b.n	b6e1e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b6f10:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b6f14:	e78d      	b.n	b6e32 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b6f16:	a902      	add	r1, sp, #8
   b6f18:	4620      	mov	r0, r4
   b6f1a:	f7ff fe7d 	bl	b6c18 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b6f1e:	2804      	cmp	r0, #4
   b6f20:	d1cf      	bne.n	b6ec2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b6f22:	69e3      	ldr	r3, [r4, #28]
   b6f24:	78de      	ldrb	r6, [r3, #3]
   b6f26:	2e00      	cmp	r6, #0
   b6f28:	d1cb      	bne.n	b6ec2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b6f2a:	f000 fc23 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b6f2e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6f30:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b6f32:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b6f36:	a801      	add	r0, sp, #4
   b6f38:	f7ff fe02 	bl	b6b40 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6f3c:	4628      	mov	r0, r5
   b6f3e:	b008      	add	sp, #32
   b6f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b6f44:	2500      	movs	r5, #0
   b6f46:	e7f9      	b.n	b6f3c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b6f48:	000bb50c 	.word	0x000bb50c

000b6f4c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b6f4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b6f4e:	2301      	movs	r3, #1
   b6f50:	2204      	movs	r2, #4
   b6f52:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b6f56:	2300      	movs	r3, #0
   b6f58:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6f5c:	e9cd 3300 	strd	r3, r3, [sp]
   b6f60:	461a      	mov	r2, r3
   b6f62:	f7ff ff11 	bl	b6d88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b6f66:	b007      	add	sp, #28
   b6f68:	f85d fb04 	ldr.w	pc, [sp], #4

000b6f6c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f70:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b6f74:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b6f78:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b6f7c:	4604      	mov	r4, r0
   b6f7e:	468b      	mov	fp, r1
   b6f80:	4616      	mov	r6, r2
   b6f82:	461f      	mov	r7, r3
    if (isConnected()) {
   b6f84:	f7ff fef2 	bl	b6d6c <_ZN4MQTT11isConnectedEv>
   b6f88:	4682      	mov	sl, r0
   b6f8a:	2800      	cmp	r0, #0
   b6f8c:	d051      	beq.n	b7032 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b6f8e:	4621      	mov	r1, r4
   b6f90:	a801      	add	r0, sp, #4
   b6f92:	f7ff fdca 	bl	b6b2a <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b6f96:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b6f9a:	69e0      	ldr	r0, [r4, #28]
   b6f9c:	2100      	movs	r1, #0
   b6f9e:	f002 facc 	bl	b953a <memset>
        length = writeString(topic, buffer, length);
   b6fa2:	2305      	movs	r3, #5
   b6fa4:	69e2      	ldr	r2, [r4, #28]
   b6fa6:	4659      	mov	r1, fp
   b6fa8:	4620      	mov	r0, r4
   b6faa:	f7ff fec3 	bl	b6d34 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b6fae:	1e6b      	subs	r3, r5, #1
   b6fb0:	2b01      	cmp	r3, #1
   b6fb2:	d815      	bhi.n	b6fe0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b6fb4:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6fb6:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b6fb8:	3101      	adds	r1, #1
   b6fba:	b289      	uxth	r1, r1
   b6fbc:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6fbe:	0a09      	lsrs	r1, r1, #8
   b6fc0:	5419      	strb	r1, [r3, r0]
   b6fc2:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b6fc4:	69e3      	ldr	r3, [r4, #28]
   b6fc6:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6fc8:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b6fca:	3002      	adds	r0, #2
   b6fcc:	5499      	strb	r1, [r3, r2]
   b6fce:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b6fd0:	f1b8 0f00 	cmp.w	r8, #0
   b6fd4:	d004      	beq.n	b6fe0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b6fd6:	8c23      	ldrh	r3, [r4, #32]
   b6fd8:	1c5a      	adds	r2, r3, #1
   b6fda:	8422      	strh	r2, [r4, #32]
   b6fdc:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6fe0:	2100      	movs	r1, #0
   b6fe2:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6fe4:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b6fe6:	69e2      	ldr	r2, [r4, #28]
   b6fe8:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6fea:	d90a      	bls.n	b7002 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6fec:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6ff0:	459c      	cmp	ip, r3
   b6ff2:	d906      	bls.n	b7002 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b6ff4:	f816 c001 	ldrb.w	ip, [r6, r1]
   b6ff8:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6ffc:	3101      	adds	r1, #1
   b6ffe:	b289      	uxth	r1, r1
   b7000:	e7ef      	b.n	b6fe2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b7002:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b7006:	2900      	cmp	r1, #0
   b7008:	bf0c      	ite	eq
   b700a:	2130      	moveq	r1, #48	; 0x30
   b700c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b700e:	f1b9 0f00 	cmp.w	r9, #0
   b7012:	d001      	beq.n	b7018 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b7014:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b7018:	2d02      	cmp	r5, #2
   b701a:	d10e      	bne.n	b703a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b701c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b7020:	3b05      	subs	r3, #5
   b7022:	b29b      	uxth	r3, r3
   b7024:	4620      	mov	r0, r4
   b7026:	f7ff fe49 	bl	b6cbc <_ZN4MQTT5writeEhPht>
   b702a:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b702c:	a801      	add	r0, sp, #4
   b702e:	f7ff fd87 	bl	b6b40 <_ZN4MQTT11MutexLockerD1Ev>
}
   b7032:	4650      	mov	r0, sl
   b7034:	b003      	add	sp, #12
   b7036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b703a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b703c:	bf08      	it	eq
   b703e:	f041 0102 	orreq.w	r1, r1, #2
   b7042:	e7ed      	b.n	b7020 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b7044 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b7044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b7046:	9c08      	ldr	r4, [sp, #32]
   b7048:	9403      	str	r4, [sp, #12]
   b704a:	2400      	movs	r4, #0
   b704c:	9402      	str	r4, [sp, #8]
   b704e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b7052:	9401      	str	r4, [sp, #4]
   b7054:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b7058:	9400      	str	r4, [sp, #0]
   b705a:	f7ff ff87 	bl	b6f6c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b705e:	b004      	add	sp, #16
   b7060:	bd10      	pop	{r4, pc}

000b7062 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b7062:	b530      	push	{r4, r5, lr}
   b7064:	b087      	sub	sp, #28
   b7066:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b7068:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b706a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b706c:	9204      	str	r2, [sp, #16]
   b706e:	f7fd fd03 	bl	b4a78 <strlen>
   b7072:	2500      	movs	r5, #0
   b7074:	4603      	mov	r3, r0
   b7076:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b707a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b707e:	9500      	str	r5, [sp, #0]
   b7080:	4620      	mov	r0, r4
   b7082:	f7ff ffdf 	bl	b7044 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b7086:	b007      	add	sp, #28
   b7088:	bd30      	pop	{r4, r5, pc}

000b708a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b708a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b708c:	4604      	mov	r4, r0
   b708e:	460e      	mov	r6, r1
    if (isConnected()) {
   b7090:	f7ff fe6c 	bl	b6d6c <_ZN4MQTT11isConnectedEv>
   b7094:	4605      	mov	r5, r0
   b7096:	b1c8      	cbz	r0, b70cc <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b7098:	4621      	mov	r1, r4
   b709a:	a801      	add	r0, sp, #4
   b709c:	f7ff fd45 	bl	b6b2a <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b70a0:	69e3      	ldr	r3, [r4, #28]
   b70a2:	2262      	movs	r2, #98	; 0x62
   b70a4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b70a6:	69e3      	ldr	r3, [r4, #28]
   b70a8:	2202      	movs	r2, #2
   b70aa:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b70ac:	69e3      	ldr	r3, [r4, #28]
   b70ae:	0a32      	lsrs	r2, r6, #8
   b70b0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b70b2:	69e3      	ldr	r3, [r4, #28]
   b70b4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b70b6:	69e1      	ldr	r1, [r4, #28]
   b70b8:	2204      	movs	r2, #4
   b70ba:	4620      	mov	r0, r4
   b70bc:	f001 fb2d 	bl	b871a <_ZN9TCPClient5writeEPKhj>
   b70c0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b70c2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b70c4:	bf18      	it	ne
   b70c6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b70c8:	f7ff fd3a 	bl	b6b40 <_ZN4MQTT11MutexLockerD1Ev>
}
   b70cc:	4628      	mov	r0, r5
   b70ce:	b002      	add	sp, #8
   b70d0:	bd70      	pop	{r4, r5, r6, pc}

000b70d2 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b70d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b70d4:	4604      	mov	r4, r0
   b70d6:	460e      	mov	r6, r1
    if (isConnected()) {
   b70d8:	f7ff fe48 	bl	b6d6c <_ZN4MQTT11isConnectedEv>
   b70dc:	4605      	mov	r5, r0
   b70de:	b1c8      	cbz	r0, b7114 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b70e0:	4621      	mov	r1, r4
   b70e2:	a801      	add	r0, sp, #4
   b70e4:	f7ff fd21 	bl	b6b2a <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b70e8:	69e3      	ldr	r3, [r4, #28]
   b70ea:	2272      	movs	r2, #114	; 0x72
   b70ec:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b70ee:	69e3      	ldr	r3, [r4, #28]
   b70f0:	2202      	movs	r2, #2
   b70f2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b70f4:	69e3      	ldr	r3, [r4, #28]
   b70f6:	0a32      	lsrs	r2, r6, #8
   b70f8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b70fa:	69e3      	ldr	r3, [r4, #28]
   b70fc:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b70fe:	69e1      	ldr	r1, [r4, #28]
   b7100:	2204      	movs	r2, #4
   b7102:	4620      	mov	r0, r4
   b7104:	f001 fb09 	bl	b871a <_ZN9TCPClient5writeEPKhj>
   b7108:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b710a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b710c:	bf18      	it	ne
   b710e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b7110:	f7ff fd16 	bl	b6b40 <_ZN4MQTT11MutexLockerD1Ev>
}
   b7114:	4628      	mov	r0, r5
   b7116:	b002      	add	sp, #8
   b7118:	bd70      	pop	{r4, r5, r6, pc}

000b711a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b711a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b711e:	ed2d 8b02 	vpush	{d8}
   b7122:	b087      	sub	sp, #28
   b7124:	af00      	add	r7, sp, #0
   b7126:	4604      	mov	r4, r0
    if (isConnected()) {
   b7128:	f7ff fe20 	bl	b6d6c <_ZN4MQTT11isConnectedEv>
   b712c:	4681      	mov	r9, r0
   b712e:	b1f8      	cbz	r0, b7170 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b7130:	4621      	mov	r1, r4
   b7132:	f107 0014 	add.w	r0, r7, #20
   b7136:	f7ff fcf8 	bl	b6b2a <_ZN4MQTT11MutexLockerC1EPS_>
   b713a:	f000 fb1b 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b713e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7144:	4353      	muls	r3, r2
   b7146:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b7148:	1a82      	subs	r2, r0, r2
   b714a:	429a      	cmp	r2, r3
   b714c:	4606      	mov	r6, r0
   b714e:	d803      	bhi.n	b7158 <_ZN4MQTT4loopEv+0x3e>
   b7150:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b7152:	1a82      	subs	r2, r0, r2
   b7154:	4293      	cmp	r3, r2
   b7156:	d221      	bcs.n	b719c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b7158:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b715c:	b17b      	cbz	r3, b717e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b715e:	4620      	mov	r0, r4
   b7160:	f001 fd60 	bl	b8c24 <_ZN9TCPClient4stopEv>
                return false;
   b7164:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b7168:	f107 0014 	add.w	r0, r7, #20
   b716c:	f7ff fce8 	bl	b6b40 <_ZN4MQTT11MutexLockerD1Ev>
}
   b7170:	4648      	mov	r0, r9
   b7172:	371c      	adds	r7, #28
   b7174:	46bd      	mov	sp, r7
   b7176:	ecbd 8b02 	vpop	{d8}
   b717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b717e:	69e2      	ldr	r2, [r4, #28]
   b7180:	21c0      	movs	r1, #192	; 0xc0
   b7182:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b7184:	69e2      	ldr	r2, [r4, #28]
   b7186:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b7188:	69e1      	ldr	r1, [r4, #28]
   b718a:	2202      	movs	r2, #2
   b718c:	4620      	mov	r0, r4
   b718e:	f001 fac4 	bl	b871a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b7192:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b7196:	2301      	movs	r3, #1
   b7198:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b719c:	4620      	mov	r0, r4
   b719e:	f001 fce7 	bl	b8b70 <_ZN9TCPClient9availableEv>
   b71a2:	2800      	cmp	r0, #0
   b71a4:	d0e0      	beq.n	b7168 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b71a6:	f107 0113 	add.w	r1, r7, #19
   b71aa:	4620      	mov	r0, r4
   b71ac:	f7ff fd34 	bl	b6c18 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b71b0:	4683      	mov	fp, r0
   b71b2:	2800      	cmp	r0, #0
   b71b4:	d0d8      	beq.n	b7168 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b71b6:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b71b8:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b71ba:	7819      	ldrb	r1, [r3, #0]
   b71bc:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b71c0:	2a30      	cmp	r2, #48	; 0x30
   b71c2:	d17f      	bne.n	b72c4 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b71c4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b71c8:	f1ba 0f00 	cmp.w	sl, #0
   b71cc:	d0cc      	beq.n	b7168 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b71ce:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b71d2:	466a      	mov	r2, sp
   b71d4:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b71d8:	eb03 020c 	add.w	r2, r3, ip
   b71dc:	7851      	ldrb	r1, [r2, #1]
   b71de:	7895      	ldrb	r5, [r2, #2]
   b71e0:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b71e4:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b71e6:	f105 0208 	add.w	r2, r5, #8
   b71ea:	4669      	mov	r1, sp
   b71ec:	08d2      	lsrs	r2, r2, #3
   b71ee:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b71f2:	4695      	mov	sp, r2
   b71f4:	f10c 0203 	add.w	r2, ip, #3
   b71f8:	60fa      	str	r2, [r7, #12]
   b71fa:	eb03 0e02 	add.w	lr, r3, r2
   b71fe:	eb0d 0205 	add.w	r2, sp, r5
   b7202:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b7204:	f8c7 d008 	str.w	sp, [r7, #8]
   b7208:	607a      	str	r2, [r7, #4]
   b720a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b720e:	428a      	cmp	r2, r1
   b7210:	d006      	beq.n	b7220 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b7212:	460a      	mov	r2, r1
   b7214:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b7218:	f802 8b01 	strb.w	r8, [r2], #1
   b721c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b721e:	e7f4      	b.n	b720a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b7220:	2200      	movs	r2, #0
   b7222:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b7224:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b7228:	68f9      	ldr	r1, [r7, #12]
   b722a:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b722e:	ebab 020c 	sub.w	r2, fp, ip
   b7232:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b7234:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b7238:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b723c:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b723e:	d125      	bne.n	b728c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b7240:	f813 e001 	ldrb.w	lr, [r3, r1]
   b7244:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b7246:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b7248:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b724c:	f10c 0105 	add.w	r1, ip, #5
   b7250:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b7252:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b7254:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b7258:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b725a:	69e3      	ldr	r3, [r4, #28]
   b725c:	2240      	movs	r2, #64	; 0x40
   b725e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b7260:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b7262:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b7266:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b726a:	69e3      	ldr	r3, [r4, #28]
   b726c:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b7270:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b7272:	69e3      	ldr	r3, [r4, #28]
   b7274:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b7278:	69e1      	ldr	r1, [r4, #28]
   b727a:	2204      	movs	r2, #4
   b727c:	4620      	mov	r0, r4
   b727e:	f001 fa4c 	bl	b871a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b7282:	6266      	str	r6, [r4, #36]	; 0x24
   b7284:	ee18 3a10 	vmov	r3, s16
   b7288:	469d      	mov	sp, r3
   b728a:	e76d      	b.n	b7168 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b728c:	f1b8 0f04 	cmp.w	r8, #4
   b7290:	d115      	bne.n	b72be <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b7292:	f813 e001 	ldrb.w	lr, [r3, r1]
   b7296:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b7298:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b729a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b729e:	f10c 0105 	add.w	r1, ip, #5
   b72a2:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b72a4:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b72a6:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b72aa:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b72ac:	69e3      	ldr	r3, [r4, #28]
   b72ae:	2250      	movs	r2, #80	; 0x50
   b72b0:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b72b2:	69e3      	ldr	r3, [r4, #28]
   b72b4:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b72b6:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b72ba:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b72bc:	e7d5      	b.n	b726a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b72be:	4419      	add	r1, r3
   b72c0:	47d0      	blx	sl
   b72c2:	e7df      	b.n	b7284 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b72c4:	2a50      	cmp	r2, #80	; 0x50
   b72c6:	d108      	bne.n	b72da <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b72c8:	789a      	ldrb	r2, [r3, #2]
   b72ca:	78d9      	ldrb	r1, [r3, #3]
   b72cc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b72d0:	b289      	uxth	r1, r1
   b72d2:	4620      	mov	r0, r4
   b72d4:	f7ff fed9 	bl	b708a <_ZN4MQTT14publishReleaseEt>
   b72d8:	e746      	b.n	b7168 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b72da:	2a40      	cmp	r2, #64	; 0x40
   b72dc:	d112      	bne.n	b7304 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b72de:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b72e0:	2a00      	cmp	r2, #0
   b72e2:	f43f af41 	beq.w	b7168 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b72e6:	f1bb 0f04 	cmp.w	fp, #4
   b72ea:	f47f af3d 	bne.w	b7168 <_ZN4MQTT4loopEv+0x4e>
   b72ee:	f011 0f06 	tst.w	r1, #6
   b72f2:	f47f af39 	bne.w	b7168 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b72f6:	7899      	ldrb	r1, [r3, #2]
   b72f8:	78d8      	ldrb	r0, [r3, #3]
   b72fa:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b72fe:	b280      	uxth	r0, r0
   b7300:	4790      	blx	r2
   b7302:	e731      	b.n	b7168 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b7304:	2a60      	cmp	r2, #96	; 0x60
   b7306:	d108      	bne.n	b731a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b7308:	789a      	ldrb	r2, [r3, #2]
   b730a:	78d9      	ldrb	r1, [r3, #3]
   b730c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b7310:	b289      	uxth	r1, r1
   b7312:	4620      	mov	r0, r4
   b7314:	f7ff fedd 	bl	b70d2 <_ZN4MQTT15publishCompleteEt>
   b7318:	e726      	b.n	b7168 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b731a:	2a70      	cmp	r2, #112	; 0x70
   b731c:	d0df      	beq.n	b72de <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b731e:	2a90      	cmp	r2, #144	; 0x90
   b7320:	f43f af22 	beq.w	b7168 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b7324:	2ac0      	cmp	r2, #192	; 0xc0
   b7326:	d10a      	bne.n	b733e <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b7328:	22d0      	movs	r2, #208	; 0xd0
   b732a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b732c:	69e3      	ldr	r3, [r4, #28]
   b732e:	2200      	movs	r2, #0
   b7330:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b7332:	69e1      	ldr	r1, [r4, #28]
   b7334:	2202      	movs	r2, #2
   b7336:	4620      	mov	r0, r4
   b7338:	f001 f9ef 	bl	b871a <_ZN9TCPClient5writeEPKhj>
   b733c:	e714      	b.n	b7168 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b733e:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b7340:	bf04      	itt	eq
   b7342:	2300      	moveq	r3, #0
   b7344:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b7348:	e70e      	b.n	b7168 <_ZN4MQTT4loopEv+0x4e>

000b734a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b734a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b734c:	4604      	mov	r4, r0
   b734e:	460f      	mov	r7, r1
   b7350:	4616      	mov	r6, r2
    if (isConnected()) {
   b7352:	f7ff fd0b 	bl	b6d6c <_ZN4MQTT11isConnectedEv>
   b7356:	4605      	mov	r5, r0
   b7358:	b310      	cbz	r0, b73a0 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b735a:	4621      	mov	r1, r4
   b735c:	a801      	add	r0, sp, #4
   b735e:	f7ff fbe4 	bl	b6b2a <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b7362:	8c23      	ldrh	r3, [r4, #32]
   b7364:	3301      	adds	r3, #1
   b7366:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b7368:	b1eb      	cbz	r3, b73a6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b736a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b736c:	8c23      	ldrh	r3, [r4, #32]
   b736e:	69e2      	ldr	r2, [r4, #28]
   b7370:	0a1b      	lsrs	r3, r3, #8
   b7372:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b7374:	69e3      	ldr	r3, [r4, #28]
   b7376:	8c22      	ldrh	r2, [r4, #32]
   b7378:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b737a:	69e2      	ldr	r2, [r4, #28]
   b737c:	2307      	movs	r3, #7
   b737e:	4639      	mov	r1, r7
   b7380:	4620      	mov	r0, r4
   b7382:	f7ff fcd7 	bl	b6d34 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b7386:	69e3      	ldr	r3, [r4, #28]
   b7388:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b738a:	3804      	subs	r0, #4
   b738c:	b283      	uxth	r3, r0
   b738e:	69e2      	ldr	r2, [r4, #28]
   b7390:	2182      	movs	r1, #130	; 0x82
   b7392:	4620      	mov	r0, r4
   b7394:	f7ff fc92 	bl	b6cbc <_ZN4MQTT5writeEhPht>
   b7398:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b739a:	a801      	add	r0, sp, #4
   b739c:	f7ff fbd0 	bl	b6b40 <_ZN4MQTT11MutexLockerD1Ev>
}
   b73a0:	4628      	mov	r0, r5
   b73a2:	b003      	add	sp, #12
   b73a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b73a6:	2301      	movs	r3, #1
   b73a8:	e7df      	b.n	b736a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b73aa <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b73aa:	2200      	movs	r2, #0
   b73ac:	f7ff bfcd 	b.w	b734a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b73b0 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b73b0:	f000 bcac 	b.w	b7d0c <delay>

000b73b4 <_Z11BlynkMillisv>:
   b73b4:	f000 b9de 	b.w	b7774 <HAL_Timer_Get_Milli_Seconds>

000b73b8 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b73b8:	4770      	bx	lr

000b73ba <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b73ba:	4770      	bx	lr

000b73bc <BlynkNoOpCbk>:
{}
   b73bc:	4770      	bx	lr
	...

000b73c0 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b73c0:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b73c2:	bf5a      	itte	pl
   b73c4:	4b02      	ldrpl	r3, [pc, #8]	; (b73d0 <GetReadHandler+0x10>)
   b73c6:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b73ca:	2000      	movmi	r0, #0
#endif
}
   b73cc:	4770      	bx	lr
   b73ce:	bf00      	nop
   b73d0:	000bc184 	.word	0x000bc184

000b73d4 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b73d4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b73d6:	bf5a      	itte	pl
   b73d8:	4b02      	ldrpl	r3, [pc, #8]	; (b73e4 <GetWriteHandler+0x10>)
   b73da:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b73de:	2000      	movmi	r0, #0
#endif
}
   b73e0:	4770      	bx	lr
   b73e2:	bf00      	nop
   b73e4:	000bc384 	.word	0x000bc384

000b73e8 <_ZN10BlynkTimer12isValidTimerEj>:
    bool _M_empty() const { return !_M_manager; }
   b73e8:	2334      	movs	r3, #52	; 0x34
   b73ea:	fb03 0101 	mla	r1, r3, r1, r0
    // -1 on failure (f == NULL) or no free timers
    int setupTimer(unsigned long d, const timer_callback& f, unsigned n);
    int setupTimer(unsigned long d,      timer_callback_p f, void* p, unsigned n);

    bool isValidTimer(unsigned id) {
        return timer[id].callback || timer[id].callback_p;
   b73ee:	68cb      	ldr	r3, [r1, #12]
   b73f0:	b923      	cbnz	r3, b73fc <_ZN10BlynkTimer12isValidTimerEj+0x14>
   b73f2:	6948      	ldr	r0, [r1, #20]
   b73f4:	3800      	subs	r0, #0
   b73f6:	bf18      	it	ne
   b73f8:	2001      	movne	r0, #1
   b73fa:	4770      	bx	lr
   b73fc:	2001      	movs	r0, #1
    }
   b73fe:	4770      	bx	lr

000b7400 <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   b7400:	4603      	mov	r3, r0
   b7402:	f500 7250 	add.w	r2, r0, #832	; 0x340
    _Function_base() : _M_manager(nullptr) { }
   b7406:	2100      	movs	r1, #0
   b7408:	60d9      	str	r1, [r3, #12]
   b740a:	3334      	adds	r3, #52	; 0x34
   b740c:	429a      	cmp	r2, r3
   b740e:	d1fb      	bne.n	b7408 <_ZN10BlynkTimerC1Ev+0x8>
   b7410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7414:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
{
}
   b7418:	4770      	bx	lr

000b741a <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
   b741a:	b513      	push	{r0, r1, r4, lr}
   b741c:	460b      	mov	r3, r1
   b741e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7420:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7424:	466c      	mov	r4, sp
   b7426:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b742a:	e893 0003 	ldmia.w	r3, {r0, r1}
   b742e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7432:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7436:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b743a:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b743c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b743e:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7440:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7442:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7444:	68d8      	ldr	r0, [r3, #12]
   b7446:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7448:	60d9      	str	r1, [r3, #12]
      }
   b744a:	b002      	add	sp, #8
   b744c:	bd10      	pop	{r4, pc}

000b744e <_ZN10BlynkTimer11deleteTimerEj>:
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   b744e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (timerId >= MAX_TIMERS) {
   b7450:	290f      	cmp	r1, #15
void SimpleTimer::deleteTimer(unsigned timerId) {
   b7452:	b093      	sub	sp, #76	; 0x4c
   b7454:	4604      	mov	r4, r0
   b7456:	460d      	mov	r5, r1
    if (timerId >= MAX_TIMERS) {
   b7458:	d83d      	bhi.n	b74d6 <_ZN10BlynkTimer11deleteTimerEj+0x88>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   b745a:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
   b745e:	2b00      	cmp	r3, #0
   b7460:	d039      	beq.n	b74d6 <_ZN10BlynkTimer11deleteTimerEj+0x88>
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (isValidTimer(timerId)) {
   b7462:	f7ff ffc1 	bl	b73e8 <_ZN10BlynkTimer12isValidTimerEj>
   b7466:	2800      	cmp	r0, #0
   b7468:	d035      	beq.n	b74d6 <_ZN10BlynkTimer11deleteTimerEj+0x88>
        timer[timerId] = timer_t();
   b746a:	2634      	movs	r6, #52	; 0x34
   b746c:	4632      	mov	r2, r6
   b746e:	4375      	muls	r5, r6
   b7470:	2100      	movs	r1, #0
   b7472:	a805      	add	r0, sp, #20
   b7474:	f002 f861 	bl	b953a <memset>
      unsigned long delay;              // delay value
      unsigned maxNumRuns;              // number of runs to be executed
      unsigned numRuns;                 // number of executed runs
      bool enabled;                  // true if enabled
      unsigned toBeCalled;              // deferred function call (sort of) - N.B.: only used in run()
    } timer_t;
   b7478:	1d2f      	adds	r7, r5, #4
    _Function_base() : _M_manager(nullptr) { }
   b747a:	2300      	movs	r3, #0
   b747c:	5163      	str	r3, [r4, r5]
	__x.swap(*this);
   b747e:	a901      	add	r1, sp, #4
   b7480:	a806      	add	r0, sp, #24
   b7482:	4427      	add	r7, r4
    _Function_base() : _M_manager(nullptr) { }
   b7484:	9303      	str	r3, [sp, #12]
	__x.swap(*this);
   b7486:	f7ff ffc8 	bl	b741a <_ZNSt8functionIFvvEE4swapERS1_>
	function(std::move(__x)).swap(*this);
   b748a:	4639      	mov	r1, r7
   b748c:	a801      	add	r0, sp, #4
   b748e:	1966      	adds	r6, r4, r5
   b7490:	f7ff ffc3 	bl	b741a <_ZNSt8functionIFvvEE4swapERS1_>
    class function<_Res(_ArgTypes...)>
   b7494:	a801      	add	r0, sp, #4
   b7496:	f7fd fba9 	bl	b4bec <_ZNSt14_Function_baseD1Ev>
   b749a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b749c:	6173      	str	r3, [r6, #20]
   b749e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b74a0:	61b3      	str	r3, [r6, #24]
   b74a2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b74a6:	7733      	strb	r3, [r6, #28]
   b74a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b74aa:	6233      	str	r3, [r6, #32]
   b74ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b74ae:	6273      	str	r3, [r6, #36]	; 0x24
   b74b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b74b2:	62b3      	str	r3, [r6, #40]	; 0x28
   b74b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   b74b8:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
   b74bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b74be:	6333      	str	r3, [r6, #48]	; 0x30
   b74c0:	a806      	add	r0, sp, #24
   b74c2:	f7fd fb93 	bl	b4bec <_ZNSt14_Function_baseD1Ev>
static inline unsigned long elapsed() { return BlynkMillis(); }
   b74c6:	f7ff ff75 	bl	b73b4 <_Z11BlynkMillisv>
        timer[timerId].prev_millis = elapsed();
   b74ca:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   b74cc:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   b74d0:	3b01      	subs	r3, #1
   b74d2:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    }
}
   b74d6:	b013      	add	sp, #76	; 0x4c
   b74d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b74da <_ZN10BlynkTimer3runEv>:
void SimpleTimer::run() {
   b74da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b74de:	4605      	mov	r5, r0
static inline unsigned long elapsed() { return BlynkMillis(); }
   b74e0:	f7ff ff68 	bl	b73b4 <_Z11BlynkMillisv>
    for (i = 0; i < MAX_TIMERS; i++) {
   b74e4:	2600      	movs	r6, #0
static inline unsigned long elapsed() { return BlynkMillis(); }
   b74e6:	4607      	mov	r7, r0
    for (i = 0; i < MAX_TIMERS; i++) {
   b74e8:	462c      	mov	r4, r5
        timer[i].toBeCalled = DEFCALL_DONTRUN;
   b74ea:	46b1      	mov	r9, r6
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   b74ec:	f04f 0801 	mov.w	r8, #1
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   b74f0:	f04f 0a02 	mov.w	sl, #2
        timer[i].toBeCalled = DEFCALL_DONTRUN;
   b74f4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
        if (isValidTimer(i)) {
   b74f8:	4631      	mov	r1, r6
   b74fa:	4628      	mov	r0, r5
   b74fc:	f7ff ff74 	bl	b73e8 <_ZN10BlynkTimer12isValidTimerEj>
   b7500:	b180      	cbz	r0, b7524 <_ZN10BlynkTimer3runEv+0x4a>
            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   b7502:	6823      	ldr	r3, [r4, #0]
   b7504:	6a21      	ldr	r1, [r4, #32]
   b7506:	1afa      	subs	r2, r7, r3
   b7508:	428a      	cmp	r2, r1
   b750a:	d30b      	bcc.n	b7524 <_ZN10BlynkTimer3runEv+0x4a>
                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
   b750c:	fbb2 f2f1 	udiv	r2, r2, r1
                timer[i].prev_millis += timer[i].delay * skipTimes;
   b7510:	fb01 3302 	mla	r3, r1, r2, r3
   b7514:	6023      	str	r3, [r4, #0]
                if (timer[i].enabled) {
   b7516:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b751a:	b11b      	cbz	r3, b7524 <_ZN10BlynkTimer3runEv+0x4a>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   b751c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b751e:	b9ea      	cbnz	r2, b755c <_ZN10BlynkTimer3runEv+0x82>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   b7520:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    for (i = 0; i < MAX_TIMERS; i++) {
   b7524:	3601      	adds	r6, #1
   b7526:	2e10      	cmp	r6, #16
   b7528:	f104 0434 	add.w	r4, r4, #52	; 0x34
   b752c:	d1e2      	bne.n	b74f4 <_ZN10BlynkTimer3runEv+0x1a>
   b752e:	1d2c      	adds	r4, r5, #4
    for (i = 0; i < MAX_TIMERS; i++) {
   b7530:	2600      	movs	r6, #0
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   b7532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7534:	b15b      	cbz	r3, b754e <_ZN10BlynkTimer3runEv+0x74>
        if (timer[i].hasParam)
   b7536:	7e23      	ldrb	r3, [r4, #24]
   b7538:	b1db      	cbz	r3, b7572 <_ZN10BlynkTimer3runEv+0x98>
            timer[i].callback_p(timer[i].param);
   b753a:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b753e:	4798      	blx	r3
        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   b7540:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7542:	2b02      	cmp	r3, #2
   b7544:	d103      	bne.n	b754e <_ZN10BlynkTimer3runEv+0x74>
            deleteTimer(i);
   b7546:	4631      	mov	r1, r6
   b7548:	4628      	mov	r0, r5
   b754a:	f7ff ff80 	bl	b744e <_ZN10BlynkTimer11deleteTimerEj>
    for (i = 0; i < MAX_TIMERS; i++) {
   b754e:	3601      	adds	r6, #1
   b7550:	2e10      	cmp	r6, #16
   b7552:	f104 0434 	add.w	r4, r4, #52	; 0x34
   b7556:	d1ec      	bne.n	b7532 <_ZN10BlynkTimer3runEv+0x58>
}
   b7558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   b755c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b755e:	429a      	cmp	r2, r3
   b7560:	d9e0      	bls.n	b7524 <_ZN10BlynkTimer3runEv+0x4a>
                        timer[i].numRuns++;
   b7562:	3301      	adds	r3, #1
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   b7564:	429a      	cmp	r2, r3
                        timer[i].numRuns++;
   b7566:	62a3      	str	r3, [r4, #40]	; 0x28
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   b7568:	bf8c      	ite	hi
   b756a:	4643      	movhi	r3, r8
   b756c:	4653      	movls	r3, sl
   b756e:	6323      	str	r3, [r4, #48]	; 0x30
   b7570:	e7d8      	b.n	b7524 <_ZN10BlynkTimer3runEv+0x4a>
      if (_M_empty())
   b7572:	68a3      	ldr	r3, [r4, #8]
   b7574:	b90b      	cbnz	r3, b757a <_ZN10BlynkTimer3runEv+0xa0>
	__throw_bad_function_call();
   b7576:	f001 feab 	bl	b92d0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b757a:	68e3      	ldr	r3, [r4, #12]
   b757c:	4620      	mov	r0, r4
   b757e:	e7de      	b.n	b753e <_ZN10BlynkTimer3runEv+0x64>

000b7580 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b7580:	b510      	push	{r4, lr}
   b7582:	4b06      	ldr	r3, [pc, #24]	; (b759c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b7584:	6003      	str	r3, [r0, #0]
   b7586:	4604      	mov	r4, r0
	if (mutex) {
   b7588:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b758a:	b108      	cbz	r0, b7590 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b758c:	f000 f8ba 	bl	b7704 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b7590:	4620      	mov	r0, r4
   b7592:	f7fe fdff 	bl	b6194 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b7596:	4620      	mov	r0, r4
   b7598:	bd10      	pop	{r4, pc}
   b759a:	bf00      	nop
   b759c:	000bc58c 	.word	0x000bc58c

000b75a0 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b75a0:	b510      	push	{r4, lr}
   b75a2:	4604      	mov	r4, r0
}
   b75a4:	f7ff ffec 	bl	b7580 <_ZN16OledWingAdafruitD1Ev>
   b75a8:	4620      	mov	r0, r4
   b75aa:	2170      	movs	r1, #112	; 0x70
   b75ac:	f7fd fac5 	bl	b4b3a <_ZdlPvj>
   b75b0:	4620      	mov	r0, r4
   b75b2:	bd10      	pop	{r4, pc}

000b75b4 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b75b4:	b530      	push	{r4, r5, lr}
   b75b6:	b085      	sub	sp, #20
   b75b8:	4604      	mov	r4, r0
   b75ba:	460d      	mov	r5, r1
   b75bc:	f001 fe22 	bl	b9204 <_Z19__fetch_global_Wirev>
   b75c0:	4a10      	ldr	r2, [pc, #64]	; (b7604 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b75c2:	4911      	ldr	r1, [pc, #68]	; (b7608 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b75c4:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b75c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b75cc:	2180      	movs	r1, #128	; 0x80
   b75ce:	4603      	mov	r3, r0
   b75d0:	9200      	str	r2, [sp, #0]
   b75d2:	4620      	mov	r0, r4
   b75d4:	2220      	movs	r2, #32
   b75d6:	f7fe fe55 	bl	b6284 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b75da:	4b0c      	ldr	r3, [pc, #48]	; (b760c <_ZN16OledWingAdafruitC1Ei+0x58>)
   b75dc:	6023      	str	r3, [r4, #0]
   b75de:	2300      	movs	r3, #0
   b75e0:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b75e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b75e8:	f7ff fa4e 	bl	b6a88 <_ZN8DebounceC1Ev>
   b75ec:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b75f0:	f7ff fa4a 	bl	b6a88 <_ZN8DebounceC1Ev>
   b75f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b75f8:	f7ff fa46 	bl	b6a88 <_ZN8DebounceC1Ev>
}
   b75fc:	4620      	mov	r0, r4
   b75fe:	b005      	add	sp, #20
   b7600:	bd30      	pop	{r4, r5, pc}
   b7602:	bf00      	nop
   b7604:	00061a80 	.word	0x00061a80
   b7608:	000186a0 	.word	0x000186a0
   b760c:	000bc58c 	.word	0x000bc58c

000b7610 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b7610:	b513      	push	{r0, r1, r4, lr}
   b7612:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b7614:	3050      	adds	r0, #80	; 0x50
   b7616:	f000 f86d 	bl	b76f4 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b761a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b761c:	07d9      	lsls	r1, r3, #31
   b761e:	d505      	bpl.n	b762c <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b7620:	2202      	movs	r2, #2
   b7622:	2104      	movs	r1, #4
   b7624:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b7628:	f7ff fa42 	bl	b6ab0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b762c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b762e:	079a      	lsls	r2, r3, #30
   b7630:	d505      	bpl.n	b763e <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b7632:	2200      	movs	r2, #0
   b7634:	2103      	movs	r1, #3
   b7636:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b763a:	f7ff fa39 	bl	b6ab0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b763e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b7640:	075b      	lsls	r3, r3, #29
   b7642:	d505      	bpl.n	b7650 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b7644:	2202      	movs	r2, #2
   b7646:	4611      	mov	r1, r2
   b7648:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b764c:	f7ff fa30 	bl	b6ab0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b7650:	2301      	movs	r3, #1
   b7652:	9300      	str	r3, [sp, #0]
   b7654:	223c      	movs	r2, #60	; 0x3c
   b7656:	2102      	movs	r1, #2
   b7658:	4620      	mov	r0, r4
   b765a:	f7fe ff1b 	bl	b6494 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b765e:	b002      	add	sp, #8
   b7660:	bd10      	pop	{r4, pc}

000b7662 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b7662:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b7664:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b7666:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b7668:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b766a:	d502      	bpl.n	b7672 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b766c:	3058      	adds	r0, #88	; 0x58
   b766e:	f7ff fa2c 	bl	b6aca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b7672:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b7674:	079a      	lsls	r2, r3, #30
   b7676:	d503      	bpl.n	b7680 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b7678:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b767c:	f7ff fa25 	bl	b6aca <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b7680:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b7682:	075b      	lsls	r3, r3, #29
   b7684:	d505      	bpl.n	b7692 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b7686:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b768a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b768e:	f7ff ba1c 	b.w	b6aca <_ZN8Debounce6updateEv>
}
   b7692:	bd10      	pop	{r4, pc}

000b7694 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b7694:	b508      	push	{r3, lr}
   b7696:	4b02      	ldr	r3, [pc, #8]	; (b76a0 <os_thread_yield+0xc>)
   b7698:	681b      	ldr	r3, [r3, #0]
   b769a:	68db      	ldr	r3, [r3, #12]
   b769c:	9301      	str	r3, [sp, #4]
   b769e:	bd08      	pop	{r3, pc}
   b76a0:	00030248 	.word	0x00030248

000b76a4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b76a4:	b508      	push	{r3, lr}
   b76a6:	4b02      	ldr	r3, [pc, #8]	; (b76b0 <os_thread_scheduling+0xc>)
   b76a8:	681b      	ldr	r3, [r3, #0]
   b76aa:	69db      	ldr	r3, [r3, #28]
   b76ac:	9301      	str	r3, [sp, #4]
   b76ae:	bd08      	pop	{r3, pc}
   b76b0:	00030248 	.word	0x00030248

000b76b4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b76b4:	b508      	push	{r3, lr}
   b76b6:	4b02      	ldr	r3, [pc, #8]	; (b76c0 <os_timer_create+0xc>)
   b76b8:	681b      	ldr	r3, [r3, #0]
   b76ba:	6a1b      	ldr	r3, [r3, #32]
   b76bc:	9301      	str	r3, [sp, #4]
   b76be:	bd08      	pop	{r3, pc}
   b76c0:	00030248 	.word	0x00030248

000b76c4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b76c4:	b508      	push	{r3, lr}
   b76c6:	4b02      	ldr	r3, [pc, #8]	; (b76d0 <os_timer_destroy+0xc>)
   b76c8:	681b      	ldr	r3, [r3, #0]
   b76ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b76cc:	9301      	str	r3, [sp, #4]
   b76ce:	bd08      	pop	{r3, pc}
   b76d0:	00030248 	.word	0x00030248

000b76d4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b76d4:	b508      	push	{r3, lr}
   b76d6:	4b02      	ldr	r3, [pc, #8]	; (b76e0 <os_timer_get_id+0xc>)
   b76d8:	681b      	ldr	r3, [r3, #0]
   b76da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b76dc:	9301      	str	r3, [sp, #4]
   b76de:	bd08      	pop	{r3, pc}
   b76e0:	00030248 	.word	0x00030248

000b76e4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b76e4:	b508      	push	{r3, lr}
   b76e6:	4b02      	ldr	r3, [pc, #8]	; (b76f0 <os_timer_change+0xc>)
   b76e8:	681b      	ldr	r3, [r3, #0]
   b76ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b76ec:	9301      	str	r3, [sp, #4]
   b76ee:	bd08      	pop	{r3, pc}
   b76f0:	00030248 	.word	0x00030248

000b76f4 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b76f4:	b508      	push	{r3, lr}
   b76f6:	4b02      	ldr	r3, [pc, #8]	; (b7700 <os_mutex_create+0xc>)
   b76f8:	681b      	ldr	r3, [r3, #0]
   b76fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b76fc:	9301      	str	r3, [sp, #4]
   b76fe:	bd08      	pop	{r3, pc}
   b7700:	00030248 	.word	0x00030248

000b7704 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b7704:	b508      	push	{r3, lr}
   b7706:	4b02      	ldr	r3, [pc, #8]	; (b7710 <os_mutex_destroy+0xc>)
   b7708:	681b      	ldr	r3, [r3, #0]
   b770a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b770c:	9301      	str	r3, [sp, #4]
   b770e:	bd08      	pop	{r3, pc}
   b7710:	00030248 	.word	0x00030248

000b7714 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b7714:	b508      	push	{r3, lr}
   b7716:	4b02      	ldr	r3, [pc, #8]	; (b7720 <os_mutex_lock+0xc>)
   b7718:	681b      	ldr	r3, [r3, #0]
   b771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b771c:	9301      	str	r3, [sp, #4]
   b771e:	bd08      	pop	{r3, pc}
   b7720:	00030248 	.word	0x00030248

000b7724 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b7724:	b508      	push	{r3, lr}
   b7726:	4b02      	ldr	r3, [pc, #8]	; (b7730 <os_mutex_unlock+0xc>)
   b7728:	681b      	ldr	r3, [r3, #0]
   b772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b772c:	9301      	str	r3, [sp, #4]
   b772e:	bd08      	pop	{r3, pc}
   b7730:	00030248 	.word	0x00030248

000b7734 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7734:	b508      	push	{r3, lr}
   b7736:	4b02      	ldr	r3, [pc, #8]	; (b7740 <os_mutex_recursive_create+0xc>)
   b7738:	681b      	ldr	r3, [r3, #0]
   b773a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b773c:	9301      	str	r3, [sp, #4]
   b773e:	bd08      	pop	{r3, pc}
   b7740:	00030248 	.word	0x00030248

000b7744 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b7744:	b508      	push	{r3, lr}
   b7746:	4b02      	ldr	r3, [pc, #8]	; (b7750 <os_timer_set_id+0xc>)
   b7748:	681b      	ldr	r3, [r3, #0]
   b774a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b774c:	9301      	str	r3, [sp, #4]
   b774e:	bd08      	pop	{r3, pc}
   b7750:	00030248 	.word	0x00030248

000b7754 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7754:	b508      	push	{r3, lr}
   b7756:	4b02      	ldr	r3, [pc, #8]	; (b7760 <HAL_RNG_GetRandomNumber+0xc>)
   b7758:	681b      	ldr	r3, [r3, #0]
   b775a:	685b      	ldr	r3, [r3, #4]
   b775c:	9301      	str	r3, [sp, #4]
   b775e:	bd08      	pop	{r3, pc}
   b7760:	00030218 	.word	0x00030218

000b7764 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7764:	b508      	push	{r3, lr}
   b7766:	4b02      	ldr	r3, [pc, #8]	; (b7770 <HAL_Delay_Microseconds+0xc>)
   b7768:	681b      	ldr	r3, [r3, #0]
   b776a:	68db      	ldr	r3, [r3, #12]
   b776c:	9301      	str	r3, [sp, #4]
   b776e:	bd08      	pop	{r3, pc}
   b7770:	00030218 	.word	0x00030218

000b7774 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7774:	b508      	push	{r3, lr}
   b7776:	4b02      	ldr	r3, [pc, #8]	; (b7780 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7778:	681b      	ldr	r3, [r3, #0]
   b777a:	695b      	ldr	r3, [r3, #20]
   b777c:	9301      	str	r3, [sp, #4]
   b777e:	bd08      	pop	{r3, pc}
   b7780:	00030218 	.word	0x00030218

000b7784 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b7784:	b508      	push	{r3, lr}
   b7786:	4b02      	ldr	r3, [pc, #8]	; (b7790 <hal_pin_validate_function+0xc>)
   b7788:	681b      	ldr	r3, [r3, #0]
   b778a:	685b      	ldr	r3, [r3, #4]
   b778c:	9301      	str	r3, [sp, #4]
   b778e:	bd08      	pop	{r3, pc}
   b7790:	0003022c 	.word	0x0003022c

000b7794 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b7794:	b508      	push	{r3, lr}
   b7796:	4b02      	ldr	r3, [pc, #8]	; (b77a0 <hal_gpio_mode+0xc>)
   b7798:	681b      	ldr	r3, [r3, #0]
   b779a:	689b      	ldr	r3, [r3, #8]
   b779c:	9301      	str	r3, [sp, #4]
   b779e:	bd08      	pop	{r3, pc}
   b77a0:	0003022c 	.word	0x0003022c

000b77a4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b77a4:	b508      	push	{r3, lr}
   b77a6:	4b02      	ldr	r3, [pc, #8]	; (b77b0 <hal_gpio_get_mode+0xc>)
   b77a8:	681b      	ldr	r3, [r3, #0]
   b77aa:	68db      	ldr	r3, [r3, #12]
   b77ac:	9301      	str	r3, [sp, #4]
   b77ae:	bd08      	pop	{r3, pc}
   b77b0:	0003022c 	.word	0x0003022c

000b77b4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b77b4:	b508      	push	{r3, lr}
   b77b6:	4b02      	ldr	r3, [pc, #8]	; (b77c0 <hal_gpio_write+0xc>)
   b77b8:	681b      	ldr	r3, [r3, #0]
   b77ba:	691b      	ldr	r3, [r3, #16]
   b77bc:	9301      	str	r3, [sp, #4]
   b77be:	bd08      	pop	{r3, pc}
   b77c0:	0003022c 	.word	0x0003022c

000b77c4 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b77c4:	b508      	push	{r3, lr}
   b77c6:	4b02      	ldr	r3, [pc, #8]	; (b77d0 <hal_gpio_read+0xc>)
   b77c8:	681b      	ldr	r3, [r3, #0]
   b77ca:	695b      	ldr	r3, [r3, #20]
   b77cc:	9301      	str	r3, [sp, #4]
   b77ce:	bd08      	pop	{r3, pc}
   b77d0:	0003022c 	.word	0x0003022c

000b77d4 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b77d4:	b508      	push	{r3, lr}
   b77d6:	4b02      	ldr	r3, [pc, #8]	; (b77e0 <HAL_DAC_Write+0xc>)
   b77d8:	681b      	ldr	r3, [r3, #0]
   b77da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b77dc:	9301      	str	r3, [sp, #4]
   b77de:	bd08      	pop	{r3, pc}
   b77e0:	0003022c 	.word	0x0003022c

000b77e4 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b77e4:	b508      	push	{r3, lr}
   b77e6:	4b02      	ldr	r3, [pc, #8]	; (b77f0 <hal_adc_read+0xc>)
   b77e8:	681b      	ldr	r3, [r3, #0]
   b77ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b77ec:	9301      	str	r3, [sp, #4]
   b77ee:	bd08      	pop	{r3, pc}
   b77f0:	0003022c 	.word	0x0003022c

000b77f4 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b77f4:	b508      	push	{r3, lr}
   b77f6:	4b02      	ldr	r3, [pc, #8]	; (b7800 <hal_pwm_write_ext+0xc>)
   b77f8:	681b      	ldr	r3, [r3, #0]
   b77fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b77fc:	9301      	str	r3, [sp, #4]
   b77fe:	bd08      	pop	{r3, pc}
   b7800:	0003022c 	.word	0x0003022c

000b7804 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b7804:	b508      	push	{r3, lr}
   b7806:	4b02      	ldr	r3, [pc, #8]	; (b7810 <hal_i2c_set_speed+0xc>)
   b7808:	681b      	ldr	r3, [r3, #0]
   b780a:	681b      	ldr	r3, [r3, #0]
   b780c:	9301      	str	r3, [sp, #4]
   b780e:	bd08      	pop	{r3, pc}
   b7810:	00030228 	.word	0x00030228

000b7814 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7814:	b508      	push	{r3, lr}
   b7816:	4b02      	ldr	r3, [pc, #8]	; (b7820 <hal_i2c_begin+0xc>)
   b7818:	681b      	ldr	r3, [r3, #0]
   b781a:	68db      	ldr	r3, [r3, #12]
   b781c:	9301      	str	r3, [sp, #4]
   b781e:	bd08      	pop	{r3, pc}
   b7820:	00030228 	.word	0x00030228

000b7824 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7824:	b508      	push	{r3, lr}
   b7826:	4b02      	ldr	r3, [pc, #8]	; (b7830 <hal_i2c_begin_transmission+0xc>)
   b7828:	681b      	ldr	r3, [r3, #0]
   b782a:	699b      	ldr	r3, [r3, #24]
   b782c:	9301      	str	r3, [sp, #4]
   b782e:	bd08      	pop	{r3, pc}
   b7830:	00030228 	.word	0x00030228

000b7834 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7834:	b508      	push	{r3, lr}
   b7836:	4b02      	ldr	r3, [pc, #8]	; (b7840 <hal_i2c_end_transmission+0xc>)
   b7838:	681b      	ldr	r3, [r3, #0]
   b783a:	69db      	ldr	r3, [r3, #28]
   b783c:	9301      	str	r3, [sp, #4]
   b783e:	bd08      	pop	{r3, pc}
   b7840:	00030228 	.word	0x00030228

000b7844 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7844:	b508      	push	{r3, lr}
   b7846:	4b02      	ldr	r3, [pc, #8]	; (b7850 <hal_i2c_write+0xc>)
   b7848:	681b      	ldr	r3, [r3, #0]
   b784a:	6a1b      	ldr	r3, [r3, #32]
   b784c:	9301      	str	r3, [sp, #4]
   b784e:	bd08      	pop	{r3, pc}
   b7850:	00030228 	.word	0x00030228

000b7854 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7854:	b508      	push	{r3, lr}
   b7856:	4b02      	ldr	r3, [pc, #8]	; (b7860 <hal_i2c_available+0xc>)
   b7858:	681b      	ldr	r3, [r3, #0]
   b785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b785c:	9301      	str	r3, [sp, #4]
   b785e:	bd08      	pop	{r3, pc}
   b7860:	00030228 	.word	0x00030228

000b7864 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7864:	b508      	push	{r3, lr}
   b7866:	4b02      	ldr	r3, [pc, #8]	; (b7870 <hal_i2c_read+0xc>)
   b7868:	681b      	ldr	r3, [r3, #0]
   b786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b786c:	9301      	str	r3, [sp, #4]
   b786e:	bd08      	pop	{r3, pc}
   b7870:	00030228 	.word	0x00030228

000b7874 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7874:	b508      	push	{r3, lr}
   b7876:	4b02      	ldr	r3, [pc, #8]	; (b7880 <hal_i2c_peek+0xc>)
   b7878:	681b      	ldr	r3, [r3, #0]
   b787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b787c:	9301      	str	r3, [sp, #4]
   b787e:	bd08      	pop	{r3, pc}
   b7880:	00030228 	.word	0x00030228

000b7884 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7884:	b508      	push	{r3, lr}
   b7886:	4b02      	ldr	r3, [pc, #8]	; (b7890 <hal_i2c_flush+0xc>)
   b7888:	681b      	ldr	r3, [r3, #0]
   b788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b788c:	9301      	str	r3, [sp, #4]
   b788e:	bd08      	pop	{r3, pc}
   b7890:	00030228 	.word	0x00030228

000b7894 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7894:	b508      	push	{r3, lr}
   b7896:	4b02      	ldr	r3, [pc, #8]	; (b78a0 <hal_i2c_is_enabled+0xc>)
   b7898:	681b      	ldr	r3, [r3, #0]
   b789a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b789c:	9301      	str	r3, [sp, #4]
   b789e:	bd08      	pop	{r3, pc}
   b78a0:	00030228 	.word	0x00030228

000b78a4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b78a4:	b508      	push	{r3, lr}
   b78a6:	4b02      	ldr	r3, [pc, #8]	; (b78b0 <hal_i2c_init+0xc>)
   b78a8:	681b      	ldr	r3, [r3, #0]
   b78aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b78ac:	9301      	str	r3, [sp, #4]
   b78ae:	bd08      	pop	{r3, pc}
   b78b0:	00030228 	.word	0x00030228

000b78b4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b78b4:	b508      	push	{r3, lr}
   b78b6:	4b02      	ldr	r3, [pc, #8]	; (b78c0 <if_index_to_name+0xc>)
   b78b8:	681b      	ldr	r3, [r3, #0]
   b78ba:	695b      	ldr	r3, [r3, #20]
   b78bc:	9301      	str	r3, [sp, #4]
   b78be:	bd08      	pop	{r3, pc}
   b78c0:	0003026c 	.word	0x0003026c

000b78c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b78c4:	b508      	push	{r3, lr}
   b78c6:	4b02      	ldr	r3, [pc, #8]	; (b78d0 <inet_inet_ntop+0xc>)
   b78c8:	681b      	ldr	r3, [r3, #0]
   b78ca:	695b      	ldr	r3, [r3, #20]
   b78cc:	9301      	str	r3, [sp, #4]
   b78ce:	bd08      	pop	{r3, pc}
   b78d0:	00030264 	.word	0x00030264

000b78d4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b78d4:	b508      	push	{r3, lr}
   b78d6:	4b02      	ldr	r3, [pc, #8]	; (b78e0 <inet_htonl+0xc>)
   b78d8:	681b      	ldr	r3, [r3, #0]
   b78da:	6a1b      	ldr	r3, [r3, #32]
   b78dc:	9301      	str	r3, [sp, #4]
   b78de:	bd08      	pop	{r3, pc}
   b78e0:	00030264 	.word	0x00030264

000b78e4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b78e4:	b508      	push	{r3, lr}
   b78e6:	4b02      	ldr	r3, [pc, #8]	; (b78f0 <inet_ntohs+0xc>)
   b78e8:	681b      	ldr	r3, [r3, #0]
   b78ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b78ec:	9301      	str	r3, [sp, #4]
   b78ee:	bd08      	pop	{r3, pc}
   b78f0:	00030264 	.word	0x00030264

000b78f4 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b78f4:	b508      	push	{r3, lr}
   b78f6:	4b02      	ldr	r3, [pc, #8]	; (b7900 <inet_htons+0xc>)
   b78f8:	681b      	ldr	r3, [r3, #0]
   b78fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b78fc:	9301      	str	r3, [sp, #4]
   b78fe:	bd08      	pop	{r3, pc}
   b7900:	00030264 	.word	0x00030264

000b7904 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7904:	b508      	push	{r3, lr}
   b7906:	4b02      	ldr	r3, [pc, #8]	; (b7910 <netdb_freeaddrinfo+0xc>)
   b7908:	681b      	ldr	r3, [r3, #0]
   b790a:	689b      	ldr	r3, [r3, #8]
   b790c:	9301      	str	r3, [sp, #4]
   b790e:	bd08      	pop	{r3, pc}
   b7910:	00030268 	.word	0x00030268

000b7914 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7914:	b508      	push	{r3, lr}
   b7916:	4b02      	ldr	r3, [pc, #8]	; (b7920 <netdb_getaddrinfo+0xc>)
   b7918:	681b      	ldr	r3, [r3, #0]
   b791a:	68db      	ldr	r3, [r3, #12]
   b791c:	9301      	str	r3, [sp, #4]
   b791e:	bd08      	pop	{r3, pc}
   b7920:	00030268 	.word	0x00030268

000b7924 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7924:	b508      	push	{r3, lr}
   b7926:	4b02      	ldr	r3, [pc, #8]	; (b7930 <sock_setsockopt+0xc>)
   b7928:	681b      	ldr	r3, [r3, #0]
   b792a:	699b      	ldr	r3, [r3, #24]
   b792c:	9301      	str	r3, [sp, #4]
   b792e:	bd08      	pop	{r3, pc}
   b7930:	00030238 	.word	0x00030238

000b7934 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7934:	b508      	push	{r3, lr}
   b7936:	4b02      	ldr	r3, [pc, #8]	; (b7940 <sock_close+0xc>)
   b7938:	681b      	ldr	r3, [r3, #0]
   b793a:	69db      	ldr	r3, [r3, #28]
   b793c:	9301      	str	r3, [sp, #4]
   b793e:	bd08      	pop	{r3, pc}
   b7940:	00030238 	.word	0x00030238

000b7944 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7944:	b508      	push	{r3, lr}
   b7946:	4b02      	ldr	r3, [pc, #8]	; (b7950 <sock_connect+0xc>)
   b7948:	681b      	ldr	r3, [r3, #0]
   b794a:	6a1b      	ldr	r3, [r3, #32]
   b794c:	9301      	str	r3, [sp, #4]
   b794e:	bd08      	pop	{r3, pc}
   b7950:	00030238 	.word	0x00030238

000b7954 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7954:	b508      	push	{r3, lr}
   b7956:	4b02      	ldr	r3, [pc, #8]	; (b7960 <sock_recv+0xc>)
   b7958:	681b      	ldr	r3, [r3, #0]
   b795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b795c:	9301      	str	r3, [sp, #4]
   b795e:	bd08      	pop	{r3, pc}
   b7960:	00030238 	.word	0x00030238

000b7964 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7964:	b508      	push	{r3, lr}
   b7966:	4b02      	ldr	r3, [pc, #8]	; (b7970 <sock_send+0xc>)
   b7968:	681b      	ldr	r3, [r3, #0]
   b796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b796c:	9301      	str	r3, [sp, #4]
   b796e:	bd08      	pop	{r3, pc}
   b7970:	00030238 	.word	0x00030238

000b7974 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7974:	b508      	push	{r3, lr}
   b7976:	4b02      	ldr	r3, [pc, #8]	; (b7980 <sock_socket+0xc>)
   b7978:	681b      	ldr	r3, [r3, #0]
   b797a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b797c:	9301      	str	r3, [sp, #4]
   b797e:	bd08      	pop	{r3, pc}
   b7980:	00030238 	.word	0x00030238

000b7984 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7984:	b508      	push	{r3, lr}
   b7986:	4b02      	ldr	r3, [pc, #8]	; (b7990 <hal_spi_begin+0xc>)
   b7988:	681b      	ldr	r3, [r3, #0]
   b798a:	681b      	ldr	r3, [r3, #0]
   b798c:	9301      	str	r3, [sp, #4]
   b798e:	bd08      	pop	{r3, pc}
   b7990:	00030230 	.word	0x00030230

000b7994 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7994:	b508      	push	{r3, lr}
   b7996:	4b02      	ldr	r3, [pc, #8]	; (b79a0 <hal_spi_transfer+0xc>)
   b7998:	681b      	ldr	r3, [r3, #0]
   b799a:	695b      	ldr	r3, [r3, #20]
   b799c:	9301      	str	r3, [sp, #4]
   b799e:	bd08      	pop	{r3, pc}
   b79a0:	00030230 	.word	0x00030230

000b79a4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b79a4:	b508      	push	{r3, lr}
   b79a6:	4b02      	ldr	r3, [pc, #8]	; (b79b0 <hal_spi_init+0xc>)
   b79a8:	681b      	ldr	r3, [r3, #0]
   b79aa:	69db      	ldr	r3, [r3, #28]
   b79ac:	9301      	str	r3, [sp, #4]
   b79ae:	bd08      	pop	{r3, pc}
   b79b0:	00030230 	.word	0x00030230

000b79b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b79b4:	b508      	push	{r3, lr}
   b79b6:	4b02      	ldr	r3, [pc, #8]	; (b79c0 <hal_spi_is_enabled+0xc>)
   b79b8:	681b      	ldr	r3, [r3, #0]
   b79ba:	6a1b      	ldr	r3, [r3, #32]
   b79bc:	9301      	str	r3, [sp, #4]
   b79be:	bd08      	pop	{r3, pc}
   b79c0:	00030230 	.word	0x00030230

000b79c4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b79c4:	b508      	push	{r3, lr}
   b79c6:	4b02      	ldr	r3, [pc, #8]	; (b79d0 <hal_spi_info+0xc>)
   b79c8:	681b      	ldr	r3, [r3, #0]
   b79ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b79cc:	9301      	str	r3, [sp, #4]
   b79ce:	bd08      	pop	{r3, pc}
   b79d0:	00030230 	.word	0x00030230

000b79d4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b79d4:	b508      	push	{r3, lr}
   b79d6:	4b02      	ldr	r3, [pc, #8]	; (b79e0 <hal_spi_set_settings+0xc>)
   b79d8:	681b      	ldr	r3, [r3, #0]
   b79da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b79dc:	9301      	str	r3, [sp, #4]
   b79de:	bd08      	pop	{r3, pc}
   b79e0:	00030230 	.word	0x00030230

000b79e4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b79e4:	b508      	push	{r3, lr}
   b79e6:	4b02      	ldr	r3, [pc, #8]	; (b79f0 <hal_spi_acquire+0xc>)
   b79e8:	681b      	ldr	r3, [r3, #0]
   b79ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b79ec:	9301      	str	r3, [sp, #4]
   b79ee:	bd08      	pop	{r3, pc}
   b79f0:	00030230 	.word	0x00030230

000b79f4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b79f4:	b508      	push	{r3, lr}
   b79f6:	4b02      	ldr	r3, [pc, #8]	; (b7a00 <hal_spi_release+0xc>)
   b79f8:	681b      	ldr	r3, [r3, #0]
   b79fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b79fc:	9301      	str	r3, [sp, #4]
   b79fe:	bd08      	pop	{r3, pc}
   b7a00:	00030230 	.word	0x00030230

000b7a04 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7a04:	b508      	push	{r3, lr}
   b7a06:	4b02      	ldr	r3, [pc, #8]	; (b7a10 <hal_usart_write+0xc>)
   b7a08:	681b      	ldr	r3, [r3, #0]
   b7a0a:	68db      	ldr	r3, [r3, #12]
   b7a0c:	9301      	str	r3, [sp, #4]
   b7a0e:	bd08      	pop	{r3, pc}
   b7a10:	0003023c 	.word	0x0003023c

000b7a14 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7a14:	b508      	push	{r3, lr}
   b7a16:	4b02      	ldr	r3, [pc, #8]	; (b7a20 <hal_usart_available+0xc>)
   b7a18:	681b      	ldr	r3, [r3, #0]
   b7a1a:	691b      	ldr	r3, [r3, #16]
   b7a1c:	9301      	str	r3, [sp, #4]
   b7a1e:	bd08      	pop	{r3, pc}
   b7a20:	0003023c 	.word	0x0003023c

000b7a24 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7a24:	b508      	push	{r3, lr}
   b7a26:	4b02      	ldr	r3, [pc, #8]	; (b7a30 <hal_usart_read+0xc>)
   b7a28:	681b      	ldr	r3, [r3, #0]
   b7a2a:	695b      	ldr	r3, [r3, #20]
   b7a2c:	9301      	str	r3, [sp, #4]
   b7a2e:	bd08      	pop	{r3, pc}
   b7a30:	0003023c 	.word	0x0003023c

000b7a34 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7a34:	b508      	push	{r3, lr}
   b7a36:	4b02      	ldr	r3, [pc, #8]	; (b7a40 <hal_usart_peek+0xc>)
   b7a38:	681b      	ldr	r3, [r3, #0]
   b7a3a:	699b      	ldr	r3, [r3, #24]
   b7a3c:	9301      	str	r3, [sp, #4]
   b7a3e:	bd08      	pop	{r3, pc}
   b7a40:	0003023c 	.word	0x0003023c

000b7a44 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7a44:	b508      	push	{r3, lr}
   b7a46:	4b02      	ldr	r3, [pc, #8]	; (b7a50 <hal_usart_flush+0xc>)
   b7a48:	681b      	ldr	r3, [r3, #0]
   b7a4a:	69db      	ldr	r3, [r3, #28]
   b7a4c:	9301      	str	r3, [sp, #4]
   b7a4e:	bd08      	pop	{r3, pc}
   b7a50:	0003023c 	.word	0x0003023c

000b7a54 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7a54:	b508      	push	{r3, lr}
   b7a56:	4b02      	ldr	r3, [pc, #8]	; (b7a60 <hal_usart_is_enabled+0xc>)
   b7a58:	681b      	ldr	r3, [r3, #0]
   b7a5a:	6a1b      	ldr	r3, [r3, #32]
   b7a5c:	9301      	str	r3, [sp, #4]
   b7a5e:	bd08      	pop	{r3, pc}
   b7a60:	0003023c 	.word	0x0003023c

000b7a64 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7a64:	b508      	push	{r3, lr}
   b7a66:	4b02      	ldr	r3, [pc, #8]	; (b7a70 <hal_usart_available_data_for_write+0xc>)
   b7a68:	681b      	ldr	r3, [r3, #0]
   b7a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7a6c:	9301      	str	r3, [sp, #4]
   b7a6e:	bd08      	pop	{r3, pc}
   b7a70:	0003023c 	.word	0x0003023c

000b7a74 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7a74:	b508      	push	{r3, lr}
   b7a76:	4b02      	ldr	r3, [pc, #8]	; (b7a80 <hal_usart_init_ex+0xc>)
   b7a78:	681b      	ldr	r3, [r3, #0]
   b7a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7a7c:	9301      	str	r3, [sp, #4]
   b7a7e:	bd08      	pop	{r3, pc}
   b7a80:	0003023c 	.word	0x0003023c

000b7a84 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7a84:	b508      	push	{r3, lr}
   b7a86:	4b02      	ldr	r3, [pc, #8]	; (b7a90 <HAL_USB_USART_Init+0xc>)
   b7a88:	681b      	ldr	r3, [r3, #0]
   b7a8a:	681b      	ldr	r3, [r3, #0]
   b7a8c:	9301      	str	r3, [sp, #4]
   b7a8e:	bd08      	pop	{r3, pc}
   b7a90:	0003024c 	.word	0x0003024c

000b7a94 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7a94:	b508      	push	{r3, lr}
   b7a96:	4b02      	ldr	r3, [pc, #8]	; (b7aa0 <HAL_USB_USART_Begin+0xc>)
   b7a98:	681b      	ldr	r3, [r3, #0]
   b7a9a:	685b      	ldr	r3, [r3, #4]
   b7a9c:	9301      	str	r3, [sp, #4]
   b7a9e:	bd08      	pop	{r3, pc}
   b7aa0:	0003024c 	.word	0x0003024c

000b7aa4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7aa4:	b508      	push	{r3, lr}
   b7aa6:	4b02      	ldr	r3, [pc, #8]	; (b7ab0 <HAL_USB_USART_Available_Data+0xc>)
   b7aa8:	681b      	ldr	r3, [r3, #0]
   b7aaa:	691b      	ldr	r3, [r3, #16]
   b7aac:	9301      	str	r3, [sp, #4]
   b7aae:	bd08      	pop	{r3, pc}
   b7ab0:	0003024c 	.word	0x0003024c

000b7ab4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7ab4:	b508      	push	{r3, lr}
   b7ab6:	4b02      	ldr	r3, [pc, #8]	; (b7ac0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7ab8:	681b      	ldr	r3, [r3, #0]
   b7aba:	695b      	ldr	r3, [r3, #20]
   b7abc:	9301      	str	r3, [sp, #4]
   b7abe:	bd08      	pop	{r3, pc}
   b7ac0:	0003024c 	.word	0x0003024c

000b7ac4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7ac4:	b508      	push	{r3, lr}
   b7ac6:	4b02      	ldr	r3, [pc, #8]	; (b7ad0 <HAL_USB_USART_Receive_Data+0xc>)
   b7ac8:	681b      	ldr	r3, [r3, #0]
   b7aca:	699b      	ldr	r3, [r3, #24]
   b7acc:	9301      	str	r3, [sp, #4]
   b7ace:	bd08      	pop	{r3, pc}
   b7ad0:	0003024c 	.word	0x0003024c

000b7ad4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7ad4:	b508      	push	{r3, lr}
   b7ad6:	4b02      	ldr	r3, [pc, #8]	; (b7ae0 <HAL_USB_USART_Send_Data+0xc>)
   b7ad8:	681b      	ldr	r3, [r3, #0]
   b7ada:	69db      	ldr	r3, [r3, #28]
   b7adc:	9301      	str	r3, [sp, #4]
   b7ade:	bd08      	pop	{r3, pc}
   b7ae0:	0003024c 	.word	0x0003024c

000b7ae4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7ae4:	b508      	push	{r3, lr}
   b7ae6:	4b02      	ldr	r3, [pc, #8]	; (b7af0 <HAL_USB_USART_Flush_Data+0xc>)
   b7ae8:	681b      	ldr	r3, [r3, #0]
   b7aea:	6a1b      	ldr	r3, [r3, #32]
   b7aec:	9301      	str	r3, [sp, #4]
   b7aee:	bd08      	pop	{r3, pc}
   b7af0:	0003024c 	.word	0x0003024c

000b7af4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b7af4:	b508      	push	{r3, lr}
   b7af6:	4b02      	ldr	r3, [pc, #8]	; (b7b00 <HAL_USB_USART_Is_Connected+0xc>)
   b7af8:	681b      	ldr	r3, [r3, #0]
   b7afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7afc:	9301      	str	r3, [sp, #4]
   b7afe:	bd08      	pop	{r3, pc}
   b7b00:	0003024c 	.word	0x0003024c

000b7b04 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7b04:	b508      	push	{r3, lr}
   b7b06:	4b02      	ldr	r3, [pc, #8]	; (b7b10 <panic_+0xc>)
   b7b08:	681b      	ldr	r3, [r3, #0]
   b7b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b0c:	9301      	str	r3, [sp, #4]
   b7b0e:	bd08      	pop	{r3, pc}
   b7b10:	00030260 	.word	0x00030260

000b7b14 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7b14:	b508      	push	{r3, lr}
   b7b16:	4b02      	ldr	r3, [pc, #8]	; (b7b20 <log_message+0xc>)
   b7b18:	681b      	ldr	r3, [r3, #0]
   b7b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7b1c:	9301      	str	r3, [sp, #4]
   b7b1e:	bd08      	pop	{r3, pc}
   b7b20:	00030260 	.word	0x00030260

000b7b24 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7b24:	b508      	push	{r3, lr}
   b7b26:	4b02      	ldr	r3, [pc, #8]	; (b7b30 <set_system_mode+0xc>)
   b7b28:	681b      	ldr	r3, [r3, #0]
   b7b2a:	685b      	ldr	r3, [r3, #4]
   b7b2c:	9301      	str	r3, [sp, #4]
   b7b2e:	bd08      	pop	{r3, pc}
   b7b30:	00030220 	.word	0x00030220

000b7b34 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7b34:	b508      	push	{r3, lr}
   b7b36:	4b02      	ldr	r3, [pc, #8]	; (b7b40 <system_delay_ms+0xc>)
   b7b38:	681b      	ldr	r3, [r3, #0]
   b7b3a:	695b      	ldr	r3, [r3, #20]
   b7b3c:	9301      	str	r3, [sp, #4]
   b7b3e:	bd08      	pop	{r3, pc}
   b7b40:	00030220 	.word	0x00030220

000b7b44 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7b44:	b508      	push	{r3, lr}
   b7b46:	4b02      	ldr	r3, [pc, #8]	; (b7b50 <system_thread_set_state+0xc>)
   b7b48:	681b      	ldr	r3, [r3, #0]
   b7b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b4c:	9301      	str	r3, [sp, #4]
   b7b4e:	bd08      	pop	{r3, pc}
   b7b50:	00030220 	.word	0x00030220

000b7b54 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7b54:	b508      	push	{r3, lr}
   b7b56:	4b03      	ldr	r3, [pc, #12]	; (b7b64 <system_ctrl_set_app_request_handler+0x10>)
   b7b58:	681b      	ldr	r3, [r3, #0]
   b7b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7b5e:	9301      	str	r3, [sp, #4]
   b7b60:	bd08      	pop	{r3, pc}
   b7b62:	0000      	.short	0x0000
   b7b64:	00030220 	.word	0x00030220

000b7b68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7b68:	b508      	push	{r3, lr}
   b7b6a:	4b03      	ldr	r3, [pc, #12]	; (b7b78 <system_ctrl_set_result+0x10>)
   b7b6c:	681b      	ldr	r3, [r3, #0]
   b7b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7b72:	9301      	str	r3, [sp, #4]
   b7b74:	bd08      	pop	{r3, pc}
   b7b76:	0000      	.short	0x0000
   b7b78:	00030220 	.word	0x00030220

000b7b7c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7b7c:	b508      	push	{r3, lr}
   b7b7e:	4b02      	ldr	r3, [pc, #8]	; (b7b88 <spark_process+0xc>)
   b7b80:	681b      	ldr	r3, [r3, #0]
   b7b82:	689b      	ldr	r3, [r3, #8]
   b7b84:	9301      	str	r3, [sp, #4]
   b7b86:	bd08      	pop	{r3, pc}
   b7b88:	00030244 	.word	0x00030244

000b7b8c <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7b8c:	b508      	push	{r3, lr}
   b7b8e:	4b02      	ldr	r3, [pc, #8]	; (b7b98 <spark_deviceID+0xc>)
   b7b90:	681b      	ldr	r3, [r3, #0]
   b7b92:	69db      	ldr	r3, [r3, #28]
   b7b94:	9301      	str	r3, [sp, #4]
   b7b96:	bd08      	pop	{r3, pc}
   b7b98:	00030244 	.word	0x00030244

000b7b9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7b9c:	b508      	push	{r3, lr}
   b7b9e:	4b02      	ldr	r3, [pc, #8]	; (b7ba8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7ba0:	681b      	ldr	r3, [r3, #0]
   b7ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7ba4:	9301      	str	r3, [sp, #4]
   b7ba6:	bd08      	pop	{r3, pc}
   b7ba8:	00030244 	.word	0x00030244

000b7bac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7bac:	b508      	push	{r3, lr}
   b7bae:	4b02      	ldr	r3, [pc, #8]	; (b7bb8 <network_connect+0xc>)
   b7bb0:	681b      	ldr	r3, [r3, #0]
   b7bb2:	685b      	ldr	r3, [r3, #4]
   b7bb4:	9301      	str	r3, [sp, #4]
   b7bb6:	bd08      	pop	{r3, pc}
   b7bb8:	00030240 	.word	0x00030240

000b7bbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7bbc:	b508      	push	{r3, lr}
   b7bbe:	4b02      	ldr	r3, [pc, #8]	; (b7bc8 <network_connecting+0xc>)
   b7bc0:	681b      	ldr	r3, [r3, #0]
   b7bc2:	689b      	ldr	r3, [r3, #8]
   b7bc4:	9301      	str	r3, [sp, #4]
   b7bc6:	bd08      	pop	{r3, pc}
   b7bc8:	00030240 	.word	0x00030240

000b7bcc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7bcc:	b508      	push	{r3, lr}
   b7bce:	4b02      	ldr	r3, [pc, #8]	; (b7bd8 <network_disconnect+0xc>)
   b7bd0:	681b      	ldr	r3, [r3, #0]
   b7bd2:	68db      	ldr	r3, [r3, #12]
   b7bd4:	9301      	str	r3, [sp, #4]
   b7bd6:	bd08      	pop	{r3, pc}
   b7bd8:	00030240 	.word	0x00030240

000b7bdc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7bdc:	b508      	push	{r3, lr}
   b7bde:	4b02      	ldr	r3, [pc, #8]	; (b7be8 <network_ready+0xc>)
   b7be0:	681b      	ldr	r3, [r3, #0]
   b7be2:	691b      	ldr	r3, [r3, #16]
   b7be4:	9301      	str	r3, [sp, #4]
   b7be6:	bd08      	pop	{r3, pc}
   b7be8:	00030240 	.word	0x00030240

000b7bec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7bec:	b508      	push	{r3, lr}
   b7bee:	4b02      	ldr	r3, [pc, #8]	; (b7bf8 <network_on+0xc>)
   b7bf0:	681b      	ldr	r3, [r3, #0]
   b7bf2:	695b      	ldr	r3, [r3, #20]
   b7bf4:	9301      	str	r3, [sp, #4]
   b7bf6:	bd08      	pop	{r3, pc}
   b7bf8:	00030240 	.word	0x00030240

000b7bfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7bfc:	b508      	push	{r3, lr}
   b7bfe:	4b02      	ldr	r3, [pc, #8]	; (b7c08 <network_off+0xc>)
   b7c00:	681b      	ldr	r3, [r3, #0]
   b7c02:	699b      	ldr	r3, [r3, #24]
   b7c04:	9301      	str	r3, [sp, #4]
   b7c06:	bd08      	pop	{r3, pc}
   b7c08:	00030240 	.word	0x00030240

000b7c0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7c0c:	b508      	push	{r3, lr}
   b7c0e:	4b02      	ldr	r3, [pc, #8]	; (b7c18 <network_listen+0xc>)
   b7c10:	681b      	ldr	r3, [r3, #0]
   b7c12:	69db      	ldr	r3, [r3, #28]
   b7c14:	9301      	str	r3, [sp, #4]
   b7c16:	bd08      	pop	{r3, pc}
   b7c18:	00030240 	.word	0x00030240

000b7c1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7c1c:	b508      	push	{r3, lr}
   b7c1e:	4b02      	ldr	r3, [pc, #8]	; (b7c28 <network_listening+0xc>)
   b7c20:	681b      	ldr	r3, [r3, #0]
   b7c22:	6a1b      	ldr	r3, [r3, #32]
   b7c24:	9301      	str	r3, [sp, #4]
   b7c26:	bd08      	pop	{r3, pc}
   b7c28:	00030240 	.word	0x00030240

000b7c2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7c2c:	b508      	push	{r3, lr}
   b7c2e:	4b02      	ldr	r3, [pc, #8]	; (b7c38 <network_set_listen_timeout+0xc>)
   b7c30:	681b      	ldr	r3, [r3, #0]
   b7c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c34:	9301      	str	r3, [sp, #4]
   b7c36:	bd08      	pop	{r3, pc}
   b7c38:	00030240 	.word	0x00030240

000b7c3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7c3c:	b508      	push	{r3, lr}
   b7c3e:	4b02      	ldr	r3, [pc, #8]	; (b7c48 <network_get_listen_timeout+0xc>)
   b7c40:	681b      	ldr	r3, [r3, #0]
   b7c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7c44:	9301      	str	r3, [sp, #4]
   b7c46:	bd08      	pop	{r3, pc}
   b7c48:	00030240 	.word	0x00030240

000b7c4c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7c4c:	b508      	push	{r3, lr}
   b7c4e:	4b02      	ldr	r3, [pc, #8]	; (b7c58 <network_is_on+0xc>)
   b7c50:	681b      	ldr	r3, [r3, #0]
   b7c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c54:	9301      	str	r3, [sp, #4]
   b7c56:	bd08      	pop	{r3, pc}
   b7c58:	00030240 	.word	0x00030240

000b7c5c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7c5c:	b508      	push	{r3, lr}
   b7c5e:	4b02      	ldr	r3, [pc, #8]	; (b7c68 <network_is_off+0xc>)
   b7c60:	681b      	ldr	r3, [r3, #0]
   b7c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c64:	9301      	str	r3, [sp, #4]
   b7c66:	bd08      	pop	{r3, pc}
   b7c68:	00030240 	.word	0x00030240

000b7c6c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7c6c:	b508      	push	{r3, lr}
   b7c6e:	4b02      	ldr	r3, [pc, #8]	; (b7c78 <malloc+0xc>)
   b7c70:	681b      	ldr	r3, [r3, #0]
   b7c72:	681b      	ldr	r3, [r3, #0]
   b7c74:	9301      	str	r3, [sp, #4]
   b7c76:	bd08      	pop	{r3, pc}
   b7c78:	0003021c 	.word	0x0003021c

000b7c7c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7c7c:	b508      	push	{r3, lr}
   b7c7e:	4b02      	ldr	r3, [pc, #8]	; (b7c88 <free+0xc>)
   b7c80:	681b      	ldr	r3, [r3, #0]
   b7c82:	685b      	ldr	r3, [r3, #4]
   b7c84:	9301      	str	r3, [sp, #4]
   b7c86:	bd08      	pop	{r3, pc}
   b7c88:	0003021c 	.word	0x0003021c

000b7c8c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7c8c:	b508      	push	{r3, lr}
   b7c8e:	4b02      	ldr	r3, [pc, #8]	; (b7c98 <realloc+0xc>)
   b7c90:	681b      	ldr	r3, [r3, #0]
   b7c92:	689b      	ldr	r3, [r3, #8]
   b7c94:	9301      	str	r3, [sp, #4]
   b7c96:	bd08      	pop	{r3, pc}
   b7c98:	0003021c 	.word	0x0003021c

000b7c9c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7c9c:	b508      	push	{r3, lr}
   b7c9e:	4b02      	ldr	r3, [pc, #8]	; (b7ca8 <snprintf+0xc>)
   b7ca0:	681b      	ldr	r3, [r3, #0]
   b7ca2:	69db      	ldr	r3, [r3, #28]
   b7ca4:	9301      	str	r3, [sp, #4]
   b7ca6:	bd08      	pop	{r3, pc}
   b7ca8:	0003021c 	.word	0x0003021c

000b7cac <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7cac:	b508      	push	{r3, lr}
   b7cae:	4b02      	ldr	r3, [pc, #8]	; (b7cb8 <vsnprintf+0xc>)
   b7cb0:	681b      	ldr	r3, [r3, #0]
   b7cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7cb4:	9301      	str	r3, [sp, #4]
   b7cb6:	bd08      	pop	{r3, pc}
   b7cb8:	0003021c 	.word	0x0003021c

000b7cbc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7cbc:	b508      	push	{r3, lr}
   b7cbe:	4b02      	ldr	r3, [pc, #8]	; (b7cc8 <abort+0xc>)
   b7cc0:	681b      	ldr	r3, [r3, #0]
   b7cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7cc4:	9301      	str	r3, [sp, #4]
   b7cc6:	bd08      	pop	{r3, pc}
   b7cc8:	0003021c 	.word	0x0003021c

000b7ccc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7ccc:	b508      	push	{r3, lr}
   b7cce:	4b02      	ldr	r3, [pc, #8]	; (b7cd8 <_malloc_r+0xc>)
   b7cd0:	681b      	ldr	r3, [r3, #0]
   b7cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7cd4:	9301      	str	r3, [sp, #4]
   b7cd6:	bd08      	pop	{r3, pc}
   b7cd8:	0003021c 	.word	0x0003021c

000b7cdc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7cdc:	b508      	push	{r3, lr}
   b7cde:	4b02      	ldr	r3, [pc, #8]	; (b7ce8 <__errno+0xc>)
   b7ce0:	681b      	ldr	r3, [r3, #0]
   b7ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7ce4:	9301      	str	r3, [sp, #4]
   b7ce6:	bd08      	pop	{r3, pc}
   b7ce8:	0003021c 	.word	0x0003021c

000b7cec <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7cec:	b508      	push	{r3, lr}
   b7cee:	4b02      	ldr	r3, [pc, #8]	; (b7cf8 <__assert_func+0xc>)
   b7cf0:	681b      	ldr	r3, [r3, #0]
   b7cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7cf4:	9301      	str	r3, [sp, #4]
   b7cf6:	bd08      	pop	{r3, pc}
   b7cf8:	0003021c 	.word	0x0003021c

000b7cfc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7cfc:	b508      	push	{r3, lr}
   b7cfe:	4b02      	ldr	r3, [pc, #8]	; (b7d08 <newlib_impure_ptr_callback+0xc>)
   b7d00:	681b      	ldr	r3, [r3, #0]
   b7d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7d04:	9301      	str	r3, [sp, #4]
   b7d06:	bd08      	pop	{r3, pc}
   b7d08:	0003021c 	.word	0x0003021c

000b7d0c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7d0c:	2100      	movs	r1, #0
   b7d0e:	f7ff bf11 	b.w	b7b34 <system_delay_ms>
	...

000b7d14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7d14:	4802      	ldr	r0, [pc, #8]	; (b7d20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7d16:	2300      	movs	r3, #0
   b7d18:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7d1a:	f7ff bd0b 	b.w	b7734 <os_mutex_recursive_create>
   b7d1e:	bf00      	nop
   b7d20:	2003e6c4 	.word	0x2003e6c4

000b7d24 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7d24:	2200      	movs	r2, #0
   b7d26:	6840      	ldr	r0, [r0, #4]
   b7d28:	4611      	mov	r1, r2
   b7d2a:	f7ff bf77 	b.w	b7c1c <network_listening>

000b7d2e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7d2e:	2200      	movs	r2, #0
   b7d30:	6840      	ldr	r0, [r0, #4]
   b7d32:	4611      	mov	r1, r2
   b7d34:	f7ff bf82 	b.w	b7c3c <network_get_listen_timeout>

000b7d38 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7d38:	6840      	ldr	r0, [r0, #4]
   b7d3a:	2200      	movs	r2, #0
   b7d3c:	f7ff bf76 	b.w	b7c2c <network_set_listen_timeout>

000b7d40 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7d40:	6840      	ldr	r0, [r0, #4]
   b7d42:	2200      	movs	r2, #0
   b7d44:	f081 0101 	eor.w	r1, r1, #1
   b7d48:	f7ff bf60 	b.w	b7c0c <network_listen>

000b7d4c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7d4c:	2300      	movs	r3, #0
   b7d4e:	6840      	ldr	r0, [r0, #4]
   b7d50:	461a      	mov	r2, r3
   b7d52:	4619      	mov	r1, r3
   b7d54:	f7ff bf52 	b.w	b7bfc <network_off>

000b7d58 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7d58:	2300      	movs	r3, #0
   b7d5a:	6840      	ldr	r0, [r0, #4]
   b7d5c:	461a      	mov	r2, r3
   b7d5e:	4619      	mov	r1, r3
   b7d60:	f7ff bf44 	b.w	b7bec <network_on>

000b7d64 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7d64:	2200      	movs	r2, #0
   b7d66:	6840      	ldr	r0, [r0, #4]
   b7d68:	4611      	mov	r1, r2
   b7d6a:	f7ff bf37 	b.w	b7bdc <network_ready>

000b7d6e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7d6e:	2200      	movs	r2, #0
   b7d70:	6840      	ldr	r0, [r0, #4]
   b7d72:	4611      	mov	r1, r2
   b7d74:	f7ff bf22 	b.w	b7bbc <network_connecting>

000b7d78 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7d78:	6840      	ldr	r0, [r0, #4]
   b7d7a:	2200      	movs	r2, #0
   b7d7c:	2102      	movs	r1, #2
   b7d7e:	f7ff bf25 	b.w	b7bcc <network_disconnect>

000b7d82 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7d82:	2300      	movs	r3, #0
   b7d84:	6840      	ldr	r0, [r0, #4]
   b7d86:	461a      	mov	r2, r3
   b7d88:	f7ff bf10 	b.w	b7bac <network_connect>

000b7d8c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7d8c:	4b02      	ldr	r3, [pc, #8]	; (b7d98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7d8e:	2203      	movs	r2, #3
   b7d90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7d92:	4a02      	ldr	r2, [pc, #8]	; (b7d9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7d94:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7d96:	4770      	bx	lr
   b7d98:	2003e6c8 	.word	0x2003e6c8
   b7d9c:	000bc5ec 	.word	0x000bc5ec

000b7da0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7da0:	4770      	bx	lr

000b7da2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7da4:	4606      	mov	r6, r0
   b7da6:	4615      	mov	r5, r2
   b7da8:	460c      	mov	r4, r1
   b7daa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7dac:	42bc      	cmp	r4, r7
   b7dae:	d006      	beq.n	b7dbe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7db0:	6833      	ldr	r3, [r6, #0]
   b7db2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7db6:	689b      	ldr	r3, [r3, #8]
   b7db8:	4630      	mov	r0, r6
   b7dba:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7dbc:	e7f6      	b.n	b7dac <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7dbe:	4628      	mov	r0, r5
   b7dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7dc2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7dc2:	7c00      	ldrb	r0, [r0, #16]
   b7dc4:	2200      	movs	r2, #0
   b7dc6:	f7ff bd3d 	b.w	b7844 <hal_i2c_write>

000b7dca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7dca:	7c00      	ldrb	r0, [r0, #16]
   b7dcc:	2100      	movs	r1, #0
   b7dce:	f7ff bd41 	b.w	b7854 <hal_i2c_available>

000b7dd2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7dd2:	7c00      	ldrb	r0, [r0, #16]
   b7dd4:	2100      	movs	r1, #0
   b7dd6:	f7ff bd45 	b.w	b7864 <hal_i2c_read>

000b7dda <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7dda:	7c00      	ldrb	r0, [r0, #16]
   b7ddc:	2100      	movs	r1, #0
   b7dde:	f7ff bd49 	b.w	b7874 <hal_i2c_peek>

000b7de2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7de2:	7c00      	ldrb	r0, [r0, #16]
   b7de4:	2100      	movs	r1, #0
   b7de6:	f7ff bd4d 	b.w	b7884 <hal_i2c_flush>

000b7dea <_ZN7TwoWireD0Ev>:
   b7dea:	b510      	push	{r4, lr}
   b7dec:	2114      	movs	r1, #20
   b7dee:	4604      	mov	r4, r0
   b7df0:	f7fc fea3 	bl	b4b3a <_ZdlPvj>
   b7df4:	4620      	mov	r0, r4
   b7df6:	bd10      	pop	{r4, pc}

000b7df8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7df8:	b538      	push	{r3, r4, r5, lr}
   b7dfa:	4604      	mov	r4, r0
   b7dfc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e02:	2200      	movs	r2, #0
   b7e04:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7e08:	4b09      	ldr	r3, [pc, #36]	; (b7e30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7e0a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7e0c:	4608      	mov	r0, r1
   b7e0e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7e10:	4629      	mov	r1, r5
   b7e12:	f7ff fd47 	bl	b78a4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7e16:	30bf      	adds	r0, #191	; 0xbf
   b7e18:	d108      	bne.n	b7e2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7e1a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7e1c:	07db      	lsls	r3, r3, #31
   b7e1e:	d505      	bpl.n	b7e2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7e20:	6868      	ldr	r0, [r5, #4]
   b7e22:	f7ff ff2b 	bl	b7c7c <free>
    free(conf.tx_buffer);
   b7e26:	68e8      	ldr	r0, [r5, #12]
   b7e28:	f7ff ff28 	bl	b7c7c <free>
}
   b7e2c:	4620      	mov	r0, r4
   b7e2e:	bd38      	pop	{r3, r4, r5, pc}
   b7e30:	000bc628 	.word	0x000bc628

000b7e34 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7e34:	7c00      	ldrb	r0, [r0, #16]
   b7e36:	2200      	movs	r2, #0
   b7e38:	f7ff bce4 	b.w	b7804 <hal_i2c_set_speed>

000b7e3c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7e3c:	2300      	movs	r3, #0
   b7e3e:	7c00      	ldrb	r0, [r0, #16]
   b7e40:	461a      	mov	r2, r3
   b7e42:	4619      	mov	r1, r3
   b7e44:	f7ff bce6 	b.w	b7814 <hal_i2c_begin>

000b7e48 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7e48:	7c00      	ldrb	r0, [r0, #16]
   b7e4a:	2200      	movs	r2, #0
   b7e4c:	f7ff bcea 	b.w	b7824 <hal_i2c_begin_transmission>

000b7e50 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7e50:	b2c9      	uxtb	r1, r1
   b7e52:	f7ff bff9 	b.w	b7e48 <_ZN7TwoWire17beginTransmissionEh>

000b7e56 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7e56:	7c00      	ldrb	r0, [r0, #16]
   b7e58:	2200      	movs	r2, #0
   b7e5a:	f7ff bceb 	b.w	b7834 <hal_i2c_end_transmission>

000b7e5e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7e5e:	2101      	movs	r1, #1
   b7e60:	f7ff bff9 	b.w	b7e56 <_ZN7TwoWire15endTransmissionEh>

000b7e64 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7e64:	4770      	bx	lr

000b7e66 <_ZN9IPAddressD0Ev>:
   b7e66:	b510      	push	{r4, lr}
   b7e68:	2118      	movs	r1, #24
   b7e6a:	4604      	mov	r4, r0
   b7e6c:	f7fc fe65 	bl	b4b3a <_ZdlPvj>
   b7e70:	4620      	mov	r0, r4
   b7e72:	bd10      	pop	{r4, pc}

000b7e74 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7e74:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7e76:	7d03      	ldrb	r3, [r0, #20]
   b7e78:	2b06      	cmp	r3, #6
{
   b7e7a:	b08d      	sub	sp, #52	; 0x34
   b7e7c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e7e:	f100 0704 	add.w	r7, r0, #4
   b7e82:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7e86:	d012      	beq.n	b7eae <_ZNK9IPAddress7printToER5Print+0x3a>
   b7e88:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7e8c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7e90:	220a      	movs	r2, #10
   b7e92:	4630      	mov	r0, r6
   b7e94:	f000 f969 	bl	b816a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7e98:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7e9a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7e9c:	d019      	beq.n	b7ed2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7e9e:	2c00      	cmp	r4, #0
   b7ea0:	d0f4      	beq.n	b7e8c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7ea2:	212e      	movs	r1, #46	; 0x2e
   b7ea4:	4630      	mov	r0, r6
   b7ea6:	f000 f951 	bl	b814c <_ZN5Print5printEc>
   b7eaa:	4404      	add	r4, r0
   b7eac:	e7ee      	b.n	b7e8c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7eae:	232f      	movs	r3, #47	; 0x2f
   b7eb0:	466a      	mov	r2, sp
   b7eb2:	4639      	mov	r1, r7
   b7eb4:	200a      	movs	r0, #10
		buf[0] = 0;
   b7eb6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7eba:	f7ff fd03 	bl	b78c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7ebe:	4668      	mov	r0, sp
   b7ec0:	f7fc fdda 	bl	b4a78 <strlen>
   b7ec4:	6833      	ldr	r3, [r6, #0]
   b7ec6:	4602      	mov	r2, r0
   b7ec8:	68db      	ldr	r3, [r3, #12]
   b7eca:	4669      	mov	r1, sp
   b7ecc:	4630      	mov	r0, r6
   b7ece:	4798      	blx	r3
   b7ed0:	4604      	mov	r4, r0
    }
    return n;
}
   b7ed2:	4620      	mov	r0, r4
   b7ed4:	b00d      	add	sp, #52	; 0x34
   b7ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ed8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7ed8:	b510      	push	{r4, lr}
   b7eda:	4b05      	ldr	r3, [pc, #20]	; (b7ef0 <_ZN9IPAddressC1Ev+0x18>)
   b7edc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7ede:	2211      	movs	r2, #17
   b7ee0:	f840 3b04 	str.w	r3, [r0], #4
   b7ee4:	2100      	movs	r1, #0
   b7ee6:	f001 fb28 	bl	b953a <memset>
}
   b7eea:	4620      	mov	r0, r4
   b7eec:	bd10      	pop	{r4, pc}
   b7eee:	bf00      	nop
   b7ef0:	000bc650 	.word	0x000bc650

000b7ef4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7ef4:	4603      	mov	r3, r0
   b7ef6:	4a07      	ldr	r2, [pc, #28]	; (b7f14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7ef8:	b510      	push	{r4, lr}
   b7efa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7efe:	f101 0210 	add.w	r2, r1, #16
   b7f02:	f851 4b04 	ldr.w	r4, [r1], #4
   b7f06:	f843 4b04 	str.w	r4, [r3], #4
   b7f0a:	4291      	cmp	r1, r2
   b7f0c:	d1f9      	bne.n	b7f02 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7f0e:	780a      	ldrb	r2, [r1, #0]
   b7f10:	701a      	strb	r2, [r3, #0]
}
   b7f12:	bd10      	pop	{r4, pc}
   b7f14:	000bc650 	.word	0x000bc650

000b7f18 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7f18:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7f1a:	2b04      	cmp	r3, #4
   b7f1c:	d104      	bne.n	b7f28 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7f1e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7f20:	3800      	subs	r0, #0
   b7f22:	bf18      	it	ne
   b7f24:	2001      	movne	r0, #1
   b7f26:	4770      	bx	lr
    } else if (version() == 6) {
   b7f28:	2b06      	cmp	r3, #6
   b7f2a:	d107      	bne.n	b7f3c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7f2c:	6843      	ldr	r3, [r0, #4]
   b7f2e:	b93b      	cbnz	r3, b7f40 <_ZNK9IPAddresscvbEv+0x28>
   b7f30:	6883      	ldr	r3, [r0, #8]
   b7f32:	b92b      	cbnz	r3, b7f40 <_ZNK9IPAddresscvbEv+0x28>
   b7f34:	68c3      	ldr	r3, [r0, #12]
   b7f36:	b91b      	cbnz	r3, b7f40 <_ZNK9IPAddresscvbEv+0x28>
   b7f38:	6900      	ldr	r0, [r0, #16]
   b7f3a:	e7f1      	b.n	b7f20 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7f3c:	2000      	movs	r0, #0
   b7f3e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7f40:	2001      	movs	r0, #1
}
   b7f42:	4770      	bx	lr

000b7f44 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7f44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7f46:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7f4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7f4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7f52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7f56:	2304      	movs	r3, #4
   b7f58:	6041      	str	r1, [r0, #4]
   b7f5a:	7503      	strb	r3, [r0, #20]
}
   b7f5c:	bd10      	pop	{r4, pc}
	...

000b7f60 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7f60:	b507      	push	{r0, r1, r2, lr}
   b7f62:	4b06      	ldr	r3, [pc, #24]	; (b7f7c <_ZN9IPAddressC1EPKh+0x1c>)
   b7f64:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7f66:	78cb      	ldrb	r3, [r1, #3]
   b7f68:	9300      	str	r3, [sp, #0]
   b7f6a:	788b      	ldrb	r3, [r1, #2]
   b7f6c:	784a      	ldrb	r2, [r1, #1]
   b7f6e:	7809      	ldrb	r1, [r1, #0]
   b7f70:	f7ff ffe8 	bl	b7f44 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7f74:	b003      	add	sp, #12
   b7f76:	f85d fb04 	ldr.w	pc, [sp], #4
   b7f7a:	bf00      	nop
   b7f7c:	000bc650 	.word	0x000bc650

000b7f80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7f80:	4b01      	ldr	r3, [pc, #4]	; (b7f88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7f82:	4a02      	ldr	r2, [pc, #8]	; (b7f8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7f84:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7f86:	4770      	bx	lr
   b7f88:	2003e6d0 	.word	0x2003e6d0
   b7f8c:	000bc65c 	.word	0x000bc65c

000b7f90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7f90:	2300      	movs	r3, #0
   b7f92:	6840      	ldr	r0, [r0, #4]
   b7f94:	461a      	mov	r2, r3
   b7f96:	f7ff be09 	b.w	b7bac <network_connect>

000b7f9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7f9a:	6840      	ldr	r0, [r0, #4]
   b7f9c:	2200      	movs	r2, #0
   b7f9e:	2102      	movs	r1, #2
   b7fa0:	f7ff be14 	b.w	b7bcc <network_disconnect>

000b7fa4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7fa4:	2200      	movs	r2, #0
   b7fa6:	6840      	ldr	r0, [r0, #4]
   b7fa8:	4611      	mov	r1, r2
   b7faa:	f7ff be07 	b.w	b7bbc <network_connecting>

000b7fae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7fae:	2200      	movs	r2, #0
   b7fb0:	6840      	ldr	r0, [r0, #4]
   b7fb2:	4611      	mov	r1, r2
   b7fb4:	f7ff be12 	b.w	b7bdc <network_ready>

000b7fb8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7fb8:	2300      	movs	r3, #0
   b7fba:	6840      	ldr	r0, [r0, #4]
   b7fbc:	461a      	mov	r2, r3
   b7fbe:	4619      	mov	r1, r3
   b7fc0:	f7ff be14 	b.w	b7bec <network_on>

000b7fc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7fc4:	2300      	movs	r3, #0
   b7fc6:	6840      	ldr	r0, [r0, #4]
   b7fc8:	461a      	mov	r2, r3
   b7fca:	4619      	mov	r1, r3
   b7fcc:	f7ff be16 	b.w	b7bfc <network_off>

000b7fd0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7fd0:	6840      	ldr	r0, [r0, #4]
   b7fd2:	2100      	movs	r1, #0
   b7fd4:	f7ff be3a 	b.w	b7c4c <network_is_on>

000b7fd8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7fd8:	6840      	ldr	r0, [r0, #4]
   b7fda:	2100      	movs	r1, #0
   b7fdc:	f7ff be3e 	b.w	b7c5c <network_is_off>

000b7fe0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7fe0:	6840      	ldr	r0, [r0, #4]
   b7fe2:	2200      	movs	r2, #0
   b7fe4:	f081 0101 	eor.w	r1, r1, #1
   b7fe8:	f7ff be10 	b.w	b7c0c <network_listen>

000b7fec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7fec:	6840      	ldr	r0, [r0, #4]
   b7fee:	2200      	movs	r2, #0
   b7ff0:	f7ff be1c 	b.w	b7c2c <network_set_listen_timeout>

000b7ff4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7ff4:	2200      	movs	r2, #0
   b7ff6:	6840      	ldr	r0, [r0, #4]
   b7ff8:	4611      	mov	r1, r2
   b7ffa:	f7ff be1f 	b.w	b7c3c <network_get_listen_timeout>

000b7ffe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7ffe:	2200      	movs	r2, #0
   b8000:	6840      	ldr	r0, [r0, #4]
   b8002:	4611      	mov	r1, r2
   b8004:	f7ff be0a 	b.w	b7c1c <network_listening>

000b8008 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b800c:	b095      	sub	sp, #84	; 0x54
   b800e:	4614      	mov	r4, r2
   b8010:	460d      	mov	r5, r1
   b8012:	4607      	mov	r7, r0
    IPAddress addr;
   b8014:	f7ff ff60 	bl	b7ed8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8018:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b801a:	221c      	movs	r2, #28
   b801c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b801e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8020:	f001 fa8b 	bl	b953a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8024:	2340      	movs	r3, #64	; 0x40
   b8026:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8028:	4620      	mov	r0, r4
   b802a:	466b      	mov	r3, sp
   b802c:	aa0c      	add	r2, sp, #48	; 0x30
   b802e:	2100      	movs	r1, #0
   b8030:	f7ff fc70 	bl	b7914 <netdb_getaddrinfo>
    if (!r) {
   b8034:	4604      	mov	r4, r0
   b8036:	2800      	cmp	r0, #0
   b8038:	d14b      	bne.n	b80d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b803a:	4602      	mov	r2, r0
   b803c:	2101      	movs	r1, #1
   b803e:	6868      	ldr	r0, [r5, #4]
   b8040:	f7ff fdcc 	bl	b7bdc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8044:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8046:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8048:	4622      	mov	r2, r4
   b804a:	6868      	ldr	r0, [r5, #4]
   b804c:	f7ff fdc6 	bl	b7bdc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8050:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8052:	4681      	mov	r9, r0
        bool ok = false;
   b8054:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8056:	2e00      	cmp	r6, #0
   b8058:	d03b      	beq.n	b80d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b805a:	2900      	cmp	r1, #0
   b805c:	d139      	bne.n	b80d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b805e:	6873      	ldr	r3, [r6, #4]
   b8060:	2b02      	cmp	r3, #2
   b8062:	d003      	beq.n	b806c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8064:	2b0a      	cmp	r3, #10
   b8066:	d011      	beq.n	b808c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8068:	69f6      	ldr	r6, [r6, #28]
   b806a:	e7f4      	b.n	b8056 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b806c:	f1b8 0f00 	cmp.w	r8, #0
   b8070:	d0fa      	beq.n	b8068 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8072:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8074:	a806      	add	r0, sp, #24
   b8076:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8078:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b807a:	f7ff ff71 	bl	b7f60 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b807e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8080:	1d3c      	adds	r4, r7, #4
   b8082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8084:	682b      	ldr	r3, [r5, #0]
   b8086:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8088:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b808a:	e7ed      	b.n	b8068 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b808c:	f1b9 0f00 	cmp.w	r9, #0
   b8090:	d0ea      	beq.n	b8068 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8092:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8094:	2210      	movs	r2, #16
   b8096:	a801      	add	r0, sp, #4
   b8098:	f001 fa4f 	bl	b953a <memset>
                    a.v = 6;
   b809c:	2306      	movs	r3, #6
   b809e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b80a2:	ad01      	add	r5, sp, #4
   b80a4:	f104 0308 	add.w	r3, r4, #8
   b80a8:	3418      	adds	r4, #24
   b80aa:	6818      	ldr	r0, [r3, #0]
   b80ac:	6859      	ldr	r1, [r3, #4]
   b80ae:	462a      	mov	r2, r5
   b80b0:	c203      	stmia	r2!, {r0, r1}
   b80b2:	3308      	adds	r3, #8
   b80b4:	42a3      	cmp	r3, r4
   b80b6:	4615      	mov	r5, r2
   b80b8:	d1f7      	bne.n	b80aa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b80ba:	a901      	add	r1, sp, #4
   b80bc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b80be:	ad07      	add	r5, sp, #28
   b80c0:	f7ff ff18 	bl	b7ef4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b80c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b80c6:	1d3c      	adds	r4, r7, #4
   b80c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b80ca:	682b      	ldr	r3, [r5, #0]
   b80cc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b80ce:	4649      	mov	r1, r9
   b80d0:	e7ca      	b.n	b8068 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b80d2:	9800      	ldr	r0, [sp, #0]
   b80d4:	f7ff fc16 	bl	b7904 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b80d8:	4638      	mov	r0, r7
   b80da:	b015      	add	sp, #84	; 0x54
   b80dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b80e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b80e0:	4b02      	ldr	r3, [pc, #8]	; (b80ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b80e2:	4a03      	ldr	r2, [pc, #12]	; (b80f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b80e4:	601a      	str	r2, [r3, #0]
   b80e6:	2200      	movs	r2, #0
   b80e8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b80ea:	4770      	bx	lr
   b80ec:	2003e6d4 	.word	0x2003e6d4
   b80f0:	000bc668 	.word	0x000bc668

000b80f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b80f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80f6:	4606      	mov	r6, r0
   b80f8:	460d      	mov	r5, r1
  size_t n = 0;
   b80fa:	188f      	adds	r7, r1, r2
   b80fc:	2400      	movs	r4, #0
  while (size--) {
   b80fe:	42bd      	cmp	r5, r7
   b8100:	d00c      	beq.n	b811c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8102:	6833      	ldr	r3, [r6, #0]
   b8104:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8108:	689b      	ldr	r3, [r3, #8]
   b810a:	4630      	mov	r0, r6
   b810c:	4798      	blx	r3
     if (chunk>=0)
   b810e:	1e03      	subs	r3, r0, #0
   b8110:	db01      	blt.n	b8116 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8112:	441c      	add	r4, r3
  while (size--) {
   b8114:	e7f3      	b.n	b80fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8116:	2c00      	cmp	r4, #0
   b8118:	bf08      	it	eq
   b811a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b811c:	4620      	mov	r0, r4
   b811e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8120 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8120:	b513      	push	{r0, r1, r4, lr}
   b8122:	4604      	mov	r4, r0
    }
   b8124:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8126:	b159      	cbz	r1, b8140 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8128:	9101      	str	r1, [sp, #4]
   b812a:	f7fc fca5 	bl	b4a78 <strlen>
   b812e:	6823      	ldr	r3, [r4, #0]
   b8130:	9901      	ldr	r1, [sp, #4]
   b8132:	68db      	ldr	r3, [r3, #12]
   b8134:	4602      	mov	r2, r0
   b8136:	4620      	mov	r0, r4
    }
   b8138:	b002      	add	sp, #8
   b813a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b813e:	4718      	bx	r3
    }
   b8140:	b002      	add	sp, #8
   b8142:	bd10      	pop	{r4, pc}

000b8144 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8144:	b508      	push	{r3, lr}
  return write(str);
   b8146:	f7ff ffeb 	bl	b8120 <_ZN5Print5writeEPKc>
}
   b814a:	bd08      	pop	{r3, pc}

000b814c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b814c:	6803      	ldr	r3, [r0, #0]
   b814e:	689b      	ldr	r3, [r3, #8]
   b8150:	4718      	bx	r3

000b8152 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8152:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8154:	210d      	movs	r1, #13
{
   b8156:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8158:	f7ff fff8 	bl	b814c <_ZN5Print5printEc>
  n += print('\n');
   b815c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b815e:	4604      	mov	r4, r0
  n += print('\n');
   b8160:	4628      	mov	r0, r5
   b8162:	f7ff fff3 	bl	b814c <_ZN5Print5printEc>
  return n;
}
   b8166:	4420      	add	r0, r4
   b8168:	bd38      	pop	{r3, r4, r5, pc}

000b816a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b816a:	b530      	push	{r4, r5, lr}
   b816c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b816e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8170:	2a01      	cmp	r2, #1
  *str = '\0';
   b8172:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8176:	bf98      	it	ls
   b8178:	220a      	movls	r2, #10
   b817a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b817c:	460d      	mov	r5, r1
   b817e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8182:	fb01 5312 	mls	r3, r1, r2, r5
   b8186:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b818a:	2b09      	cmp	r3, #9
   b818c:	bf94      	ite	ls
   b818e:	3330      	addls	r3, #48	; 0x30
   b8190:	3337      	addhi	r3, #55	; 0x37
   b8192:	b2db      	uxtb	r3, r3
  } while(n);
   b8194:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8196:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b819a:	d9ef      	bls.n	b817c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b819c:	4621      	mov	r1, r4
   b819e:	f7ff ffbf 	bl	b8120 <_ZN5Print5writeEPKc>
}
   b81a2:	b00b      	add	sp, #44	; 0x2c
   b81a4:	bd30      	pop	{r4, r5, pc}
	...

000b81a8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b81a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81ac:	ec55 4b10 	vmov	r4, r5, d0
   b81b0:	4606      	mov	r6, r0
   b81b2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b81b4:	ee10 2a10 	vmov	r2, s0
   b81b8:	ee10 0a10 	vmov	r0, s0
   b81bc:	462b      	mov	r3, r5
   b81be:	4629      	mov	r1, r5
   b81c0:	f7fc fb84 	bl	b48cc <__aeabi_dcmpun>
   b81c4:	b140      	cbz	r0, b81d8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b81c6:	4953      	ldr	r1, [pc, #332]	; (b8314 <_ZN5Print10printFloatEdh+0x16c>)
   b81c8:	4630      	mov	r0, r6
   b81ca:	f7ff ffa9 	bl	b8120 <_ZN5Print5writeEPKc>
   b81ce:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b81d0:	4650      	mov	r0, sl
   b81d2:	b003      	add	sp, #12
   b81d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b81d8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b81dc:	4b4e      	ldr	r3, [pc, #312]	; (b8318 <_ZN5Print10printFloatEdh+0x170>)
   b81de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b81e2:	4620      	mov	r0, r4
   b81e4:	4649      	mov	r1, r9
   b81e6:	f7fc fb71 	bl	b48cc <__aeabi_dcmpun>
   b81ea:	b948      	cbnz	r0, b8200 <_ZN5Print10printFloatEdh+0x58>
   b81ec:	4b4a      	ldr	r3, [pc, #296]	; (b8318 <_ZN5Print10printFloatEdh+0x170>)
   b81ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b81f2:	4620      	mov	r0, r4
   b81f4:	4649      	mov	r1, r9
   b81f6:	f7fc fb4b 	bl	b4890 <__aeabi_dcmple>
   b81fa:	b908      	cbnz	r0, b8200 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b81fc:	4947      	ldr	r1, [pc, #284]	; (b831c <_ZN5Print10printFloatEdh+0x174>)
   b81fe:	e7e3      	b.n	b81c8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b8200:	4b47      	ldr	r3, [pc, #284]	; (b8320 <_ZN5Print10printFloatEdh+0x178>)
   b8202:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b8206:	4620      	mov	r0, r4
   b8208:	4629      	mov	r1, r5
   b820a:	f7fc fb55 	bl	b48b8 <__aeabi_dcmpgt>
   b820e:	b108      	cbz	r0, b8214 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b8210:	4944      	ldr	r1, [pc, #272]	; (b8324 <_ZN5Print10printFloatEdh+0x17c>)
   b8212:	e7d9      	b.n	b81c8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b8214:	4b44      	ldr	r3, [pc, #272]	; (b8328 <_ZN5Print10printFloatEdh+0x180>)
   b8216:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b821a:	4620      	mov	r0, r4
   b821c:	4629      	mov	r1, r5
   b821e:	f7fc fb2d 	bl	b487c <__aeabi_dcmplt>
   b8222:	2800      	cmp	r0, #0
   b8224:	d1f4      	bne.n	b8210 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b8226:	2200      	movs	r2, #0
   b8228:	2300      	movs	r3, #0
   b822a:	4620      	mov	r0, r4
   b822c:	4629      	mov	r1, r5
   b822e:	f7fc fb25 	bl	b487c <__aeabi_dcmplt>
   b8232:	b1d0      	cbz	r0, b826a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b8234:	212d      	movs	r1, #45	; 0x2d
   b8236:	4630      	mov	r0, r6
   b8238:	f7ff ff88 	bl	b814c <_ZN5Print5printEc>
     number = -number;
   b823c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b8240:	4682      	mov	sl, r0
     number = -number;
   b8242:	461d      	mov	r5, r3
  double rounding = 0.5;
   b8244:	4939      	ldr	r1, [pc, #228]	; (b832c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b8246:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b8334 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b824a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b824e:	2000      	movs	r0, #0
    rounding /= 10.0;
   b8250:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b8254:	fa5f f38b 	uxtb.w	r3, fp
   b8258:	429f      	cmp	r7, r3
   b825a:	d908      	bls.n	b826e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b825c:	4642      	mov	r2, r8
   b825e:	464b      	mov	r3, r9
   b8260:	f7fc f9c4 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b8264:	f10b 0b01 	add.w	fp, fp, #1
   b8268:	e7f4      	b.n	b8254 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b826a:	4682      	mov	sl, r0
   b826c:	e7ea      	b.n	b8244 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b826e:	4622      	mov	r2, r4
   b8270:	462b      	mov	r3, r5
   b8272:	f7fb fedb 	bl	b402c <__adddf3>
   b8276:	460d      	mov	r5, r1
   b8278:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b827a:	f7fc fb65 	bl	b4948 <__aeabi_d2uiz>
   b827e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b8280:	f7fc f810 	bl	b42a4 <__aeabi_ui2d>
   b8284:	4602      	mov	r2, r0
   b8286:	460b      	mov	r3, r1
   b8288:	4620      	mov	r0, r4
   b828a:	4629      	mov	r1, r5
   b828c:	f7fb fecc 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b8290:	220a      	movs	r2, #10
   b8292:	4604      	mov	r4, r0
   b8294:	460d      	mov	r5, r1
   b8296:	4630      	mov	r0, r6
   b8298:	4641      	mov	r1, r8
   b829a:	f7ff ff66 	bl	b816a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b829e:	4482      	add	sl, r0
  if (digits > 0) {
   b82a0:	2f00      	cmp	r7, #0
   b82a2:	d095      	beq.n	b81d0 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b82a4:	4922      	ldr	r1, [pc, #136]	; (b8330 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b82a6:	f8df 908c 	ldr.w	r9, [pc, #140]	; b8334 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b82aa:	4630      	mov	r0, r6
   b82ac:	f7ff ff38 	bl	b8120 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b82b0:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b82b4:	4482      	add	sl, r0
  while (digits-- > 0)
   b82b6:	2f00      	cmp	r7, #0
   b82b8:	d08a      	beq.n	b81d0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b82ba:	4642      	mov	r2, r8
   b82bc:	464b      	mov	r3, r9
   b82be:	4620      	mov	r0, r4
   b82c0:	4629      	mov	r1, r5
   b82c2:	f7fc f869 	bl	b4398 <__aeabi_dmul>
   b82c6:	4604      	mov	r4, r0
   b82c8:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b82ca:	f7fc fb15 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b82ce:	f1b0 0b00 	subs.w	fp, r0, #0
   b82d2:	da1c      	bge.n	b830e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b82d4:	212d      	movs	r1, #45	; 0x2d
   b82d6:	4630      	mov	r0, r6
   b82d8:	f7ff ff38 	bl	b814c <_ZN5Print5printEc>
            val = -n;
   b82dc:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b82e0:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b82e2:	220a      	movs	r2, #10
   b82e4:	4630      	mov	r0, r6
   b82e6:	9301      	str	r3, [sp, #4]
   b82e8:	f7ff ff3f 	bl	b816a <_ZN5Print11printNumberEmh>
   b82ec:	9b01      	ldr	r3, [sp, #4]
   b82ee:	4418      	add	r0, r3
    n += print(toPrint);
   b82f0:	4482      	add	sl, r0
    remainder -= toPrint;
   b82f2:	4658      	mov	r0, fp
   b82f4:	f7fb ffe6 	bl	b42c4 <__aeabi_i2d>
   b82f8:	4602      	mov	r2, r0
   b82fa:	460b      	mov	r3, r1
   b82fc:	4620      	mov	r0, r4
   b82fe:	4629      	mov	r1, r5
   b8300:	f7fb fe92 	bl	b4028 <__aeabi_dsub>
   b8304:	3f01      	subs	r7, #1
   b8306:	4604      	mov	r4, r0
   b8308:	460d      	mov	r5, r1
   b830a:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b830c:	e7d3      	b.n	b82b6 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b830e:	4659      	mov	r1, fp
        size_t t = 0;
   b8310:	2300      	movs	r3, #0
   b8312:	e7e6      	b.n	b82e2 <_ZN5Print10printFloatEdh+0x13a>
   b8314:	000bc69c 	.word	0x000bc69c
   b8318:	7fefffff 	.word	0x7fefffff
   b831c:	000bc6a0 	.word	0x000bc6a0
   b8320:	41efffff 	.word	0x41efffff
   b8324:	000bc6a4 	.word	0x000bc6a4
   b8328:	c1efffff 	.word	0xc1efffff
   b832c:	3fe00000 	.word	0x3fe00000
   b8330:	000bb5e3 	.word	0x000bb5e3
   b8334:	40240000 	.word	0x40240000

000b8338 <_ZN5Print5printEfi>:
{
   b8338:	b538      	push	{r3, r4, r5, lr}
   b833a:	4604      	mov	r4, r0
   b833c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b8340:	b2cd      	uxtb	r5, r1
   b8342:	f7fb ffd1 	bl	b42e8 <__aeabi_f2d>
   b8346:	ec41 0b10 	vmov	d0, r0, r1
   b834a:	4629      	mov	r1, r5
   b834c:	4620      	mov	r0, r4
}
   b834e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b8352:	f7ff bf29 	b.w	b81a8 <_ZN5Print10printFloatEdh>

000b8356 <_ZN5Print7printlnEdi>:
{
   b8356:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b8358:	b2c9      	uxtb	r1, r1
{
   b835a:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b835c:	f7ff ff24 	bl	b81a8 <_ZN5Print10printFloatEdh>
   b8360:	4604      	mov	r4, r0
  n += println();
   b8362:	4628      	mov	r0, r5
   b8364:	f7ff fef5 	bl	b8152 <_ZN5Print7printlnEv>
}
   b8368:	4420      	add	r0, r4
   b836a:	bd38      	pop	{r3, r4, r5, pc}

000b836c <_ZN5Print7printlnEfi>:
{
   b836c:	b538      	push	{r3, r4, r5, lr}
   b836e:	4604      	mov	r4, r0
   b8370:	ee10 0a10 	vmov	r0, s0
   b8374:	460d      	mov	r5, r1
    return println((double)num, digits);
   b8376:	f7fb ffb7 	bl	b42e8 <__aeabi_f2d>
   b837a:	ec41 0b10 	vmov	d0, r0, r1
   b837e:	4629      	mov	r1, r5
   b8380:	4620      	mov	r0, r4
}
   b8382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b8386:	f7ff bfe6 	b.w	b8356 <_ZN5Print7printlnEdi>

000b838a <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b838a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b838e:	b086      	sub	sp, #24
   b8390:	af00      	add	r7, sp, #0
   b8392:	4605      	mov	r5, r0
   b8394:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8396:	1d38      	adds	r0, r7, #4
   b8398:	2114      	movs	r1, #20
{
   b839a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b839c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b839e:	f7ff fc85 	bl	b7cac <vsnprintf>

    if (n<bufsize)
   b83a2:	2813      	cmp	r0, #19
   b83a4:	d80e      	bhi.n	b83c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b83a6:	1d39      	adds	r1, r7, #4
   b83a8:	4628      	mov	r0, r5
   b83aa:	f7ff feb9 	bl	b8120 <_ZN5Print5writeEPKc>
   b83ae:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b83b0:	b11e      	cbz	r6, b83ba <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b83b2:	4628      	mov	r0, r5
   b83b4:	f7ff fecd 	bl	b8152 <_ZN5Print7printlnEv>
   b83b8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b83ba:	4620      	mov	r0, r4
   b83bc:	3718      	adds	r7, #24
   b83be:	46bd      	mov	sp, r7
   b83c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b83c4:	f100 0308 	add.w	r3, r0, #8
   b83c8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b83cc:	46e8      	mov	r8, sp
        char bigger[n+1];
   b83ce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b83d2:	4622      	mov	r2, r4
   b83d4:	1c41      	adds	r1, r0, #1
   b83d6:	683b      	ldr	r3, [r7, #0]
   b83d8:	4668      	mov	r0, sp
   b83da:	f7ff fc67 	bl	b7cac <vsnprintf>
  return write(str);
   b83de:	4669      	mov	r1, sp
   b83e0:	4628      	mov	r0, r5
   b83e2:	f7ff fe9d 	bl	b8120 <_ZN5Print5writeEPKc>
   b83e6:	4604      	mov	r4, r0
   b83e8:	46c5      	mov	sp, r8
   b83ea:	e7e1      	b.n	b83b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b83ec <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b83ec:	4b01      	ldr	r3, [pc, #4]	; (b83f4 <_GLOBAL__sub_I_RGB+0x8>)
   b83ee:	2200      	movs	r2, #0
   b83f0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b83f2:	4770      	bx	lr
   b83f4:	2003e6dc 	.word	0x2003e6dc

000b83f8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b83f8:	2100      	movs	r1, #0
   b83fa:	f7ff bafb 	b.w	b79f4 <hal_spi_release>

000b83fe <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b83fe:	2100      	movs	r1, #0
   b8400:	f7ff baf0 	b.w	b79e4 <hal_spi_acquire>

000b8404 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8404:	b510      	push	{r4, lr}
   b8406:	4604      	mov	r4, r0
   b8408:	4608      	mov	r0, r1
{
    _spi = spi;
   b840a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b840c:	f7ff faca 	bl	b79a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8410:	2300      	movs	r3, #0
   b8412:	6063      	str	r3, [r4, #4]
}
   b8414:	4620      	mov	r0, r4
   b8416:	bd10      	pop	{r4, pc}

000b8418 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8418:	b513      	push	{r0, r1, r4, lr}
   b841a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b841c:	7800      	ldrb	r0, [r0, #0]
   b841e:	f7ff ffee 	bl	b83fe <_ZN8SPIClass4lockEv.isra.0>
   b8422:	b958      	cbnz	r0, b843c <_ZN8SPIClass5beginEv+0x24>
   b8424:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8426:	9001      	str	r0, [sp, #4]
   b8428:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b842c:	f7ff faaa 	bl	b7984 <hal_spi_begin>
        unlock();
   b8430:	9801      	ldr	r0, [sp, #4]
    }
}
   b8432:	b002      	add	sp, #8
   b8434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8438:	f7ff bfde 	b.w	b83f8 <_ZN8SPIClass6unlockEv.isra.0>
   b843c:	b002      	add	sp, #8
   b843e:	bd10      	pop	{r4, pc}

000b8440 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b8440:	7800      	ldrb	r0, [r0, #0]
   b8442:	f7ff bfd9 	b.w	b83f8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b8448 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8448:	0840      	lsrs	r0, r0, #1
{
   b844a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b844c:	6018      	str	r0, [r3, #0]
   b844e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8450:	6818      	ldr	r0, [r3, #0]
   b8452:	4288      	cmp	r0, r1
   b8454:	b2e5      	uxtb	r5, r4
   b8456:	d906      	bls.n	b8466 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8458:	3401      	adds	r4, #1
   b845a:	2c08      	cmp	r4, #8
   b845c:	d002      	beq.n	b8464 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b845e:	0840      	lsrs	r0, r0, #1
   b8460:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8462:	e7f5      	b.n	b8450 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8464:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8466:	4b02      	ldr	r3, [pc, #8]	; (b8470 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8468:	5d5b      	ldrb	r3, [r3, r5]
   b846a:	7013      	strb	r3, [r2, #0]
}
   b846c:	bd30      	pop	{r4, r5, pc}
   b846e:	bf00      	nop
   b8470:	000bc6a8 	.word	0x000bc6a8

000b8474 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b8474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8478:	4606      	mov	r6, r0
   b847a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b847c:	7800      	ldrb	r0, [r0, #0]
{
   b847e:	460c      	mov	r4, r1
    CHECK(lock());
   b8480:	f7ff ffbd 	bl	b83fe <_ZN8SPIClass4lockEv.isra.0>
   b8484:	2800      	cmp	r0, #0
   b8486:	db1b      	blt.n	b84c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b8488:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b848a:	2214      	movs	r2, #20
   b848c:	2100      	movs	r1, #0
   b848e:	a809      	add	r0, sp, #36	; 0x24
   b8490:	f001 f853 	bl	b953a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8494:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8496:	2200      	movs	r2, #0
   b8498:	a909      	add	r1, sp, #36	; 0x24
   b849a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b849c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b84a0:	f7ff fa90 	bl	b79c4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b84a4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b84a8:	b113      	cbz	r3, b84b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b84aa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b84ae:	b155      	cbz	r5, b84c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b84b0:	2700      	movs	r7, #0
   b84b2:	46b9      	mov	r9, r7
   b84b4:	46b8      	mov	r8, r7
   b84b6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b84b8:	7923      	ldrb	r3, [r4, #4]
   b84ba:	b15d      	cbz	r5, b84d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b84bc:	b1c3      	cbz	r3, b84f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b84be:	2000      	movs	r0, #0
}
   b84c0:	b00f      	add	sp, #60	; 0x3c
   b84c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b84c6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b84ca:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b84ce:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b84d2:	e7f1      	b.n	b84b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b84d4:	2b00      	cmp	r3, #0
   b84d6:	d135      	bne.n	b8544 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b84d8:	68a3      	ldr	r3, [r4, #8]
   b84da:	4543      	cmp	r3, r8
   b84dc:	d108      	bne.n	b84f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b84de:	f88d 9020 	strb.w	r9, [sp, #32]
   b84e2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b84e6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b84ea:	89a3      	ldrh	r3, [r4, #12]
   b84ec:	429a      	cmp	r2, r3
   b84ee:	d0e6      	beq.n	b84be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b84f0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b84f2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b84f4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b84f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b84fa:	ab04      	add	r3, sp, #16
   b84fc:	f10d 020f 	add.w	r2, sp, #15
   b8500:	f7ff ffa2 	bl	b8448 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8504:	7921      	ldrb	r1, [r4, #4]
   b8506:	b985      	cbnz	r5, b852a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8508:	b989      	cbnz	r1, b852e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b850a:	68a3      	ldr	r3, [r4, #8]
   b850c:	4543      	cmp	r3, r8
   b850e:	d30e      	bcc.n	b852e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8510:	f88d 9020 	strb.w	r9, [sp, #32]
   b8514:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8518:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b851c:	89a3      	ldrh	r3, [r4, #12]
   b851e:	429a      	cmp	r2, r3
   b8520:	d105      	bne.n	b852e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8522:	9b04      	ldr	r3, [sp, #16]
   b8524:	4543      	cmp	r3, r8
   b8526:	d102      	bne.n	b852e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8528:	e7c9      	b.n	b84be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b852a:	2900      	cmp	r1, #0
   b852c:	d1f9      	bne.n	b8522 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b852e:	2300      	movs	r3, #0
   b8530:	9301      	str	r3, [sp, #4]
   b8532:	7b63      	ldrb	r3, [r4, #13]
   b8534:	9300      	str	r3, [sp, #0]
   b8536:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b853a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b853c:	7830      	ldrb	r0, [r6, #0]
   b853e:	f7ff fa49 	bl	b79d4 <hal_spi_set_settings>
   b8542:	e7bc      	b.n	b84be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8544:	e9cd 5500 	strd	r5, r5, [sp]
   b8548:	462b      	mov	r3, r5
   b854a:	462a      	mov	r2, r5
   b854c:	2101      	movs	r1, #1
   b854e:	e7f5      	b.n	b853c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b8550 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b8550:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8552:	7800      	ldrb	r0, [r0, #0]
   b8554:	f7ff fa1e 	bl	b7994 <hal_spi_transfer>
}
   b8558:	b2c0      	uxtb	r0, r0
   b855a:	bd08      	pop	{r3, pc}

000b855c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b855c:	b510      	push	{r4, lr}
   b855e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8560:	f7ff f908 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b8564:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b8566:	6823      	ldr	r3, [r4, #0]
   b8568:	4620      	mov	r0, r4
   b856a:	695b      	ldr	r3, [r3, #20]
   b856c:	4798      	blx	r3
    if (c >= 0) return c;
   b856e:	2800      	cmp	r0, #0
   b8570:	da08      	bge.n	b8584 <_ZN6Stream9timedReadEv+0x28>
   b8572:	f7ff f8ff 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b8576:	68e3      	ldr	r3, [r4, #12]
   b8578:	1ac0      	subs	r0, r0, r3
   b857a:	68a3      	ldr	r3, [r4, #8]
   b857c:	4298      	cmp	r0, r3
   b857e:	d3f2      	bcc.n	b8566 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b8580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b8584:	bd10      	pop	{r4, pc}

000b8586 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b8586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b858a:	4607      	mov	r7, r0
   b858c:	460c      	mov	r4, r1
   b858e:	188e      	adds	r6, r1, r2
   b8590:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b8592:	42b5      	cmp	r5, r6
   b8594:	eba5 0804 	sub.w	r8, r5, r4
   b8598:	d007      	beq.n	b85aa <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b859a:	4638      	mov	r0, r7
   b859c:	f7ff ffde 	bl	b855c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b85a0:	1e03      	subs	r3, r0, #0
   b85a2:	db02      	blt.n	b85aa <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b85a4:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b85a8:	e7f3      	b.n	b8592 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b85aa:	4640      	mov	r0, r8
   b85ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b85b0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b85b0:	b510      	push	{r4, lr}
   b85b2:	4604      	mov	r4, r0
{
	free(buffer);
   b85b4:	6800      	ldr	r0, [r0, #0]
   b85b6:	f7ff fb61 	bl	b7c7c <free>
}
   b85ba:	4620      	mov	r0, r4
   b85bc:	bd10      	pop	{r4, pc}

000b85be <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b85be:	b510      	push	{r4, lr}
   b85c0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b85c2:	6800      	ldr	r0, [r0, #0]
   b85c4:	b108      	cbz	r0, b85ca <_ZN6String10invalidateEv+0xc>
   b85c6:	f7ff fb59 	bl	b7c7c <free>
	buffer = NULL;
   b85ca:	2300      	movs	r3, #0
	capacity = len = 0;
   b85cc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b85d0:	6023      	str	r3, [r4, #0]
}
   b85d2:	bd10      	pop	{r4, pc}

000b85d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b85d4:	b538      	push	{r3, r4, r5, lr}
   b85d6:	4604      	mov	r4, r0
   b85d8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b85da:	6800      	ldr	r0, [r0, #0]
   b85dc:	3101      	adds	r1, #1
   b85de:	f7ff fb55 	bl	b7c8c <realloc>
	if (newbuffer) {
   b85e2:	b110      	cbz	r0, b85ea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b85e4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b85e8:	2001      	movs	r0, #1
	}
	return 0;
}
   b85ea:	bd38      	pop	{r3, r4, r5, pc}

000b85ec <_ZN6String7reserveEj>:
{
   b85ec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b85ee:	6803      	ldr	r3, [r0, #0]
{
   b85f0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b85f2:	b123      	cbz	r3, b85fe <_ZN6String7reserveEj+0x12>
   b85f4:	6843      	ldr	r3, [r0, #4]
   b85f6:	428b      	cmp	r3, r1
   b85f8:	d301      	bcc.n	b85fe <_ZN6String7reserveEj+0x12>
   b85fa:	2001      	movs	r0, #1
}
   b85fc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b85fe:	4620      	mov	r0, r4
   b8600:	f7ff ffe8 	bl	b85d4 <_ZN6String12changeBufferEj>
   b8604:	2800      	cmp	r0, #0
   b8606:	d0f9      	beq.n	b85fc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8608:	68a3      	ldr	r3, [r4, #8]
   b860a:	2b00      	cmp	r3, #0
   b860c:	d1f5      	bne.n	b85fa <_ZN6String7reserveEj+0xe>
   b860e:	6822      	ldr	r2, [r4, #0]
   b8610:	7013      	strb	r3, [r2, #0]
   b8612:	e7f2      	b.n	b85fa <_ZN6String7reserveEj+0xe>

000b8614 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8614:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8616:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8618:	4611      	mov	r1, r2
   b861a:	9201      	str	r2, [sp, #4]
{
   b861c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b861e:	f7ff ffe5 	bl	b85ec <_ZN6String7reserveEj>
   b8622:	9a01      	ldr	r2, [sp, #4]
   b8624:	b928      	cbnz	r0, b8632 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8626:	4620      	mov	r0, r4
   b8628:	f7ff ffc9 	bl	b85be <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b862c:	4620      	mov	r0, r4
   b862e:	b003      	add	sp, #12
   b8630:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8632:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8634:	4629      	mov	r1, r5
   b8636:	6820      	ldr	r0, [r4, #0]
   b8638:	f000 ff71 	bl	b951e <memcpy>
	buffer[len] = 0;
   b863c:	6822      	ldr	r2, [r4, #0]
   b863e:	68a3      	ldr	r3, [r4, #8]
   b8640:	2100      	movs	r1, #0
   b8642:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8644:	e7f2      	b.n	b862c <_ZN6String4copyEPKcj+0x18>

000b8646 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8646:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8648:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b864a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b864e:	4604      	mov	r4, r0
	len = 0;
   b8650:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8652:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8654:	b141      	cbz	r1, b8668 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8656:	4608      	mov	r0, r1
   b8658:	9101      	str	r1, [sp, #4]
   b865a:	f7fc fa0d 	bl	b4a78 <strlen>
   b865e:	9901      	ldr	r1, [sp, #4]
   b8660:	4602      	mov	r2, r0
   b8662:	4620      	mov	r0, r4
   b8664:	f7ff ffd6 	bl	b8614 <_ZN6String4copyEPKcj>
}
   b8668:	4620      	mov	r0, r4
   b866a:	b002      	add	sp, #8
   b866c:	bd10      	pop	{r4, pc}

000b866e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b866e:	b513      	push	{r0, r1, r4, lr}
   b8670:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8672:	b159      	cbz	r1, b868c <_ZN6StringaSEPKc+0x1e>
   b8674:	4608      	mov	r0, r1
   b8676:	9101      	str	r1, [sp, #4]
   b8678:	f7fc f9fe 	bl	b4a78 <strlen>
   b867c:	9901      	ldr	r1, [sp, #4]
   b867e:	4602      	mov	r2, r0
   b8680:	4620      	mov	r0, r4
   b8682:	f7ff ffc7 	bl	b8614 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8686:	4620      	mov	r0, r4
   b8688:	b002      	add	sp, #8
   b868a:	bd10      	pop	{r4, pc}
	else invalidate();
   b868c:	f7ff ff97 	bl	b85be <_ZN6String10invalidateEv>
   b8690:	e7f9      	b.n	b8686 <_ZN6StringaSEPKc+0x18>

000b8692 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8692:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8694:	6882      	ldr	r2, [r0, #8]
   b8696:	b93a      	cbnz	r2, b86a8 <_ZNK6String6equalsEPKc+0x16>
   b8698:	b121      	cbz	r1, b86a4 <_ZNK6String6equalsEPKc+0x12>
   b869a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b869c:	fab0 f080 	clz	r0, r0
   b86a0:	0940      	lsrs	r0, r0, #5
   b86a2:	e000      	b.n	b86a6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b86a4:	2001      	movs	r0, #1
}
   b86a6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b86a8:	6800      	ldr	r0, [r0, #0]
   b86aa:	b909      	cbnz	r1, b86b0 <_ZNK6String6equalsEPKc+0x1e>
   b86ac:	7800      	ldrb	r0, [r0, #0]
   b86ae:	e7f5      	b.n	b869c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b86b0:	f7fc f9d8 	bl	b4a64 <strcmp>
   b86b4:	e7f2      	b.n	b869c <_ZNK6String6equalsEPKc+0xa>
	...

000b86b8 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b86b8:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b86ba:	6800      	ldr	r0, [r0, #0]
   b86bc:	b140      	cbz	r0, b86d0 <_ZNK6String7toFloatEv+0x18>
   b86be:	f000 ff23 	bl	b9508 <atof>
   b86c2:	ec51 0b10 	vmov	r0, r1, d0
   b86c6:	f7fc f95f 	bl	b4988 <__aeabi_d2f>
   b86ca:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b86ce:	bd08      	pop	{r3, pc}
	return 0;
   b86d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; b86d8 <_ZNK6String7toFloatEv+0x20>
   b86d4:	e7fb      	b.n	b86ce <_ZNK6String7toFloatEv+0x16>
   b86d6:	bf00      	nop
   b86d8:	00000000 	.word	0x00000000

000b86dc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b86dc:	4b05      	ldr	r3, [pc, #20]	; (b86f4 <_GLOBAL__sub_I_System+0x18>)
   b86de:	2202      	movs	r2, #2
   b86e0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b86e2:	4b05      	ldr	r3, [pc, #20]	; (b86f8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b86e4:	4a05      	ldr	r2, [pc, #20]	; (b86fc <_GLOBAL__sub_I_System+0x20>)
   b86e6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b86e8:	2000      	movs	r0, #0
   b86ea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b86ee:	f7ff ba19 	b.w	b7b24 <set_system_mode>
   b86f2:	bf00      	nop
   b86f4:	2003e6f8 	.word	0x2003e6f8
   b86f8:	2003e6ec 	.word	0x2003e6ec
   b86fc:	ffff0000 	.word	0xffff0000

000b8700 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8700:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8702:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8704:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8708:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b870a:	2201      	movs	r2, #1
   b870c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8710:	f10d 0107 	add.w	r1, sp, #7
   b8714:	47a0      	blx	r4
}
   b8716:	b002      	add	sp, #8
   b8718:	bd10      	pop	{r4, pc}

000b871a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b871a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b871c:	6803      	ldr	r3, [r0, #0]
   b871e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8724:	46a4      	mov	ip, r4
}
   b8726:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b872a:	4760      	bx	ip

000b872c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b872c:	b513      	push	{r0, r1, r4, lr}
   b872e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8730:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8732:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8736:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8738:	f10d 0107 	add.w	r1, sp, #7
   b873c:	2201      	movs	r2, #1
   b873e:	47a0      	blx	r4
}
   b8740:	b002      	add	sp, #8
   b8742:	bd10      	pop	{r4, pc}

000b8744 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8744:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8746:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8748:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b874c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8750:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8752:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8754:	d008      	beq.n	b8768 <_ZN9TCPClient4readEv+0x24>
   b8756:	6963      	ldr	r3, [r4, #20]
   b8758:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b875c:	1c51      	adds	r1, r2, #1
   b875e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8762:	4413      	add	r3, r2
   b8764:	7918      	ldrb	r0, [r3, #4]
}
   b8766:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8768:	6803      	ldr	r3, [r0, #0]
   b876a:	691b      	ldr	r3, [r3, #16]
   b876c:	4798      	blx	r3
   b876e:	2800      	cmp	r0, #0
   b8770:	d1f1      	bne.n	b8756 <_ZN9TCPClient4readEv+0x12>
   b8772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8776:	e7f6      	b.n	b8766 <_ZN9TCPClient4readEv+0x22>

000b8778 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8778:	4770      	bx	lr

000b877a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b877a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b877c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b877e:	43c0      	mvns	r0, r0
   b8780:	0fc0      	lsrs	r0, r0, #31
   b8782:	4770      	bx	lr

000b8784 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8784:	4770      	bx	lr
	...

000b8788 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8788:	4b06      	ldr	r3, [pc, #24]	; (b87a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b878a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b878c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b878e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8792:	d005      	beq.n	b87a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8794:	4608      	mov	r0, r1
   b8796:	f000 fd9f 	bl	b92d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b879a:	2800      	cmp	r0, #0
   b879c:	bf08      	it	eq
   b879e:	2400      	moveq	r4, #0
      }
   b87a0:	4620      	mov	r0, r4
   b87a2:	bd10      	pop	{r4, pc}
   b87a4:	000bc5dc 	.word	0x000bc5dc

000b87a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b87a8:	b510      	push	{r4, lr}
   b87aa:	21ac      	movs	r1, #172	; 0xac
   b87ac:	4604      	mov	r4, r0
   b87ae:	f7fc f9c4 	bl	b4b3a <_ZdlPvj>
   b87b2:	4620      	mov	r0, r4
   b87b4:	bd10      	pop	{r4, pc}

000b87b6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b87b6:	21ac      	movs	r1, #172	; 0xac
   b87b8:	f7fc b9bf 	b.w	b4b3a <_ZdlPvj>

000b87bc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b87bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b87c0:	f04f 0800 	mov.w	r8, #0
   b87c4:	b086      	sub	sp, #24
   b87c6:	461c      	mov	r4, r3
   b87c8:	f8c0 8004 	str.w	r8, [r0, #4]
   b87cc:	4605      	mov	r5, r0
   b87ce:	460e      	mov	r6, r1
   b87d0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b87d2:	4641      	mov	r1, r8
   b87d4:	2210      	movs	r2, #16
   b87d6:	a802      	add	r0, sp, #8
   b87d8:	f000 feaf 	bl	b953a <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b87dc:	1c63      	adds	r3, r4, #1
   b87de:	d009      	beq.n	b87f4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b87e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b87e4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b87e8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b87ec:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b87f0:	435c      	muls	r4, r3
   b87f2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b87f4:	6968      	ldr	r0, [r5, #20]
   b87f6:	2310      	movs	r3, #16
   b87f8:	9300      	str	r3, [sp, #0]
   b87fa:	6800      	ldr	r0, [r0, #0]
   b87fc:	ab02      	add	r3, sp, #8
   b87fe:	f241 0205 	movw	r2, #4101	; 0x1005
   b8802:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8806:	f7ff f88d 	bl	b7924 <sock_setsockopt>
    if (ret < 0) {
   b880a:	2800      	cmp	r0, #0
   b880c:	da07      	bge.n	b881e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b880e:	f7ff fa65 	bl	b7cdc <__errno>
   b8812:	6803      	ldr	r3, [r0, #0]
   b8814:	606b      	str	r3, [r5, #4]
        return 0;
   b8816:	2000      	movs	r0, #0
}
   b8818:	b006      	add	sp, #24
   b881a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b881e:	6968      	ldr	r0, [r5, #20]
   b8820:	2300      	movs	r3, #0
   b8822:	6800      	ldr	r0, [r0, #0]
   b8824:	463a      	mov	r2, r7
   b8826:	4631      	mov	r1, r6
   b8828:	f7ff f89c 	bl	b7964 <sock_send>
    if (ret < 0) {
   b882c:	1e03      	subs	r3, r0, #0
   b882e:	dbee      	blt.n	b880e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8830:	4618      	mov	r0, r3
   b8832:	e7f1      	b.n	b8818 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8834 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8834:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b8836:	6984      	ldr	r4, [r0, #24]
   b8838:	4b0a      	ldr	r3, [pc, #40]	; (b8864 <_ZN9TCPClientD1Ev+0x30>)
   b883a:	6003      	str	r3, [r0, #0]
   b883c:	4605      	mov	r5, r0
   b883e:	b17c      	cbz	r4, b8860 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b8840:	6863      	ldr	r3, [r4, #4]
   b8842:	3b01      	subs	r3, #1
   b8844:	6063      	str	r3, [r4, #4]
   b8846:	b95b      	cbnz	r3, b8860 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b8848:	6823      	ldr	r3, [r4, #0]
   b884a:	4620      	mov	r0, r4
   b884c:	689b      	ldr	r3, [r3, #8]
   b884e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8850:	68a3      	ldr	r3, [r4, #8]
   b8852:	3b01      	subs	r3, #1
   b8854:	60a3      	str	r3, [r4, #8]
   b8856:	b91b      	cbnz	r3, b8860 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b8858:	6823      	ldr	r3, [r4, #0]
   b885a:	4620      	mov	r0, r4
   b885c:	68db      	ldr	r3, [r3, #12]
   b885e:	4798      	blx	r3
   b8860:	4628      	mov	r0, r5
   b8862:	bd38      	pop	{r3, r4, r5, pc}
   b8864:	000bc6ec 	.word	0x000bc6ec

000b8868 <_ZN9TCPClientD0Ev>:
   b8868:	b510      	push	{r4, lr}
   b886a:	4604      	mov	r4, r0
   b886c:	f7ff ffe2 	bl	b8834 <_ZN9TCPClientD1Ev>
   b8870:	4620      	mov	r0, r4
   b8872:	211c      	movs	r1, #28
   b8874:	f7fc f961 	bl	b4b3a <_ZdlPvj>
   b8878:	4620      	mov	r0, r4
   b887a:	bd10      	pop	{r4, pc}

000b887c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b887c:	b530      	push	{r4, r5, lr}
   b887e:	b087      	sub	sp, #28
   b8880:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8882:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8884:	4668      	mov	r0, sp
   b8886:	f7ff fb6b 	bl	b7f60 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b888a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b888c:	3404      	adds	r4, #4
   b888e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8890:	682b      	ldr	r3, [r5, #0]
   b8892:	7023      	strb	r3, [r4, #0]
    }
   b8894:	b007      	add	sp, #28
   b8896:	bd30      	pop	{r4, r5, pc}

000b8898 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8898:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b889a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b889c:	4b05      	ldr	r3, [pc, #20]	; (b88b4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b889e:	4604      	mov	r4, r0
   b88a0:	358c      	adds	r5, #140	; 0x8c
   b88a2:	f844 3b04 	str.w	r3, [r4], #4
   b88a6:	4606      	mov	r6, r0
   b88a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b88aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b88ac:	682b      	ldr	r3, [r5, #0]
   b88ae:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b88b0:	4630      	mov	r0, r6
   b88b2:	bd70      	pop	{r4, r5, r6, pc}
   b88b4:	000bc650 	.word	0x000bc650

000b88b8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b88b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b88bc:	4698      	mov	r8, r3
    stop();
   b88be:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b88c0:	b093      	sub	sp, #76	; 0x4c
   b88c2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b88c4:	2400      	movs	r4, #0
    stop();
   b88c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b88c8:	4606      	mov	r6, r0
   b88ca:	4617      	mov	r7, r2
    stop();
   b88cc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b88ce:	4628      	mov	r0, r5
   b88d0:	466b      	mov	r3, sp
   b88d2:	4622      	mov	r2, r4
   b88d4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b88d6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b88d8:	f7ff f81c 	bl	b7914 <netdb_getaddrinfo>
   b88dc:	4605      	mov	r5, r0
   b88de:	2800      	cmp	r0, #0
   b88e0:	d163      	bne.n	b89aa <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b88e2:	9b00      	ldr	r3, [sp, #0]
   b88e4:	2b00      	cmp	r3, #0
   b88e6:	d04b      	beq.n	b8980 <_ZN9TCPClient7connectEPKctm+0xc8>
   b88e8:	695b      	ldr	r3, [r3, #20]
   b88ea:	2b00      	cmp	r3, #0
   b88ec:	d048      	beq.n	b8980 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b88ee:	a806      	add	r0, sp, #24
   b88f0:	f7ff faf2 	bl	b7ed8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b88f4:	9b00      	ldr	r3, [sp, #0]
   b88f6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b88f8:	7863      	ldrb	r3, [r4, #1]
   b88fa:	2b02      	cmp	r3, #2
   b88fc:	d104      	bne.n	b8908 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b88fe:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8900:	a806      	add	r0, sp, #24
   b8902:	f7ff ffbb 	bl	b887c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8906:	e026      	b.n	b8956 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8908:	2b0a      	cmp	r3, #10
   b890a:	d124      	bne.n	b8956 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b890c:	2211      	movs	r2, #17
   b890e:	4629      	mov	r1, r5
   b8910:	a801      	add	r0, sp, #4
   b8912:	f000 fe12 	bl	b953a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8916:	68a3      	ldr	r3, [r4, #8]
   b8918:	2b00      	cmp	r3, #0
   b891a:	d038      	beq.n	b898e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b891c:	f104 0308 	add.w	r3, r4, #8
   b8920:	f10d 0c04 	add.w	ip, sp, #4
   b8924:	3418      	adds	r4, #24
   b8926:	6818      	ldr	r0, [r3, #0]
   b8928:	6859      	ldr	r1, [r3, #4]
   b892a:	4662      	mov	r2, ip
   b892c:	c203      	stmia	r2!, {r0, r1}
   b892e:	3308      	adds	r3, #8
   b8930:	42a3      	cmp	r3, r4
   b8932:	4694      	mov	ip, r2
   b8934:	d1f7      	bne.n	b8926 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8936:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8938:	a901      	add	r1, sp, #4
   b893a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b893c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8940:	f7ff fad8 	bl	b7ef4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8944:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8948:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b894c:	ac07      	add	r4, sp, #28
   b894e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8950:	f8dc 3000 	ldr.w	r3, [ip]
   b8954:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8956:	a806      	add	r0, sp, #24
   b8958:	f7ff fade 	bl	b7f18 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b895c:	b180      	cbz	r0, b8980 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b895e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8960:	ad07      	add	r5, sp, #28
   b8962:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8966:	4b12      	ldr	r3, [pc, #72]	; (b89b0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8968:	930c      	str	r3, [sp, #48]	; 0x30
   b896a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b896c:	ac0d      	add	r4, sp, #52	; 0x34
   b896e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8970:	682b      	ldr	r3, [r5, #0]
   b8972:	7023      	strb	r3, [r4, #0]
   b8974:	463a      	mov	r2, r7
   b8976:	4643      	mov	r3, r8
   b8978:	a90c      	add	r1, sp, #48	; 0x30
   b897a:	4630      	mov	r0, r6
   b897c:	47c8      	blx	r9
   b897e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8980:	9800      	ldr	r0, [sp, #0]
   b8982:	f7fe ffbf 	bl	b7904 <netdb_freeaddrinfo>
}
   b8986:	4628      	mov	r0, r5
   b8988:	b013      	add	sp, #76	; 0x4c
   b898a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b898e:	68e3      	ldr	r3, [r4, #12]
   b8990:	2b00      	cmp	r3, #0
   b8992:	d1c3      	bne.n	b891c <_ZN9TCPClient7connectEPKctm+0x64>
   b8994:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8998:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b899c:	f7fe ff9a 	bl	b78d4 <inet_htonl>
   b89a0:	4581      	cmp	r9, r0
   b89a2:	d1bb      	bne.n	b891c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b89a4:	f104 0114 	add.w	r1, r4, #20
   b89a8:	e7aa      	b.n	b8900 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b89aa:	4625      	mov	r5, r4
   b89ac:	e7e8      	b.n	b8980 <_ZN9TCPClient7connectEPKctm+0xc8>
   b89ae:	bf00      	nop
   b89b0:	000bc650 	.word	0x000bc650

000b89b4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b89b4:	b538      	push	{r3, r4, r5, lr}
   b89b6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b89b8:	681a      	ldr	r2, [r3, #0]
   b89ba:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b89bc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b89be:	da10      	bge.n	b89e2 <_ZN9TCPClient9connectedEv+0x2e>
   b89c0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b89c4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b89c8:	429a      	cmp	r2, r3
   b89ca:	d10a      	bne.n	b89e2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b89cc:	6803      	ldr	r3, [r0, #0]
   b89ce:	691b      	ldr	r3, [r3, #16]
   b89d0:	4798      	blx	r3
        if (!rv) {
   b89d2:	4604      	mov	r4, r0
   b89d4:	b928      	cbnz	r0, b89e2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b89d6:	682b      	ldr	r3, [r5, #0]
   b89d8:	4628      	mov	r0, r5
   b89da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b89dc:	4798      	blx	r3
        rv = available();
   b89de:	4620      	mov	r0, r4
}
   b89e0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b89e2:	2001      	movs	r0, #1
   b89e4:	e7fc      	b.n	b89e0 <_ZN9TCPClient9connectedEv+0x2c>

000b89e6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b89e6:	b510      	push	{r4, lr}
   b89e8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b89ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b89ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b89f2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b89f4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b89f6:	d005      	beq.n	b8a04 <_ZN9TCPClient4peekEv+0x1e>
   b89f8:	6963      	ldr	r3, [r4, #20]
   b89fa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b89fe:	4413      	add	r3, r2
   b8a00:	7918      	ldrb	r0, [r3, #4]
}
   b8a02:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8a04:	6803      	ldr	r3, [r0, #0]
   b8a06:	691b      	ldr	r3, [r3, #16]
   b8a08:	4798      	blx	r3
   b8a0a:	2800      	cmp	r0, #0
   b8a0c:	d1f4      	bne.n	b89f8 <_ZN9TCPClient4peekEv+0x12>
   b8a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8a12:	e7f6      	b.n	b8a02 <_ZN9TCPClient4peekEv+0x1c>

000b8a14 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a16:	6943      	ldr	r3, [r0, #20]
   b8a18:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8a1a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8a1e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8a22:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8a24:	4605      	mov	r5, r0
   b8a26:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8a28:	d016      	beq.n	b8a58 <_ZN9TCPClient4readEPhj+0x44>
   b8a2a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8a2c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8a30:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8a34:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b8a36:	42bc      	cmp	r4, r7
   b8a38:	bf28      	it	cs
   b8a3a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b8a3c:	3304      	adds	r3, #4
   b8a3e:	4622      	mov	r2, r4
   b8a40:	4419      	add	r1, r3
   b8a42:	4630      	mov	r0, r6
   b8a44:	f000 fd6b 	bl	b951e <memcpy>
   b8a48:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b8a4a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8a4e:	4423      	add	r3, r4
   b8a50:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8a54:	4620      	mov	r0, r4
   b8a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8a58:	6803      	ldr	r3, [r0, #0]
   b8a5a:	691b      	ldr	r3, [r3, #16]
   b8a5c:	4798      	blx	r3
   b8a5e:	2800      	cmp	r0, #0
   b8a60:	d1e3      	bne.n	b8a2a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8a62:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8a66:	e7f5      	b.n	b8a54 <_ZN9TCPClient4readEPhj+0x40>

000b8a68 <_ZN9TCPClient12flush_bufferEv>:
   b8a68:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8a6a:	2300      	movs	r3, #0
   b8a6c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8a70:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8a72:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8a76:	4770      	bx	lr

000b8a78 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a7c:	461f      	mov	r7, r3
    stop();
   b8a7e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8a80:	460c      	mov	r4, r1
    stop();
   b8a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8a84:	b08a      	sub	sp, #40	; 0x28
   b8a86:	4605      	mov	r5, r0
   b8a88:	4616      	mov	r6, r2
    stop();
   b8a8a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8a8c:	7d23      	ldrb	r3, [r4, #20]
   b8a8e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8a92:	2b04      	cmp	r3, #4
   b8a94:	bf0c      	ite	eq
   b8a96:	2002      	moveq	r0, #2
   b8a98:	200a      	movne	r0, #10
   b8a9a:	2206      	movs	r2, #6
   b8a9c:	2101      	movs	r1, #1
   b8a9e:	f7fe ff69 	bl	b7974 <sock_socket>
   b8aa2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8aa6:	696b      	ldr	r3, [r5, #20]
   b8aa8:	681b      	ldr	r3, [r3, #0]
   b8aaa:	2b00      	cmp	r3, #0
   b8aac:	da08      	bge.n	b8ac0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8aae:	682b      	ldr	r3, [r5, #0]
   b8ab0:	4628      	mov	r0, r5
   b8ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8ab4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8ab6:	4798      	blx	r3
}
   b8ab8:	4620      	mov	r0, r4
   b8aba:	b00a      	add	sp, #40	; 0x28
   b8abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8ac0:	4628      	mov	r0, r5
   b8ac2:	f7ff ffd1 	bl	b8a68 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8ac6:	b1b7      	cbz	r7, b8af6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8ac8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8aca:	a903      	add	r1, sp, #12
   b8acc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8ace:	9303      	str	r3, [sp, #12]
   b8ad0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8ad4:	f7fe feee 	bl	b78b4 <if_index_to_name>
   b8ad8:	2800      	cmp	r0, #0
   b8ada:	d1e8      	bne.n	b8aae <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8adc:	6968      	ldr	r0, [r5, #20]
   b8ade:	2306      	movs	r3, #6
   b8ae0:	9300      	str	r3, [sp, #0]
   b8ae2:	6800      	ldr	r0, [r0, #0]
   b8ae4:	ab03      	add	r3, sp, #12
   b8ae6:	f241 020b 	movw	r2, #4107	; 0x100b
   b8aea:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8aee:	f7fe ff19 	bl	b7924 <sock_setsockopt>
   b8af2:	2800      	cmp	r0, #0
   b8af4:	d1db      	bne.n	b8aae <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8af6:	221c      	movs	r2, #28
   b8af8:	2100      	movs	r1, #0
   b8afa:	a803      	add	r0, sp, #12
   b8afc:	f000 fd1d 	bl	b953a <memset>
    if (ip.version() == 4) {
   b8b00:	7d23      	ldrb	r3, [r4, #20]
   b8b02:	2b04      	cmp	r3, #4
   b8b04:	d11d      	bne.n	b8b42 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8b06:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8b0a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8b0c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8b10:	f7fe fef0 	bl	b78f4 <inet_htons>
   b8b14:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8b18:	6860      	ldr	r0, [r4, #4]
   b8b1a:	f7fe fedb 	bl	b78d4 <inet_htonl>
   b8b1e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8b20:	696b      	ldr	r3, [r5, #20]
   b8b22:	221c      	movs	r2, #28
   b8b24:	6818      	ldr	r0, [r3, #0]
   b8b26:	a903      	add	r1, sp, #12
   b8b28:	f7fe ff0c 	bl	b7944 <sock_connect>
   b8b2c:	2800      	cmp	r0, #0
   b8b2e:	d1be      	bne.n	b8aae <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8b30:	3404      	adds	r4, #4
   b8b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8b34:	696d      	ldr	r5, [r5, #20]
   b8b36:	358c      	adds	r5, #140	; 0x8c
   b8b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8b3a:	6823      	ldr	r3, [r4, #0]
   b8b3c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8b3e:	2401      	movs	r4, #1
   b8b40:	e7ba      	b.n	b8ab8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8b42:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b8b46:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8b48:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8b4c:	f7fe fed2 	bl	b78f4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8b50:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8b52:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8b56:	1d23      	adds	r3, r4, #4
   b8b58:	f104 0714 	add.w	r7, r4, #20
   b8b5c:	6818      	ldr	r0, [r3, #0]
   b8b5e:	6859      	ldr	r1, [r3, #4]
   b8b60:	4632      	mov	r2, r6
   b8b62:	c203      	stmia	r2!, {r0, r1}
   b8b64:	3308      	adds	r3, #8
   b8b66:	42bb      	cmp	r3, r7
   b8b68:	4616      	mov	r6, r2
   b8b6a:	d1f7      	bne.n	b8b5c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b8b6c:	e7d8      	b.n	b8b20 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8b70 <_ZN9TCPClient9availableEv>:
{
   b8b70:	b530      	push	{r4, r5, lr}
   b8b72:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8b74:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8b78:	b08b      	sub	sp, #44	; 0x2c
   b8b7a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b8b7c:	b12b      	cbz	r3, b8b8a <_ZN9TCPClient9availableEv+0x1a>
   b8b7e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8b82:	429a      	cmp	r2, r3
   b8b84:	d101      	bne.n	b8b8a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b8b86:	f7ff ff6f 	bl	b8a68 <_ZN9TCPClient12flush_bufferEv>
   b8b8a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b8b8c:	6808      	ldr	r0, [r1, #0]
   b8b8e:	2800      	cmp	r0, #0
   b8b90:	db18      	blt.n	b8bc4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8b92:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8b96:	2d7f      	cmp	r5, #127	; 0x7f
   b8b98:	d814      	bhi.n	b8bc4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b8b9a:	3104      	adds	r1, #4
   b8b9c:	2308      	movs	r3, #8
   b8b9e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8ba2:	4429      	add	r1, r5
   b8ba4:	f7fe fed6 	bl	b7954 <sock_recv>
            if (ret > 0) {
   b8ba8:	2800      	cmp	r0, #0
   b8baa:	dd13      	ble.n	b8bd4 <_ZN9TCPClient9availableEv+0x64>
   b8bac:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b8bae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8bb2:	b90a      	cbnz	r2, b8bb8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8bb4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8bb8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8bba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8bbe:	4410      	add	r0, r2
   b8bc0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8bc4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8bc6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8bca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8bce:	1ac0      	subs	r0, r0, r3
   b8bd0:	b00b      	add	sp, #44	; 0x2c
   b8bd2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8bd4:	f7ff f882 	bl	b7cdc <__errno>
   b8bd8:	6803      	ldr	r3, [r0, #0]
   b8bda:	2b0b      	cmp	r3, #11
   b8bdc:	d0f2      	beq.n	b8bc4 <_ZN9TCPClient9availableEv+0x54>
   b8bde:	f7ff f87d 	bl	b7cdc <__errno>
   b8be2:	6803      	ldr	r3, [r0, #0]
   b8be4:	2b0b      	cmp	r3, #11
   b8be6:	d0ed      	beq.n	b8bc4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8be8:	2320      	movs	r3, #32
   b8bea:	2500      	movs	r5, #0
   b8bec:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8bf0:	f7ff f874 	bl	b7cdc <__errno>
   b8bf4:	6803      	ldr	r3, [r0, #0]
   b8bf6:	9301      	str	r3, [sp, #4]
   b8bf8:	4b08      	ldr	r3, [pc, #32]	; (b8c1c <_ZN9TCPClient9availableEv+0xac>)
   b8bfa:	4909      	ldr	r1, [pc, #36]	; (b8c20 <_ZN9TCPClient9availableEv+0xb0>)
   b8bfc:	9300      	str	r3, [sp, #0]
   b8bfe:	aa02      	add	r2, sp, #8
   b8c00:	462b      	mov	r3, r5
   b8c02:	2032      	movs	r0, #50	; 0x32
   b8c04:	f7fe ff86 	bl	b7b14 <log_message>
                    sock_close(d_->sock);
   b8c08:	6963      	ldr	r3, [r4, #20]
   b8c0a:	6818      	ldr	r0, [r3, #0]
   b8c0c:	f7fe fe92 	bl	b7934 <sock_close>
   b8c10:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8c16:	601a      	str	r2, [r3, #0]
   b8c18:	e7d4      	b.n	b8bc4 <_ZN9TCPClient9availableEv+0x54>
   b8c1a:	bf00      	nop
   b8c1c:	000bc6b7 	.word	0x000bc6b7
   b8c20:	000bc6b0 	.word	0x000bc6b0

000b8c24 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8c24:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8c26:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8c28:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8c2a:	6818      	ldr	r0, [r3, #0]
   b8c2c:	2800      	cmp	r0, #0
   b8c2e:	db01      	blt.n	b8c34 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8c30:	f7fe fe80 	bl	b7934 <sock_close>
   b8c34:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b8c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8c3a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8c3c:	6960      	ldr	r0, [r4, #20]
   b8c3e:	2211      	movs	r2, #17
   b8c40:	2100      	movs	r1, #0
   b8c42:	308c      	adds	r0, #140	; 0x8c
   b8c44:	f000 fc79 	bl	b953a <memset>
    flush_buffer();
   b8c48:	4620      	mov	r0, r4
}
   b8c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8c4e:	f7ff bf0b 	b.w	b8a68 <_ZN9TCPClient12flush_bufferEv>

000b8c52 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8c52:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8c54:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b8c56:	4604      	mov	r4, r0
          total(0) {
   b8c58:	6001      	str	r1, [r0, #0]
   b8c5a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8c5e:	3088      	adds	r0, #136	; 0x88
   b8c60:	f7ff f93a 	bl	b7ed8 <_ZN9IPAddressC1Ev>
}
   b8c64:	4620      	mov	r0, r4
   b8c66:	bd10      	pop	{r4, pc}

000b8c68 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8c6a:	2300      	movs	r3, #0
   b8c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8c70:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8c74:	4a0e      	ldr	r2, [pc, #56]	; (b8cb0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8c76:	6103      	str	r3, [r0, #16]
   b8c78:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8c7a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8c7c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8c7e:	20ac      	movs	r0, #172	; 0xac
   b8c80:	9101      	str	r1, [sp, #4]
   b8c82:	f7fb ff54 	bl	b4b2e <_Znwj>
	  auto __pi = ::new (__mem)
   b8c86:	1e05      	subs	r5, r0, #0
   b8c88:	f105 060c 	add.w	r6, r5, #12
   b8c8c:	d008      	beq.n	b8ca0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8c8e:	2301      	movs	r3, #1
   b8c90:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8c94:	4b07      	ldr	r3, [pc, #28]	; (b8cb4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8c96:	9901      	ldr	r1, [sp, #4]
   b8c98:	602b      	str	r3, [r5, #0]
   b8c9a:	4630      	mov	r0, r6
   b8c9c:	f7ff ffd9 	bl	b8c52 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8ca0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8ca2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8ca6:	f7ff fedf 	bl	b8a68 <_ZN9TCPClient12flush_bufferEv>
}
   b8caa:	b002      	add	sp, #8
   b8cac:	bd70      	pop	{r4, r5, r6, pc}
   b8cae:	bf00      	nop
   b8cb0:	000bc6ec 	.word	0x000bc6ec
   b8cb4:	000bc6d0 	.word	0x000bc6d0

000b8cb8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8cb8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8cba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8cbe:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8cc0:	f7ff ffd2 	bl	b8c68 <_ZN9TCPClientC1Ei>
}
   b8cc4:	4620      	mov	r0, r4
   b8cc6:	bd10      	pop	{r4, pc}

000b8cc8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8cc8:	b510      	push	{r4, lr}
   b8cca:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8ccc:	6800      	ldr	r0, [r0, #0]
   b8cce:	2800      	cmp	r0, #0
   b8cd0:	db01      	blt.n	b8cd6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8cd2:	f7fe fe2f 	bl	b7934 <sock_close>
    }
}
   b8cd6:	4620      	mov	r0, r4
   b8cd8:	bd10      	pop	{r4, pc}

000b8cda <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8cda:	300c      	adds	r0, #12
   b8cdc:	f7ff bff4 	b.w	b8cc8 <_ZN9TCPClient4DataD1Ev>

000b8ce0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8ce0:	4b02      	ldr	r3, [pc, #8]	; (b8cec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8ce2:	681a      	ldr	r2, [r3, #0]
   b8ce4:	4b02      	ldr	r3, [pc, #8]	; (b8cf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b8ce6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8ce8:	4770      	bx	lr
   b8cea:	bf00      	nop
   b8cec:	2003e044 	.word	0x2003e044
   b8cf0:	2003e6fc 	.word	0x2003e6fc

000b8cf4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8cf4:	4770      	bx	lr

000b8cf6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8cf6:	7441      	strb	r1, [r0, #17]
}
   b8cf8:	4770      	bx	lr

000b8cfa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8cfa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8cfc:	7c00      	ldrb	r0, [r0, #16]
   b8cfe:	f7fe feb1 	bl	b7a64 <hal_usart_available_data_for_write>
}
   b8d02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8d06:	bd08      	pop	{r3, pc}

000b8d08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8d08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8d0a:	7c00      	ldrb	r0, [r0, #16]
   b8d0c:	f7fe fe82 	bl	b7a14 <hal_usart_available>
}
   b8d10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8d14:	bd08      	pop	{r3, pc}

000b8d16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8d16:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8d18:	7c00      	ldrb	r0, [r0, #16]
   b8d1a:	f7fe fe8b 	bl	b7a34 <hal_usart_peek>
}
   b8d1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d22:	bd08      	pop	{r3, pc}

000b8d24 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8d24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8d26:	7c00      	ldrb	r0, [r0, #16]
   b8d28:	f7fe fe7c 	bl	b7a24 <hal_usart_read>
}
   b8d2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8d30:	bd08      	pop	{r3, pc}

000b8d32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8d32:	7c00      	ldrb	r0, [r0, #16]
   b8d34:	f7fe be86 	b.w	b7a44 <hal_usart_flush>

000b8d38 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d3a:	7c45      	ldrb	r5, [r0, #17]
{
   b8d3c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d3e:	b12d      	cbz	r5, b8d4c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8d40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8d42:	b003      	add	sp, #12
   b8d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8d48:	f7fe be5c 	b.w	b7a04 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8d4c:	7c00      	ldrb	r0, [r0, #16]
   b8d4e:	9101      	str	r1, [sp, #4]
   b8d50:	f7fe fe88 	bl	b7a64 <hal_usart_available_data_for_write>
   b8d54:	2800      	cmp	r0, #0
   b8d56:	9901      	ldr	r1, [sp, #4]
   b8d58:	dcf2      	bgt.n	b8d40 <_ZN11USARTSerial5writeEh+0x8>
}
   b8d5a:	4628      	mov	r0, r5
   b8d5c:	b003      	add	sp, #12
   b8d5e:	bd30      	pop	{r4, r5, pc}

000b8d60 <_ZN11USARTSerialD0Ev>:
   b8d60:	b510      	push	{r4, lr}
   b8d62:	2114      	movs	r1, #20
   b8d64:	4604      	mov	r4, r0
   b8d66:	f7fb fee8 	bl	b4b3a <_ZdlPvj>
   b8d6a:	4620      	mov	r0, r4
   b8d6c:	bd10      	pop	{r4, pc}
	...

000b8d70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8d70:	b510      	push	{r4, lr}
   b8d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d76:	4604      	mov	r4, r0
   b8d78:	4608      	mov	r0, r1
   b8d7a:	4611      	mov	r1, r2
   b8d7c:	2200      	movs	r2, #0
   b8d7e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8d82:	4b04      	ldr	r3, [pc, #16]	; (b8d94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8d84:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8d86:	2301      	movs	r3, #1
  _serial = serial;
   b8d88:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8d8a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8d8c:	f7fe fe72 	bl	b7a74 <hal_usart_init_ex>
}
   b8d90:	4620      	mov	r0, r4
   b8d92:	bd10      	pop	{r4, pc}
   b8d94:	000bc754 	.word	0x000bc754

000b8d98 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8d98:	7441      	strb	r1, [r0, #17]
}
   b8d9a:	4770      	bx	lr

000b8d9c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8d9c:	4770      	bx	lr

000b8d9e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8d9e:	4770      	bx	lr

000b8da0 <_ZN9USBSerial4readEv>:
{
   b8da0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8da2:	2100      	movs	r1, #0
   b8da4:	7c00      	ldrb	r0, [r0, #16]
   b8da6:	f7fe fe8d 	bl	b7ac4 <HAL_USB_USART_Receive_Data>
}
   b8daa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8dae:	bd08      	pop	{r3, pc}

000b8db0 <_ZN9USBSerial4peekEv>:
{
   b8db0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8db2:	2101      	movs	r1, #1
   b8db4:	7c00      	ldrb	r0, [r0, #16]
   b8db6:	f7fe fe85 	bl	b7ac4 <HAL_USB_USART_Receive_Data>
}
   b8dba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8dbe:	bd08      	pop	{r3, pc}

000b8dc0 <_ZN9USBSerial17availableForWriteEv>:
{
   b8dc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8dc2:	7c00      	ldrb	r0, [r0, #16]
   b8dc4:	f7fe fe76 	bl	b7ab4 <HAL_USB_USART_Available_Data_For_Write>
}
   b8dc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8dcc:	bd08      	pop	{r3, pc}

000b8dce <_ZN9USBSerial9availableEv>:
{
   b8dce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8dd0:	7c00      	ldrb	r0, [r0, #16]
   b8dd2:	f7fe fe67 	bl	b7aa4 <HAL_USB_USART_Available_Data>
}
   b8dd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8dda:	bd08      	pop	{r3, pc}

000b8ddc <_ZN9USBSerial5writeEh>:
{
   b8ddc:	b513      	push	{r0, r1, r4, lr}
   b8dde:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8de0:	7c00      	ldrb	r0, [r0, #16]
{
   b8de2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8de4:	f7fe fe66 	bl	b7ab4 <HAL_USB_USART_Available_Data_For_Write>
   b8de8:	2800      	cmp	r0, #0
   b8dea:	9901      	ldr	r1, [sp, #4]
   b8dec:	dc01      	bgt.n	b8df2 <_ZN9USBSerial5writeEh+0x16>
   b8dee:	7c60      	ldrb	r0, [r4, #17]
   b8df0:	b120      	cbz	r0, b8dfc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8df2:	7c20      	ldrb	r0, [r4, #16]
   b8df4:	f7fe fe6e 	bl	b7ad4 <HAL_USB_USART_Send_Data>
   b8df8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8dfc:	b002      	add	sp, #8
   b8dfe:	bd10      	pop	{r4, pc}

000b8e00 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8e00:	7c00      	ldrb	r0, [r0, #16]
   b8e02:	f7fe be6f 	b.w	b7ae4 <HAL_USB_USART_Flush_Data>

000b8e06 <_ZN9USBSerialD0Ev>:
   b8e06:	b510      	push	{r4, lr}
   b8e08:	2114      	movs	r1, #20
   b8e0a:	4604      	mov	r4, r0
   b8e0c:	f7fb fe95 	bl	b4b3a <_ZdlPvj>
   b8e10:	4620      	mov	r0, r4
   b8e12:	bd10      	pop	{r4, pc}

000b8e14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8e14:	b510      	push	{r4, lr}
   b8e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8e1a:	4604      	mov	r4, r0
   b8e1c:	4608      	mov	r0, r1
   b8e1e:	2100      	movs	r1, #0
   b8e20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8e24:	4b04      	ldr	r3, [pc, #16]	; (b8e38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8e26:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8e28:	2301      	movs	r3, #1
  _serial = serial;
   b8e2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8e2c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8e2e:	4611      	mov	r1, r2
   b8e30:	f7fe fe28 	bl	b7a84 <HAL_USB_USART_Init>
}
   b8e34:	4620      	mov	r0, r4
   b8e36:	bd10      	pop	{r4, pc}
   b8e38:	000bc784 	.word	0x000bc784

000b8e3c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8e3c:	7c00      	ldrb	r0, [r0, #16]
   b8e3e:	2200      	movs	r2, #0
   b8e40:	f7fe be28 	b.w	b7a94 <HAL_USB_USART_Begin>

000b8e44 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b8e44:	7c00      	ldrb	r0, [r0, #16]
   b8e46:	f7fe be55 	b.w	b7af4 <HAL_USB_USART_Is_Connected>

000b8e4a <_Z19acquireSerialBufferv>:
{
   b8e4a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8e4c:	2214      	movs	r2, #20
{
   b8e4e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8e50:	2100      	movs	r1, #0
   b8e52:	f000 fb72 	bl	b953a <memset>
}
   b8e56:	4620      	mov	r0, r4
   b8e58:	bd10      	pop	{r4, pc}
	...

000b8e5c <_Z16_fetch_usbserialv>:
{
   b8e5c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8e5e:	4c0f      	ldr	r4, [pc, #60]	; (b8e9c <_Z16_fetch_usbserialv+0x40>)
{
   b8e60:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8e62:	a803      	add	r0, sp, #12
   b8e64:	f7ff fff1 	bl	b8e4a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8e68:	7821      	ldrb	r1, [r4, #0]
   b8e6a:	f3bf 8f5b 	dmb	ish
   b8e6e:	f011 0101 	ands.w	r1, r1, #1
   b8e72:	d10f      	bne.n	b8e94 <_Z16_fetch_usbserialv+0x38>
   b8e74:	4620      	mov	r0, r4
   b8e76:	9101      	str	r1, [sp, #4]
   b8e78:	f7fb fe6e 	bl	b4b58 <__cxa_guard_acquire>
   b8e7c:	9901      	ldr	r1, [sp, #4]
   b8e7e:	b148      	cbz	r0, b8e94 <_Z16_fetch_usbserialv+0x38>
   b8e80:	aa03      	add	r2, sp, #12
   b8e82:	4807      	ldr	r0, [pc, #28]	; (b8ea0 <_Z16_fetch_usbserialv+0x44>)
   b8e84:	f7ff ffc6 	bl	b8e14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8e88:	4620      	mov	r0, r4
   b8e8a:	f7fb fe6a 	bl	b4b62 <__cxa_guard_release>
   b8e8e:	4805      	ldr	r0, [pc, #20]	; (b8ea4 <_Z16_fetch_usbserialv+0x48>)
   b8e90:	f000 fb34 	bl	b94fc <atexit>
	return _usbserial;
}
   b8e94:	4802      	ldr	r0, [pc, #8]	; (b8ea0 <_Z16_fetch_usbserialv+0x44>)
   b8e96:	b008      	add	sp, #32
   b8e98:	bd10      	pop	{r4, pc}
   b8e9a:	bf00      	nop
   b8e9c:	2003e700 	.word	0x2003e700
   b8ea0:	2003e704 	.word	0x2003e704
   b8ea4:	000b8d9d 	.word	0x000b8d9d

000b8ea8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8ea8:	2200      	movs	r2, #0
   b8eaa:	6840      	ldr	r0, [r0, #4]
   b8eac:	4611      	mov	r1, r2
   b8eae:	f7fe be95 	b.w	b7bdc <network_ready>

000b8eb2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8eb2:	2200      	movs	r2, #0
   b8eb4:	6840      	ldr	r0, [r0, #4]
   b8eb6:	4611      	mov	r1, r2
   b8eb8:	f7fe beb0 	b.w	b7c1c <network_listening>

000b8ebc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8ebc:	2200      	movs	r2, #0
   b8ebe:	6840      	ldr	r0, [r0, #4]
   b8ec0:	4611      	mov	r1, r2
   b8ec2:	f7fe bebb 	b.w	b7c3c <network_get_listen_timeout>

000b8ec6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8ec6:	6840      	ldr	r0, [r0, #4]
   b8ec8:	2200      	movs	r2, #0
   b8eca:	f7fe beaf 	b.w	b7c2c <network_set_listen_timeout>

000b8ece <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8ece:	6840      	ldr	r0, [r0, #4]
   b8ed0:	2200      	movs	r2, #0
   b8ed2:	f081 0101 	eor.w	r1, r1, #1
   b8ed6:	f7fe be99 	b.w	b7c0c <network_listen>

000b8eda <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8eda:	2300      	movs	r3, #0
   b8edc:	6840      	ldr	r0, [r0, #4]
   b8ede:	461a      	mov	r2, r3
   b8ee0:	4619      	mov	r1, r3
   b8ee2:	f7fe be8b 	b.w	b7bfc <network_off>

000b8ee6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8ee6:	2300      	movs	r3, #0
   b8ee8:	6840      	ldr	r0, [r0, #4]
   b8eea:	461a      	mov	r2, r3
   b8eec:	4619      	mov	r1, r3
   b8eee:	f7fe be7d 	b.w	b7bec <network_on>

000b8ef2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8ef2:	2200      	movs	r2, #0
   b8ef4:	6840      	ldr	r0, [r0, #4]
   b8ef6:	4611      	mov	r1, r2
   b8ef8:	f7fe be60 	b.w	b7bbc <network_connecting>

000b8efc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8efc:	6840      	ldr	r0, [r0, #4]
   b8efe:	2200      	movs	r2, #0
   b8f00:	2102      	movs	r1, #2
   b8f02:	f7fe be63 	b.w	b7bcc <network_disconnect>

000b8f06 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8f06:	2300      	movs	r3, #0
   b8f08:	6840      	ldr	r0, [r0, #4]
   b8f0a:	461a      	mov	r2, r3
   b8f0c:	f7fe be4e 	b.w	b7bac <network_connect>

000b8f10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8f10:	4b02      	ldr	r3, [pc, #8]	; (b8f1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8f12:	2204      	movs	r2, #4
   b8f14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8f16:	4a02      	ldr	r2, [pc, #8]	; (b8f20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8f18:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8f1a:	4770      	bx	lr
   b8f1c:	2003e718 	.word	0x2003e718
   b8f20:	000bc7b4 	.word	0x000bc7b4

000b8f24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8f24:	4b01      	ldr	r3, [pc, #4]	; (b8f2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8f26:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8f28:	4770      	bx	lr
   b8f2a:	bf00      	nop
   b8f2c:	2003e048 	.word	0x2003e048

000b8f30 <serialEventRun>:
{
   b8f30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8f32:	4b0b      	ldr	r3, [pc, #44]	; (b8f60 <serialEventRun+0x30>)
   b8f34:	b143      	cbz	r3, b8f48 <serialEventRun+0x18>
   b8f36:	f7ff ff91 	bl	b8e5c <_Z16_fetch_usbserialv>
   b8f3a:	6803      	ldr	r3, [r0, #0]
   b8f3c:	691b      	ldr	r3, [r3, #16]
   b8f3e:	4798      	blx	r3
   b8f40:	2800      	cmp	r0, #0
   b8f42:	dd01      	ble.n	b8f48 <serialEventRun+0x18>
        serialEvent();
   b8f44:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8f48:	4b06      	ldr	r3, [pc, #24]	; (b8f64 <serialEventRun+0x34>)
   b8f4a:	b143      	cbz	r3, b8f5e <serialEventRun+0x2e>
   b8f4c:	f000 f99a 	bl	b9284 <_Z22__fetch_global_Serial1v>
   b8f50:	6803      	ldr	r3, [r0, #0]
   b8f52:	691b      	ldr	r3, [r3, #16]
   b8f54:	4798      	blx	r3
   b8f56:	2800      	cmp	r0, #0
   b8f58:	dd01      	ble.n	b8f5e <serialEventRun+0x2e>
        serialEvent1();
   b8f5a:	f3af 8000 	nop.w
}
   b8f5e:	bd08      	pop	{r3, pc}
	...

000b8f68 <_post_loop>:
{
   b8f68:	b508      	push	{r3, lr}
	serialEventRun();
   b8f6a:	f7ff ffe1 	bl	b8f30 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8f6e:	f7fe fc01 	bl	b7774 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8f72:	4b01      	ldr	r3, [pc, #4]	; (b8f78 <_post_loop+0x10>)
   b8f74:	6018      	str	r0, [r3, #0]
}
   b8f76:	bd08      	pop	{r3, pc}
   b8f78:	2003e728 	.word	0x2003e728

000b8f7c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8f7c:	4805      	ldr	r0, [pc, #20]	; (b8f94 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8f7e:	4a06      	ldr	r2, [pc, #24]	; (b8f98 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8f80:	4906      	ldr	r1, [pc, #24]	; (b8f9c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8f82:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8f84:	1a12      	subs	r2, r2, r0
   b8f86:	f000 faca 	bl	b951e <memcpy>
    __backup_sram_signature = signature;
   b8f8a:	4b05      	ldr	r3, [pc, #20]	; (b8fa0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8f8c:	4a05      	ldr	r2, [pc, #20]	; (b8fa4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8f8e:	601a      	str	r2, [r3, #0]
}
   b8f90:	bd08      	pop	{r3, pc}
   b8f92:	bf00      	nop
   b8f94:	2003f400 	.word	0x2003f400
   b8f98:	2003f404 	.word	0x2003f404
   b8f9c:	000bcea8 	.word	0x000bcea8
   b8fa0:	2003f400 	.word	0x2003f400
   b8fa4:	9a271c1e 	.word	0x9a271c1e

000b8fa8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8fa8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8faa:	2300      	movs	r3, #0
   b8fac:	9300      	str	r3, [sp, #0]
   b8fae:	461a      	mov	r2, r3
   b8fb0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8fb4:	f7fe fdd8 	bl	b7b68 <system_ctrl_set_result>
}
   b8fb8:	b003      	add	sp, #12
   b8fba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8fc0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8fc0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8fc2:	8843      	ldrh	r3, [r0, #2]
   b8fc4:	2b0a      	cmp	r3, #10
   b8fc6:	d008      	beq.n	b8fda <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8fc8:	2b50      	cmp	r3, #80	; 0x50
   b8fca:	d10b      	bne.n	b8fe4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8fcc:	4b09      	ldr	r3, [pc, #36]	; (b8ff4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8fce:	681b      	ldr	r3, [r3, #0]
   b8fd0:	b14b      	cbz	r3, b8fe6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8fd2:	b003      	add	sp, #12
   b8fd4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8fd8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8fda:	f7ff ffe5 	bl	b8fa8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8fde:	b003      	add	sp, #12
   b8fe0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8fe4:	2300      	movs	r3, #0
   b8fe6:	9300      	str	r3, [sp, #0]
   b8fe8:	461a      	mov	r2, r3
   b8fea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8fee:	f7fe fdbb 	bl	b7b68 <system_ctrl_set_result>
}
   b8ff2:	e7f4      	b.n	b8fde <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8ff4:	2003e724 	.word	0x2003e724

000b8ff8 <module_user_init_hook>:
{
   b8ff8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8ffa:	4812      	ldr	r0, [pc, #72]	; (b9044 <module_user_init_hook+0x4c>)
   b8ffc:	2100      	movs	r1, #0
   b8ffe:	f7fe fe7d 	bl	b7cfc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9002:	4b11      	ldr	r3, [pc, #68]	; (b9048 <module_user_init_hook+0x50>)
   b9004:	681a      	ldr	r2, [r3, #0]
   b9006:	4b11      	ldr	r3, [pc, #68]	; (b904c <module_user_init_hook+0x54>)
   b9008:	429a      	cmp	r2, r3
   b900a:	4b11      	ldr	r3, [pc, #68]	; (b9050 <module_user_init_hook+0x58>)
   b900c:	bf0c      	ite	eq
   b900e:	2201      	moveq	r2, #1
   b9010:	2200      	movne	r2, #0
   b9012:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9014:	d001      	beq.n	b901a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9016:	f7ff ffb1 	bl	b8f7c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b901a:	f7fe fb9b 	bl	b7754 <HAL_RNG_GetRandomNumber>
   b901e:	4604      	mov	r4, r0
    srand(seed);
   b9020:	f000 fa94 	bl	b954c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9024:	4b0b      	ldr	r3, [pc, #44]	; (b9054 <module_user_init_hook+0x5c>)
   b9026:	b113      	cbz	r3, b902e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9028:	4620      	mov	r0, r4
   b902a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b902e:	2100      	movs	r1, #0
   b9030:	4808      	ldr	r0, [pc, #32]	; (b9054 <module_user_init_hook+0x5c>)
   b9032:	f7fe fdb3 	bl	b7b9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b903a:	4807      	ldr	r0, [pc, #28]	; (b9058 <module_user_init_hook+0x60>)
   b903c:	2100      	movs	r1, #0
   b903e:	f7fe bd89 	b.w	b7b54 <system_ctrl_set_app_request_handler>
   b9042:	bf00      	nop
   b9044:	000b8f25 	.word	0x000b8f25
   b9048:	2003f400 	.word	0x2003f400
   b904c:	9a271c1e 	.word	0x9a271c1e
   b9050:	2003e720 	.word	0x2003e720
   b9054:	00000000 	.word	0x00000000
   b9058:	000b8fc1 	.word	0x000b8fc1

000b905c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b905c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b905e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b9060:	d902      	bls.n	b9068 <pinAvailable+0xc>
    return false;
   b9062:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b9064:	b002      	add	sp, #8
   b9066:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b9068:	f1a0 030b 	sub.w	r3, r0, #11
   b906c:	2b02      	cmp	r3, #2
   b906e:	d81a      	bhi.n	b90a6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b9070:	4c17      	ldr	r4, [pc, #92]	; (b90d0 <pinAvailable+0x74>)
   b9072:	7821      	ldrb	r1, [r4, #0]
   b9074:	f3bf 8f5b 	dmb	ish
   b9078:	f011 0101 	ands.w	r1, r1, #1
   b907c:	d10b      	bne.n	b9096 <pinAvailable+0x3a>
   b907e:	4620      	mov	r0, r4
   b9080:	9101      	str	r1, [sp, #4]
   b9082:	f7fb fd69 	bl	b4b58 <__cxa_guard_acquire>
   b9086:	9901      	ldr	r1, [sp, #4]
   b9088:	b128      	cbz	r0, b9096 <pinAvailable+0x3a>
   b908a:	4812      	ldr	r0, [pc, #72]	; (b90d4 <pinAvailable+0x78>)
   b908c:	f7ff f9ba 	bl	b8404 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9090:	4620      	mov	r0, r4
   b9092:	f7fb fd66 	bl	b4b62 <__cxa_guard_release>
   b9096:	4b0f      	ldr	r3, [pc, #60]	; (b90d4 <pinAvailable+0x78>)
   b9098:	7818      	ldrb	r0, [r3, #0]
   b909a:	f7fe fc8b 	bl	b79b4 <hal_spi_is_enabled>
   b909e:	2800      	cmp	r0, #0
   b90a0:	d1df      	bne.n	b9062 <pinAvailable+0x6>
  return true; // 'pin' is available
   b90a2:	2001      	movs	r0, #1
   b90a4:	e7de      	b.n	b9064 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b90a6:	2801      	cmp	r0, #1
   b90a8:	d809      	bhi.n	b90be <pinAvailable+0x62>
   b90aa:	f000 f8ab 	bl	b9204 <_Z19__fetch_global_Wirev>
   b90ae:	2100      	movs	r1, #0
   b90b0:	7c00      	ldrb	r0, [r0, #16]
   b90b2:	f7fe fbef 	bl	b7894 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b90b6:	f080 0001 	eor.w	r0, r0, #1
   b90ba:	b2c0      	uxtb	r0, r0
   b90bc:	e7d2      	b.n	b9064 <pinAvailable+0x8>
   b90be:	3809      	subs	r0, #9
   b90c0:	2801      	cmp	r0, #1
   b90c2:	d8ee      	bhi.n	b90a2 <pinAvailable+0x46>
   b90c4:	f000 f8de 	bl	b9284 <_Z22__fetch_global_Serial1v>
   b90c8:	7c00      	ldrb	r0, [r0, #16]
   b90ca:	f7fe fcc3 	bl	b7a54 <hal_usart_is_enabled>
   b90ce:	e7f2      	b.n	b90b6 <pinAvailable+0x5a>
   b90d0:	2003e6b8 	.word	0x2003e6b8
   b90d4:	2003e6bc 	.word	0x2003e6bc

000b90d8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b90d8:	2823      	cmp	r0, #35	; 0x23
{
   b90da:	b538      	push	{r3, r4, r5, lr}
   b90dc:	4604      	mov	r4, r0
   b90de:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b90e0:	d80a      	bhi.n	b90f8 <pinMode+0x20>
   b90e2:	29ff      	cmp	r1, #255	; 0xff
   b90e4:	d008      	beq.n	b90f8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b90e6:	f7ff ffb9 	bl	b905c <pinAvailable>
   b90ea:	b128      	cbz	r0, b90f8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b90ec:	4629      	mov	r1, r5
   b90ee:	4620      	mov	r0, r4
}
   b90f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b90f4:	f7fe bb4e 	b.w	b7794 <hal_gpio_mode>
}
   b90f8:	bd38      	pop	{r3, r4, r5, pc}

000b90fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b90fa:	b538      	push	{r3, r4, r5, lr}
   b90fc:	4604      	mov	r4, r0
   b90fe:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b9100:	f7fe fb50 	bl	b77a4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9104:	28ff      	cmp	r0, #255	; 0xff
   b9106:	d010      	beq.n	b912a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9108:	2806      	cmp	r0, #6
   b910a:	d804      	bhi.n	b9116 <digitalWrite+0x1c>
   b910c:	234d      	movs	r3, #77	; 0x4d
   b910e:	fa23 f000 	lsr.w	r0, r3, r0
   b9112:	07c3      	lsls	r3, r0, #31
   b9114:	d409      	bmi.n	b912a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b9116:	4620      	mov	r0, r4
   b9118:	f7ff ffa0 	bl	b905c <pinAvailable>
   b911c:	b128      	cbz	r0, b912a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b911e:	4629      	mov	r1, r5
   b9120:	4620      	mov	r0, r4
}
   b9122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b9126:	f7fe bb45 	b.w	b77b4 <hal_gpio_write>
}
   b912a:	bd38      	pop	{r3, r4, r5, pc}

000b912c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b912c:	b510      	push	{r4, lr}
   b912e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b9130:	f7fe fb38 	bl	b77a4 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b9134:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b9136:	b2db      	uxtb	r3, r3
   b9138:	2b01      	cmp	r3, #1
   b913a:	d908      	bls.n	b914e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b913c:	4620      	mov	r0, r4
   b913e:	f7ff ff8d 	bl	b905c <pinAvailable>
   b9142:	b120      	cbz	r0, b914e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b9144:	4620      	mov	r0, r4
}
   b9146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b914a:	f7fe bb3b 	b.w	b77c4 <hal_gpio_read>
}
   b914e:	2000      	movs	r0, #0
   b9150:	bd10      	pop	{r4, pc}

000b9152 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b9152:	280d      	cmp	r0, #13
{
   b9154:	b510      	push	{r4, lr}
   b9156:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b9158:	bf9c      	itt	ls
   b915a:	340e      	addls	r4, #14
   b915c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b915e:	4620      	mov	r0, r4
   b9160:	f7ff ff7c 	bl	b905c <pinAvailable>
   b9164:	b150      	cbz	r0, b917c <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b9166:	2103      	movs	r1, #3
   b9168:	4620      	mov	r0, r4
   b916a:	f7fe fb0b 	bl	b7784 <hal_pin_validate_function>
   b916e:	2803      	cmp	r0, #3
   b9170:	d104      	bne.n	b917c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b9172:	4620      	mov	r0, r4
}
   b9174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b9178:	f7fe bb34 	b.w	b77e4 <hal_adc_read>
}
   b917c:	2000      	movs	r0, #0
   b917e:	bd10      	pop	{r4, pc}

000b9180 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b9180:	b538      	push	{r3, r4, r5, lr}
   b9182:	4604      	mov	r4, r0
   b9184:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b9186:	f7ff ff69 	bl	b905c <pinAvailable>
   b918a:	b1f0      	cbz	r0, b91ca <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b918c:	2104      	movs	r1, #4
   b918e:	4620      	mov	r0, r4
   b9190:	f7fe faf8 	bl	b7784 <hal_pin_validate_function>
   b9194:	2804      	cmp	r0, #4
   b9196:	d105      	bne.n	b91a4 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b9198:	b2a9      	uxth	r1, r5
   b919a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b919c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b91a0:	f7fe bb18 	b.w	b77d4 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b91a4:	2102      	movs	r1, #2
   b91a6:	4620      	mov	r0, r4
   b91a8:	f7fe faec 	bl	b7784 <hal_pin_validate_function>
   b91ac:	2802      	cmp	r0, #2
   b91ae:	d10c      	bne.n	b91ca <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b91b0:	4620      	mov	r0, r4
   b91b2:	f7fe faf7 	bl	b77a4 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b91b6:	2801      	cmp	r0, #1
   b91b8:	d001      	beq.n	b91be <_Z11analogWritetm+0x3e>
   b91ba:	2804      	cmp	r0, #4
   b91bc:	d105      	bne.n	b91ca <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b91be:	4629      	mov	r1, r5
   b91c0:	4620      	mov	r0, r4
}
   b91c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b91c6:	f7fe bb15 	b.w	b77f4 <hal_pwm_write_ext>
}
   b91ca:	bd38      	pop	{r3, r4, r5, pc}

000b91cc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b91cc:	4770      	bx	lr
	...

000b91d0 <_Z17acquireWireBufferv>:
{
   b91d0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b91d2:	4b0a      	ldr	r3, [pc, #40]	; (b91fc <_Z17acquireWireBufferv+0x2c>)
   b91d4:	6003      	str	r3, [r0, #0]
   b91d6:	2301      	movs	r3, #1
{
   b91d8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b91da:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b91dc:	4908      	ldr	r1, [pc, #32]	; (b9200 <_Z17acquireWireBufferv+0x30>)
   b91de:	2020      	movs	r0, #32
   b91e0:	f000 f874 	bl	b92cc <_ZnajRKSt9nothrow_t>
	};
   b91e4:	2520      	movs	r5, #32
   b91e6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b91e8:	4905      	ldr	r1, [pc, #20]	; (b9200 <_Z17acquireWireBufferv+0x30>)
	};
   b91ea:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b91ec:	4628      	mov	r0, r5
   b91ee:	f000 f86d 	bl	b92cc <_ZnajRKSt9nothrow_t>
	};
   b91f2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b91f6:	4620      	mov	r0, r4
   b91f8:	bd38      	pop	{r3, r4, r5, pc}
   b91fa:	bf00      	nop
   b91fc:	00010018 	.word	0x00010018
   b9200:	000bc7e8 	.word	0x000bc7e8

000b9204 <_Z19__fetch_global_Wirev>:
{
   b9204:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9206:	4d0e      	ldr	r5, [pc, #56]	; (b9240 <_Z19__fetch_global_Wirev+0x3c>)
   b9208:	7829      	ldrb	r1, [r5, #0]
   b920a:	f3bf 8f5b 	dmb	ish
   b920e:	f011 0401 	ands.w	r4, r1, #1
{
   b9212:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9214:	d111      	bne.n	b923a <_Z19__fetch_global_Wirev+0x36>
   b9216:	4628      	mov	r0, r5
   b9218:	f7fb fc9e 	bl	b4b58 <__cxa_guard_acquire>
   b921c:	b168      	cbz	r0, b923a <_Z19__fetch_global_Wirev+0x36>
   b921e:	4668      	mov	r0, sp
   b9220:	f7ff ffd6 	bl	b91d0 <_Z17acquireWireBufferv>
   b9224:	466a      	mov	r2, sp
   b9226:	4621      	mov	r1, r4
   b9228:	4806      	ldr	r0, [pc, #24]	; (b9244 <_Z19__fetch_global_Wirev+0x40>)
   b922a:	f7fe fde5 	bl	b7df8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b922e:	4628      	mov	r0, r5
   b9230:	f7fb fc97 	bl	b4b62 <__cxa_guard_release>
   b9234:	4804      	ldr	r0, [pc, #16]	; (b9248 <_Z19__fetch_global_Wirev+0x44>)
   b9236:	f000 f961 	bl	b94fc <atexit>
	return wire;
}
   b923a:	4802      	ldr	r0, [pc, #8]	; (b9244 <_Z19__fetch_global_Wirev+0x40>)
   b923c:	b007      	add	sp, #28
   b923e:	bd30      	pop	{r4, r5, pc}
   b9240:	2003e72c 	.word	0x2003e72c
   b9244:	2003e730 	.word	0x2003e730
   b9248:	000b91cd 	.word	0x000b91cd

000b924c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b924c:	4770      	bx	lr
	...

000b9250 <_Z20acquireSerial1Bufferv>:
{
   b9250:	b538      	push	{r3, r4, r5, lr}
   b9252:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9254:	2514      	movs	r5, #20
   b9256:	462a      	mov	r2, r5
   b9258:	2100      	movs	r1, #0
   b925a:	f000 f96e 	bl	b953a <memset>
   b925e:	8025      	strh	r5, [r4, #0]
   b9260:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9262:	4907      	ldr	r1, [pc, #28]	; (b9280 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9264:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9266:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9268:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b926a:	f000 f82f 	bl	b92cc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b926e:	4904      	ldr	r1, [pc, #16]	; (b9280 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9270:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9272:	4628      	mov	r0, r5
   b9274:	f000 f82a 	bl	b92cc <_ZnajRKSt9nothrow_t>
    };
   b9278:	60e0      	str	r0, [r4, #12]
}
   b927a:	4620      	mov	r0, r4
   b927c:	bd38      	pop	{r3, r4, r5, pc}
   b927e:	bf00      	nop
   b9280:	000bc7e8 	.word	0x000bc7e8

000b9284 <_Z22__fetch_global_Serial1v>:
{
   b9284:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9286:	4d0e      	ldr	r5, [pc, #56]	; (b92c0 <_Z22__fetch_global_Serial1v+0x3c>)
   b9288:	7829      	ldrb	r1, [r5, #0]
   b928a:	f3bf 8f5b 	dmb	ish
   b928e:	f011 0401 	ands.w	r4, r1, #1
{
   b9292:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9294:	d111      	bne.n	b92ba <_Z22__fetch_global_Serial1v+0x36>
   b9296:	4628      	mov	r0, r5
   b9298:	f7fb fc5e 	bl	b4b58 <__cxa_guard_acquire>
   b929c:	b168      	cbz	r0, b92ba <_Z22__fetch_global_Serial1v+0x36>
   b929e:	a801      	add	r0, sp, #4
   b92a0:	f7ff ffd6 	bl	b9250 <_Z20acquireSerial1Bufferv>
   b92a4:	aa01      	add	r2, sp, #4
   b92a6:	4621      	mov	r1, r4
   b92a8:	4806      	ldr	r0, [pc, #24]	; (b92c4 <_Z22__fetch_global_Serial1v+0x40>)
   b92aa:	f7ff fd61 	bl	b8d70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b92ae:	4628      	mov	r0, r5
   b92b0:	f7fb fc57 	bl	b4b62 <__cxa_guard_release>
   b92b4:	4804      	ldr	r0, [pc, #16]	; (b92c8 <_Z22__fetch_global_Serial1v+0x44>)
   b92b6:	f000 f921 	bl	b94fc <atexit>
    return serial1;
}
   b92ba:	4802      	ldr	r0, [pc, #8]	; (b92c4 <_Z22__fetch_global_Serial1v+0x40>)
   b92bc:	b007      	add	sp, #28
   b92be:	bd30      	pop	{r4, r5, pc}
   b92c0:	2003e744 	.word	0x2003e744
   b92c4:	2003e748 	.word	0x2003e748
   b92c8:	000b924d 	.word	0x000b924d

000b92cc <_ZnajRKSt9nothrow_t>:
   b92cc:	f7fb bc31 	b.w	b4b32 <_Znaj>

000b92d0 <_ZSt25__throw_bad_function_callv>:
   b92d0:	b508      	push	{r3, lr}
   b92d2:	f7fe fcf3 	bl	b7cbc <abort>
	...

000b92d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b92d8:	4901      	ldr	r1, [pc, #4]	; (b92e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b92da:	f000 b8f9 	b.w	b94d0 <_ZNKSt9type_infoeqERKS_>
   b92de:	bf00      	nop
   b92e0:	000bc804 	.word	0x000bc804

000b92e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b92e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b92e6:	2400      	movs	r4, #0
   b92e8:	2310      	movs	r3, #16
   b92ea:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b92ee:	6803      	ldr	r3, [r0, #0]
   b92f0:	4615      	mov	r5, r2
   b92f2:	699e      	ldr	r6, [r3, #24]
   b92f4:	6812      	ldr	r2, [r2, #0]
   b92f6:	466b      	mov	r3, sp
   b92f8:	e9cd 4400 	strd	r4, r4, [sp]
   b92fc:	47b0      	blx	r6
   b92fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9302:	f003 0306 	and.w	r3, r3, #6
   b9306:	2b06      	cmp	r3, #6
   b9308:	bf03      	ittte	eq
   b930a:	9b00      	ldreq	r3, [sp, #0]
   b930c:	602b      	streq	r3, [r5, #0]
   b930e:	2001      	moveq	r0, #1
   b9310:	4620      	movne	r0, r4
   b9312:	b004      	add	sp, #16
   b9314:	bd70      	pop	{r4, r5, r6, pc}

000b9316 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9316:	9800      	ldr	r0, [sp, #0]
   b9318:	4290      	cmp	r0, r2
   b931a:	bf14      	ite	ne
   b931c:	2001      	movne	r0, #1
   b931e:	2006      	moveq	r0, #6
   b9320:	4770      	bx	lr
	...

000b9324 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9324:	b510      	push	{r4, lr}
   b9326:	4b03      	ldr	r3, [pc, #12]	; (b9334 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9328:	6003      	str	r3, [r0, #0]
   b932a:	4604      	mov	r4, r0
   b932c:	f000 f8cd 	bl	b94ca <_ZNSt9type_infoD1Ev>
   b9330:	4620      	mov	r0, r4
   b9332:	bd10      	pop	{r4, pc}
   b9334:	000bc844 	.word	0x000bc844

000b9338 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9338:	b510      	push	{r4, lr}
   b933a:	4604      	mov	r4, r0
   b933c:	f7ff fff2 	bl	b9324 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9340:	4620      	mov	r0, r4
   b9342:	2108      	movs	r1, #8
   b9344:	f7fb fbf9 	bl	b4b3a <_ZdlPvj>
   b9348:	4620      	mov	r0, r4
   b934a:	bd10      	pop	{r4, pc}

000b934c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b934c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9350:	461f      	mov	r7, r3
   b9352:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9356:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b935a:	4598      	cmp	r8, r3
   b935c:	4606      	mov	r6, r0
   b935e:	4615      	mov	r5, r2
   b9360:	d107      	bne.n	b9372 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9362:	9907      	ldr	r1, [sp, #28]
   b9364:	f000 f8b4 	bl	b94d0 <_ZNKSt9type_infoeqERKS_>
   b9368:	b118      	cbz	r0, b9372 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b936a:	7165      	strb	r5, [r4, #5]
   b936c:	2000      	movs	r0, #0
   b936e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9372:	4639      	mov	r1, r7
   b9374:	4630      	mov	r0, r6
   b9376:	f000 f8ab 	bl	b94d0 <_ZNKSt9type_infoeqERKS_>
   b937a:	2800      	cmp	r0, #0
   b937c:	d0f6      	beq.n	b936c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b937e:	2301      	movs	r3, #1
   b9380:	f8c4 8000 	str.w	r8, [r4]
   b9384:	7125      	strb	r5, [r4, #4]
   b9386:	71a3      	strb	r3, [r4, #6]
   b9388:	e7f0      	b.n	b936c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b938a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b938a:	b538      	push	{r3, r4, r5, lr}
   b938c:	4615      	mov	r5, r2
   b938e:	461c      	mov	r4, r3
   b9390:	f000 f89e 	bl	b94d0 <_ZNKSt9type_infoeqERKS_>
   b9394:	b120      	cbz	r0, b93a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9396:	2308      	movs	r3, #8
   b9398:	60e3      	str	r3, [r4, #12]
   b939a:	2306      	movs	r3, #6
   b939c:	6025      	str	r5, [r4, #0]
   b939e:	7123      	strb	r3, [r4, #4]
   b93a0:	bd38      	pop	{r3, r4, r5, pc}

000b93a2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b93a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b93a4:	4605      	mov	r5, r0
   b93a6:	460c      	mov	r4, r1
   b93a8:	9201      	str	r2, [sp, #4]
   b93aa:	461e      	mov	r6, r3
   b93ac:	f000 f890 	bl	b94d0 <_ZNKSt9type_infoeqERKS_>
   b93b0:	b950      	cbnz	r0, b93c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b93b2:	2e03      	cmp	r6, #3
   b93b4:	d808      	bhi.n	b93c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b93b6:	6823      	ldr	r3, [r4, #0]
   b93b8:	9a01      	ldr	r2, [sp, #4]
   b93ba:	695b      	ldr	r3, [r3, #20]
   b93bc:	4629      	mov	r1, r5
   b93be:	4620      	mov	r0, r4
   b93c0:	b002      	add	sp, #8
   b93c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b93c6:	4718      	bx	r3
   b93c8:	b002      	add	sp, #8
   b93ca:	bd70      	pop	{r4, r5, r6, pc}

000b93cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b93cc:	b510      	push	{r4, lr}
   b93ce:	4b03      	ldr	r3, [pc, #12]	; (b93dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b93d0:	6003      	str	r3, [r0, #0]
   b93d2:	4604      	mov	r4, r0
   b93d4:	f7ff ffa6 	bl	b9324 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b93d8:	4620      	mov	r0, r4
   b93da:	bd10      	pop	{r4, pc}
   b93dc:	000bc8a4 	.word	0x000bc8a4

000b93e0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b93e0:	b510      	push	{r4, lr}
   b93e2:	4604      	mov	r4, r0
   b93e4:	f7ff fff2 	bl	b93cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b93e8:	4620      	mov	r0, r4
   b93ea:	210c      	movs	r1, #12
   b93ec:	f7fb fba5 	bl	b4b3a <_ZdlPvj>
   b93f0:	4620      	mov	r0, r4
   b93f2:	bd10      	pop	{r4, pc}

000b93f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b93f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b93f6:	9f08      	ldr	r7, [sp, #32]
   b93f8:	4297      	cmp	r7, r2
   b93fa:	4605      	mov	r5, r0
   b93fc:	460e      	mov	r6, r1
   b93fe:	4614      	mov	r4, r2
   b9400:	d00a      	beq.n	b9418 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9402:	68a8      	ldr	r0, [r5, #8]
   b9404:	6802      	ldr	r2, [r0, #0]
   b9406:	9708      	str	r7, [sp, #32]
   b9408:	6a15      	ldr	r5, [r2, #32]
   b940a:	4631      	mov	r1, r6
   b940c:	4622      	mov	r2, r4
   b940e:	46ac      	mov	ip, r5
   b9410:	b003      	add	sp, #12
   b9412:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9416:	4760      	bx	ip
   b9418:	4619      	mov	r1, r3
   b941a:	9301      	str	r3, [sp, #4]
   b941c:	f000 f858 	bl	b94d0 <_ZNKSt9type_infoeqERKS_>
   b9420:	9b01      	ldr	r3, [sp, #4]
   b9422:	2800      	cmp	r0, #0
   b9424:	d0ed      	beq.n	b9402 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9426:	2006      	movs	r0, #6
   b9428:	b003      	add	sp, #12
   b942a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b942c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b942c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9430:	460d      	mov	r5, r1
   b9432:	4619      	mov	r1, r3
   b9434:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9438:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b943c:	4681      	mov	r9, r0
   b943e:	4617      	mov	r7, r2
   b9440:	4698      	mov	r8, r3
   b9442:	f000 f845 	bl	b94d0 <_ZNKSt9type_infoeqERKS_>
   b9446:	b190      	cbz	r0, b946e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9448:	2d00      	cmp	r5, #0
   b944a:	6034      	str	r4, [r6, #0]
   b944c:	7137      	strb	r7, [r6, #4]
   b944e:	db09      	blt.n	b9464 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9450:	1961      	adds	r1, r4, r5
   b9452:	458a      	cmp	sl, r1
   b9454:	bf0c      	ite	eq
   b9456:	2106      	moveq	r1, #6
   b9458:	2101      	movne	r1, #1
   b945a:	71b1      	strb	r1, [r6, #6]
   b945c:	2000      	movs	r0, #0
   b945e:	b001      	add	sp, #4
   b9460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9464:	3502      	adds	r5, #2
   b9466:	d1f9      	bne.n	b945c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9468:	2301      	movs	r3, #1
   b946a:	71b3      	strb	r3, [r6, #6]
   b946c:	e7f6      	b.n	b945c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b946e:	4554      	cmp	r4, sl
   b9470:	d106      	bne.n	b9480 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9472:	4659      	mov	r1, fp
   b9474:	4648      	mov	r0, r9
   b9476:	f000 f82b 	bl	b94d0 <_ZNKSt9type_infoeqERKS_>
   b947a:	b108      	cbz	r0, b9480 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b947c:	7177      	strb	r7, [r6, #5]
   b947e:	e7ed      	b.n	b945c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9480:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9484:	6803      	ldr	r3, [r0, #0]
   b9486:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b948a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b948e:	69dc      	ldr	r4, [r3, #28]
   b9490:	463a      	mov	r2, r7
   b9492:	4643      	mov	r3, r8
   b9494:	4629      	mov	r1, r5
   b9496:	46a4      	mov	ip, r4
   b9498:	b001      	add	sp, #4
   b949a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b949e:	4760      	bx	ip

000b94a0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b94a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b94a4:	4607      	mov	r7, r0
   b94a6:	460c      	mov	r4, r1
   b94a8:	4615      	mov	r5, r2
   b94aa:	461e      	mov	r6, r3
   b94ac:	f7ff ff6d 	bl	b938a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b94b0:	b948      	cbnz	r0, b94c6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b94b2:	68b8      	ldr	r0, [r7, #8]
   b94b4:	6803      	ldr	r3, [r0, #0]
   b94b6:	699f      	ldr	r7, [r3, #24]
   b94b8:	462a      	mov	r2, r5
   b94ba:	4633      	mov	r3, r6
   b94bc:	4621      	mov	r1, r4
   b94be:	46bc      	mov	ip, r7
   b94c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b94c4:	4760      	bx	ip
   b94c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b94ca <_ZNSt9type_infoD1Ev>:
   b94ca:	4770      	bx	lr

000b94cc <_ZNKSt9type_info14__is_pointer_pEv>:
   b94cc:	2000      	movs	r0, #0
   b94ce:	4770      	bx	lr

000b94d0 <_ZNKSt9type_infoeqERKS_>:
   b94d0:	4281      	cmp	r1, r0
   b94d2:	b508      	push	{r3, lr}
   b94d4:	d00e      	beq.n	b94f4 <_ZNKSt9type_infoeqERKS_+0x24>
   b94d6:	6840      	ldr	r0, [r0, #4]
   b94d8:	7803      	ldrb	r3, [r0, #0]
   b94da:	2b2a      	cmp	r3, #42	; 0x2a
   b94dc:	d00c      	beq.n	b94f8 <_ZNKSt9type_infoeqERKS_+0x28>
   b94de:	6849      	ldr	r1, [r1, #4]
   b94e0:	780b      	ldrb	r3, [r1, #0]
   b94e2:	2b2a      	cmp	r3, #42	; 0x2a
   b94e4:	bf08      	it	eq
   b94e6:	3101      	addeq	r1, #1
   b94e8:	f7fb fabc 	bl	b4a64 <strcmp>
   b94ec:	fab0 f080 	clz	r0, r0
   b94f0:	0940      	lsrs	r0, r0, #5
   b94f2:	bd08      	pop	{r3, pc}
   b94f4:	2001      	movs	r0, #1
   b94f6:	e7fc      	b.n	b94f2 <_ZNKSt9type_infoeqERKS_+0x22>
   b94f8:	2000      	movs	r0, #0
   b94fa:	e7fa      	b.n	b94f2 <_ZNKSt9type_infoeqERKS_+0x22>

000b94fc <atexit>:
   b94fc:	2300      	movs	r3, #0
   b94fe:	4601      	mov	r1, r0
   b9500:	461a      	mov	r2, r3
   b9502:	4618      	mov	r0, r3
   b9504:	f000 bf32 	b.w	ba36c <__register_exitproc>

000b9508 <atof>:
   b9508:	2100      	movs	r1, #0
   b950a:	f000 be97 	b.w	ba23c <strtod>

000b950e <atoi>:
   b950e:	220a      	movs	r2, #10
   b9510:	2100      	movs	r1, #0
   b9512:	f000 bf21 	b.w	ba358 <strtol>

000b9516 <atol>:
   b9516:	220a      	movs	r2, #10
   b9518:	2100      	movs	r1, #0
   b951a:	f000 bf1d 	b.w	ba358 <strtol>

000b951e <memcpy>:
   b951e:	440a      	add	r2, r1
   b9520:	4291      	cmp	r1, r2
   b9522:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9526:	d100      	bne.n	b952a <memcpy+0xc>
   b9528:	4770      	bx	lr
   b952a:	b510      	push	{r4, lr}
   b952c:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9530:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9534:	4291      	cmp	r1, r2
   b9536:	d1f9      	bne.n	b952c <memcpy+0xe>
   b9538:	bd10      	pop	{r4, pc}

000b953a <memset>:
   b953a:	4402      	add	r2, r0
   b953c:	4603      	mov	r3, r0
   b953e:	4293      	cmp	r3, r2
   b9540:	d100      	bne.n	b9544 <memset+0xa>
   b9542:	4770      	bx	lr
   b9544:	f803 1b01 	strb.w	r1, [r3], #1
   b9548:	e7f9      	b.n	b953e <memset+0x4>
	...

000b954c <srand>:
   b954c:	b538      	push	{r3, r4, r5, lr}
   b954e:	4b10      	ldr	r3, [pc, #64]	; (b9590 <srand+0x44>)
   b9550:	681d      	ldr	r5, [r3, #0]
   b9552:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9554:	4604      	mov	r4, r0
   b9556:	b9b3      	cbnz	r3, b9586 <srand+0x3a>
   b9558:	2018      	movs	r0, #24
   b955a:	f7fe fb87 	bl	b7c6c <malloc>
   b955e:	4602      	mov	r2, r0
   b9560:	63a8      	str	r0, [r5, #56]	; 0x38
   b9562:	b920      	cbnz	r0, b956e <srand+0x22>
   b9564:	4b0b      	ldr	r3, [pc, #44]	; (b9594 <srand+0x48>)
   b9566:	480c      	ldr	r0, [pc, #48]	; (b9598 <srand+0x4c>)
   b9568:	2142      	movs	r1, #66	; 0x42
   b956a:	f7fe fbbf 	bl	b7cec <__assert_func>
   b956e:	490b      	ldr	r1, [pc, #44]	; (b959c <srand+0x50>)
   b9570:	4b0b      	ldr	r3, [pc, #44]	; (b95a0 <srand+0x54>)
   b9572:	e9c0 1300 	strd	r1, r3, [r0]
   b9576:	4b0b      	ldr	r3, [pc, #44]	; (b95a4 <srand+0x58>)
   b9578:	6083      	str	r3, [r0, #8]
   b957a:	230b      	movs	r3, #11
   b957c:	8183      	strh	r3, [r0, #12]
   b957e:	2100      	movs	r1, #0
   b9580:	2001      	movs	r0, #1
   b9582:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9586:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9588:	2200      	movs	r2, #0
   b958a:	611c      	str	r4, [r3, #16]
   b958c:	615a      	str	r2, [r3, #20]
   b958e:	bd38      	pop	{r3, r4, r5, pc}
   b9590:	2003e048 	.word	0x2003e048
   b9594:	000bc8dd 	.word	0x000bc8dd
   b9598:	000bc8f4 	.word	0x000bc8f4
   b959c:	abcd330e 	.word	0xabcd330e
   b95a0:	e66d1234 	.word	0xe66d1234
   b95a4:	0005deec 	.word	0x0005deec

000b95a8 <strncmp>:
   b95a8:	b510      	push	{r4, lr}
   b95aa:	b17a      	cbz	r2, b95cc <strncmp+0x24>
   b95ac:	4603      	mov	r3, r0
   b95ae:	3901      	subs	r1, #1
   b95b0:	1884      	adds	r4, r0, r2
   b95b2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b95b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b95ba:	4290      	cmp	r0, r2
   b95bc:	d101      	bne.n	b95c2 <strncmp+0x1a>
   b95be:	42a3      	cmp	r3, r4
   b95c0:	d101      	bne.n	b95c6 <strncmp+0x1e>
   b95c2:	1a80      	subs	r0, r0, r2
   b95c4:	bd10      	pop	{r4, pc}
   b95c6:	2800      	cmp	r0, #0
   b95c8:	d1f3      	bne.n	b95b2 <strncmp+0xa>
   b95ca:	e7fa      	b.n	b95c2 <strncmp+0x1a>
   b95cc:	4610      	mov	r0, r2
   b95ce:	e7f9      	b.n	b95c4 <strncmp+0x1c>

000b95d0 <strncpy>:
   b95d0:	b510      	push	{r4, lr}
   b95d2:	3901      	subs	r1, #1
   b95d4:	4603      	mov	r3, r0
   b95d6:	b132      	cbz	r2, b95e6 <strncpy+0x16>
   b95d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b95dc:	f803 4b01 	strb.w	r4, [r3], #1
   b95e0:	3a01      	subs	r2, #1
   b95e2:	2c00      	cmp	r4, #0
   b95e4:	d1f7      	bne.n	b95d6 <strncpy+0x6>
   b95e6:	441a      	add	r2, r3
   b95e8:	2100      	movs	r1, #0
   b95ea:	4293      	cmp	r3, r2
   b95ec:	d100      	bne.n	b95f0 <strncpy+0x20>
   b95ee:	bd10      	pop	{r4, pc}
   b95f0:	f803 1b01 	strb.w	r1, [r3], #1
   b95f4:	e7f9      	b.n	b95ea <strncpy+0x1a>

000b95f6 <sulp>:
   b95f6:	b570      	push	{r4, r5, r6, lr}
   b95f8:	4604      	mov	r4, r0
   b95fa:	460d      	mov	r5, r1
   b95fc:	ec45 4b10 	vmov	d0, r4, r5
   b9600:	4616      	mov	r6, r2
   b9602:	f001 fe0d 	bl	bb220 <__ulp>
   b9606:	ec51 0b10 	vmov	r0, r1, d0
   b960a:	b17e      	cbz	r6, b962c <sulp+0x36>
   b960c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b9610:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9614:	2b00      	cmp	r3, #0
   b9616:	dd09      	ble.n	b962c <sulp+0x36>
   b9618:	051b      	lsls	r3, r3, #20
   b961a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b961e:	2400      	movs	r4, #0
   b9620:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b9624:	4622      	mov	r2, r4
   b9626:	462b      	mov	r3, r5
   b9628:	f7fa feb6 	bl	b4398 <__aeabi_dmul>
   b962c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9630 <_strtod_l>:
   b9630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9634:	ed2d 8b02 	vpush	{d8}
   b9638:	b09d      	sub	sp, #116	; 0x74
   b963a:	461f      	mov	r7, r3
   b963c:	2300      	movs	r3, #0
   b963e:	9318      	str	r3, [sp, #96]	; 0x60
   b9640:	4ba2      	ldr	r3, [pc, #648]	; (b98cc <_strtod_l+0x29c>)
   b9642:	9213      	str	r2, [sp, #76]	; 0x4c
   b9644:	681b      	ldr	r3, [r3, #0]
   b9646:	9305      	str	r3, [sp, #20]
   b9648:	4604      	mov	r4, r0
   b964a:	4618      	mov	r0, r3
   b964c:	4688      	mov	r8, r1
   b964e:	f7fb fa13 	bl	b4a78 <strlen>
   b9652:	f04f 0a00 	mov.w	sl, #0
   b9656:	4605      	mov	r5, r0
   b9658:	f04f 0b00 	mov.w	fp, #0
   b965c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9662:	781a      	ldrb	r2, [r3, #0]
   b9664:	2a2b      	cmp	r2, #43	; 0x2b
   b9666:	d04e      	beq.n	b9706 <_strtod_l+0xd6>
   b9668:	d83b      	bhi.n	b96e2 <_strtod_l+0xb2>
   b966a:	2a0d      	cmp	r2, #13
   b966c:	d834      	bhi.n	b96d8 <_strtod_l+0xa8>
   b966e:	2a08      	cmp	r2, #8
   b9670:	d834      	bhi.n	b96dc <_strtod_l+0xac>
   b9672:	2a00      	cmp	r2, #0
   b9674:	d03e      	beq.n	b96f4 <_strtod_l+0xc4>
   b9676:	2300      	movs	r3, #0
   b9678:	930a      	str	r3, [sp, #40]	; 0x28
   b967a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b967c:	7833      	ldrb	r3, [r6, #0]
   b967e:	2b30      	cmp	r3, #48	; 0x30
   b9680:	f040 80b0 	bne.w	b97e4 <_strtod_l+0x1b4>
   b9684:	7873      	ldrb	r3, [r6, #1]
   b9686:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b968a:	2b58      	cmp	r3, #88	; 0x58
   b968c:	d168      	bne.n	b9760 <_strtod_l+0x130>
   b968e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9690:	9301      	str	r3, [sp, #4]
   b9692:	ab18      	add	r3, sp, #96	; 0x60
   b9694:	9702      	str	r7, [sp, #8]
   b9696:	9300      	str	r3, [sp, #0]
   b9698:	4a8d      	ldr	r2, [pc, #564]	; (b98d0 <_strtod_l+0x2a0>)
   b969a:	ab19      	add	r3, sp, #100	; 0x64
   b969c:	a917      	add	r1, sp, #92	; 0x5c
   b969e:	4620      	mov	r0, r4
   b96a0:	f000 ff2e 	bl	ba500 <__gethex>
   b96a4:	f010 0707 	ands.w	r7, r0, #7
   b96a8:	4605      	mov	r5, r0
   b96aa:	d005      	beq.n	b96b8 <_strtod_l+0x88>
   b96ac:	2f06      	cmp	r7, #6
   b96ae:	d12c      	bne.n	b970a <_strtod_l+0xda>
   b96b0:	3601      	adds	r6, #1
   b96b2:	2300      	movs	r3, #0
   b96b4:	9617      	str	r6, [sp, #92]	; 0x5c
   b96b6:	930a      	str	r3, [sp, #40]	; 0x28
   b96b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b96ba:	2b00      	cmp	r3, #0
   b96bc:	f040 8590 	bne.w	ba1e0 <_strtod_l+0xbb0>
   b96c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b96c2:	b1eb      	cbz	r3, b9700 <_strtod_l+0xd0>
   b96c4:	4652      	mov	r2, sl
   b96c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b96ca:	ec43 2b10 	vmov	d0, r2, r3
   b96ce:	b01d      	add	sp, #116	; 0x74
   b96d0:	ecbd 8b02 	vpop	{d8}
   b96d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b96d8:	2a20      	cmp	r2, #32
   b96da:	d1cc      	bne.n	b9676 <_strtod_l+0x46>
   b96dc:	3301      	adds	r3, #1
   b96de:	9317      	str	r3, [sp, #92]	; 0x5c
   b96e0:	e7be      	b.n	b9660 <_strtod_l+0x30>
   b96e2:	2a2d      	cmp	r2, #45	; 0x2d
   b96e4:	d1c7      	bne.n	b9676 <_strtod_l+0x46>
   b96e6:	2201      	movs	r2, #1
   b96e8:	920a      	str	r2, [sp, #40]	; 0x28
   b96ea:	1c5a      	adds	r2, r3, #1
   b96ec:	9217      	str	r2, [sp, #92]	; 0x5c
   b96ee:	785b      	ldrb	r3, [r3, #1]
   b96f0:	2b00      	cmp	r3, #0
   b96f2:	d1c2      	bne.n	b967a <_strtod_l+0x4a>
   b96f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b96f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b96fa:	2b00      	cmp	r3, #0
   b96fc:	f040 856e 	bne.w	ba1dc <_strtod_l+0xbac>
   b9700:	4652      	mov	r2, sl
   b9702:	465b      	mov	r3, fp
   b9704:	e7e1      	b.n	b96ca <_strtod_l+0x9a>
   b9706:	2200      	movs	r2, #0
   b9708:	e7ee      	b.n	b96e8 <_strtod_l+0xb8>
   b970a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b970c:	b13a      	cbz	r2, b971e <_strtod_l+0xee>
   b970e:	2135      	movs	r1, #53	; 0x35
   b9710:	a81a      	add	r0, sp, #104	; 0x68
   b9712:	f001 fe90 	bl	bb436 <__copybits>
   b9716:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9718:	4620      	mov	r0, r4
   b971a:	f001 fa4f 	bl	babbc <_Bfree>
   b971e:	3f01      	subs	r7, #1
   b9720:	2f04      	cmp	r7, #4
   b9722:	d806      	bhi.n	b9732 <_strtod_l+0x102>
   b9724:	e8df f007 	tbb	[pc, r7]
   b9728:	1714030a 	.word	0x1714030a
   b972c:	0a          	.byte	0x0a
   b972d:	00          	.byte	0x00
   b972e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b9732:	0728      	lsls	r0, r5, #28
   b9734:	d5c0      	bpl.n	b96b8 <_strtod_l+0x88>
   b9736:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b973a:	e7bd      	b.n	b96b8 <_strtod_l+0x88>
   b973c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9740:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b9742:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b9746:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b974a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b974e:	e7f0      	b.n	b9732 <_strtod_l+0x102>
   b9750:	f8df b180 	ldr.w	fp, [pc, #384]	; b98d4 <_strtod_l+0x2a4>
   b9754:	e7ed      	b.n	b9732 <_strtod_l+0x102>
   b9756:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b975a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b975e:	e7e8      	b.n	b9732 <_strtod_l+0x102>
   b9760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9762:	1c5a      	adds	r2, r3, #1
   b9764:	9217      	str	r2, [sp, #92]	; 0x5c
   b9766:	785b      	ldrb	r3, [r3, #1]
   b9768:	2b30      	cmp	r3, #48	; 0x30
   b976a:	d0f9      	beq.n	b9760 <_strtod_l+0x130>
   b976c:	2b00      	cmp	r3, #0
   b976e:	d0a3      	beq.n	b96b8 <_strtod_l+0x88>
   b9770:	2301      	movs	r3, #1
   b9772:	f04f 0900 	mov.w	r9, #0
   b9776:	9304      	str	r3, [sp, #16]
   b9778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b977a:	9308      	str	r3, [sp, #32]
   b977c:	f8cd 901c 	str.w	r9, [sp, #28]
   b9780:	464f      	mov	r7, r9
   b9782:	220a      	movs	r2, #10
   b9784:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b9786:	7806      	ldrb	r6, [r0, #0]
   b9788:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b978c:	b2d9      	uxtb	r1, r3
   b978e:	2909      	cmp	r1, #9
   b9790:	d92a      	bls.n	b97e8 <_strtod_l+0x1b8>
   b9792:	9905      	ldr	r1, [sp, #20]
   b9794:	462a      	mov	r2, r5
   b9796:	f7ff ff07 	bl	b95a8 <strncmp>
   b979a:	b398      	cbz	r0, b9804 <_strtod_l+0x1d4>
   b979c:	2000      	movs	r0, #0
   b979e:	4632      	mov	r2, r6
   b97a0:	463d      	mov	r5, r7
   b97a2:	9005      	str	r0, [sp, #20]
   b97a4:	4603      	mov	r3, r0
   b97a6:	2a65      	cmp	r2, #101	; 0x65
   b97a8:	d001      	beq.n	b97ae <_strtod_l+0x17e>
   b97aa:	2a45      	cmp	r2, #69	; 0x45
   b97ac:	d118      	bne.n	b97e0 <_strtod_l+0x1b0>
   b97ae:	b91d      	cbnz	r5, b97b8 <_strtod_l+0x188>
   b97b0:	9a04      	ldr	r2, [sp, #16]
   b97b2:	4302      	orrs	r2, r0
   b97b4:	d09e      	beq.n	b96f4 <_strtod_l+0xc4>
   b97b6:	2500      	movs	r5, #0
   b97b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b97bc:	f108 0201 	add.w	r2, r8, #1
   b97c0:	9217      	str	r2, [sp, #92]	; 0x5c
   b97c2:	f898 2001 	ldrb.w	r2, [r8, #1]
   b97c6:	2a2b      	cmp	r2, #43	; 0x2b
   b97c8:	d075      	beq.n	b98b6 <_strtod_l+0x286>
   b97ca:	2a2d      	cmp	r2, #45	; 0x2d
   b97cc:	d07b      	beq.n	b98c6 <_strtod_l+0x296>
   b97ce:	f04f 0c00 	mov.w	ip, #0
   b97d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b97d6:	2909      	cmp	r1, #9
   b97d8:	f240 8082 	bls.w	b98e0 <_strtod_l+0x2b0>
   b97dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b97e0:	2600      	movs	r6, #0
   b97e2:	e09d      	b.n	b9920 <_strtod_l+0x2f0>
   b97e4:	2300      	movs	r3, #0
   b97e6:	e7c4      	b.n	b9772 <_strtod_l+0x142>
   b97e8:	2f08      	cmp	r7, #8
   b97ea:	bfd8      	it	le
   b97ec:	9907      	ldrle	r1, [sp, #28]
   b97ee:	f100 0001 	add.w	r0, r0, #1
   b97f2:	bfda      	itte	le
   b97f4:	fb02 3301 	mlale	r3, r2, r1, r3
   b97f8:	9307      	strle	r3, [sp, #28]
   b97fa:	fb02 3909 	mlagt	r9, r2, r9, r3
   b97fe:	3701      	adds	r7, #1
   b9800:	9017      	str	r0, [sp, #92]	; 0x5c
   b9802:	e7bf      	b.n	b9784 <_strtod_l+0x154>
   b9804:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9806:	195a      	adds	r2, r3, r5
   b9808:	9217      	str	r2, [sp, #92]	; 0x5c
   b980a:	5d5a      	ldrb	r2, [r3, r5]
   b980c:	2f00      	cmp	r7, #0
   b980e:	d037      	beq.n	b9880 <_strtod_l+0x250>
   b9810:	9005      	str	r0, [sp, #20]
   b9812:	463d      	mov	r5, r7
   b9814:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9818:	2b09      	cmp	r3, #9
   b981a:	d912      	bls.n	b9842 <_strtod_l+0x212>
   b981c:	2301      	movs	r3, #1
   b981e:	e7c2      	b.n	b97a6 <_strtod_l+0x176>
   b9820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9822:	1c5a      	adds	r2, r3, #1
   b9824:	9217      	str	r2, [sp, #92]	; 0x5c
   b9826:	785a      	ldrb	r2, [r3, #1]
   b9828:	3001      	adds	r0, #1
   b982a:	2a30      	cmp	r2, #48	; 0x30
   b982c:	d0f8      	beq.n	b9820 <_strtod_l+0x1f0>
   b982e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b9832:	2b08      	cmp	r3, #8
   b9834:	f200 84d9 	bhi.w	ba1ea <_strtod_l+0xbba>
   b9838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b983a:	9005      	str	r0, [sp, #20]
   b983c:	2000      	movs	r0, #0
   b983e:	9308      	str	r3, [sp, #32]
   b9840:	4605      	mov	r5, r0
   b9842:	3a30      	subs	r2, #48	; 0x30
   b9844:	f100 0301 	add.w	r3, r0, #1
   b9848:	d014      	beq.n	b9874 <_strtod_l+0x244>
   b984a:	9905      	ldr	r1, [sp, #20]
   b984c:	4419      	add	r1, r3
   b984e:	9105      	str	r1, [sp, #20]
   b9850:	462b      	mov	r3, r5
   b9852:	eb00 0e05 	add.w	lr, r0, r5
   b9856:	210a      	movs	r1, #10
   b9858:	4573      	cmp	r3, lr
   b985a:	d113      	bne.n	b9884 <_strtod_l+0x254>
   b985c:	182b      	adds	r3, r5, r0
   b985e:	2b08      	cmp	r3, #8
   b9860:	f105 0501 	add.w	r5, r5, #1
   b9864:	4405      	add	r5, r0
   b9866:	dc1c      	bgt.n	b98a2 <_strtod_l+0x272>
   b9868:	9907      	ldr	r1, [sp, #28]
   b986a:	230a      	movs	r3, #10
   b986c:	fb03 2301 	mla	r3, r3, r1, r2
   b9870:	9307      	str	r3, [sp, #28]
   b9872:	2300      	movs	r3, #0
   b9874:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9876:	1c51      	adds	r1, r2, #1
   b9878:	9117      	str	r1, [sp, #92]	; 0x5c
   b987a:	7852      	ldrb	r2, [r2, #1]
   b987c:	4618      	mov	r0, r3
   b987e:	e7c9      	b.n	b9814 <_strtod_l+0x1e4>
   b9880:	4638      	mov	r0, r7
   b9882:	e7d2      	b.n	b982a <_strtod_l+0x1fa>
   b9884:	2b08      	cmp	r3, #8
   b9886:	dc04      	bgt.n	b9892 <_strtod_l+0x262>
   b9888:	9e07      	ldr	r6, [sp, #28]
   b988a:	434e      	muls	r6, r1
   b988c:	9607      	str	r6, [sp, #28]
   b988e:	3301      	adds	r3, #1
   b9890:	e7e2      	b.n	b9858 <_strtod_l+0x228>
   b9892:	f103 0c01 	add.w	ip, r3, #1
   b9896:	f1bc 0f10 	cmp.w	ip, #16
   b989a:	bfd8      	it	le
   b989c:	fb01 f909 	mulle.w	r9, r1, r9
   b98a0:	e7f5      	b.n	b988e <_strtod_l+0x25e>
   b98a2:	2d10      	cmp	r5, #16
   b98a4:	bfdc      	itt	le
   b98a6:	230a      	movle	r3, #10
   b98a8:	fb03 2909 	mlale	r9, r3, r9, r2
   b98ac:	e7e1      	b.n	b9872 <_strtod_l+0x242>
   b98ae:	2300      	movs	r3, #0
   b98b0:	9305      	str	r3, [sp, #20]
   b98b2:	2301      	movs	r3, #1
   b98b4:	e77c      	b.n	b97b0 <_strtod_l+0x180>
   b98b6:	f04f 0c00 	mov.w	ip, #0
   b98ba:	f108 0202 	add.w	r2, r8, #2
   b98be:	9217      	str	r2, [sp, #92]	; 0x5c
   b98c0:	f898 2002 	ldrb.w	r2, [r8, #2]
   b98c4:	e785      	b.n	b97d2 <_strtod_l+0x1a2>
   b98c6:	f04f 0c01 	mov.w	ip, #1
   b98ca:	e7f6      	b.n	b98ba <_strtod_l+0x28a>
   b98cc:	000bcb1c 	.word	0x000bcb1c
   b98d0:	000bc954 	.word	0x000bc954
   b98d4:	7ff00000 	.word	0x7ff00000
   b98d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b98da:	1c51      	adds	r1, r2, #1
   b98dc:	9117      	str	r1, [sp, #92]	; 0x5c
   b98de:	7852      	ldrb	r2, [r2, #1]
   b98e0:	2a30      	cmp	r2, #48	; 0x30
   b98e2:	d0f9      	beq.n	b98d8 <_strtod_l+0x2a8>
   b98e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b98e8:	2908      	cmp	r1, #8
   b98ea:	f63f af79 	bhi.w	b97e0 <_strtod_l+0x1b0>
   b98ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b98f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b98f4:	9206      	str	r2, [sp, #24]
   b98f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b98f8:	1c51      	adds	r1, r2, #1
   b98fa:	9117      	str	r1, [sp, #92]	; 0x5c
   b98fc:	7852      	ldrb	r2, [r2, #1]
   b98fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b9902:	2e09      	cmp	r6, #9
   b9904:	d937      	bls.n	b9976 <_strtod_l+0x346>
   b9906:	9e06      	ldr	r6, [sp, #24]
   b9908:	1b89      	subs	r1, r1, r6
   b990a:	2908      	cmp	r1, #8
   b990c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9910:	dc02      	bgt.n	b9918 <_strtod_l+0x2e8>
   b9912:	4576      	cmp	r6, lr
   b9914:	bfa8      	it	ge
   b9916:	4676      	movge	r6, lr
   b9918:	f1bc 0f00 	cmp.w	ip, #0
   b991c:	d000      	beq.n	b9920 <_strtod_l+0x2f0>
   b991e:	4276      	negs	r6, r6
   b9920:	2d00      	cmp	r5, #0
   b9922:	d14d      	bne.n	b99c0 <_strtod_l+0x390>
   b9924:	9904      	ldr	r1, [sp, #16]
   b9926:	4301      	orrs	r1, r0
   b9928:	f47f aec6 	bne.w	b96b8 <_strtod_l+0x88>
   b992c:	2b00      	cmp	r3, #0
   b992e:	f47f aee1 	bne.w	b96f4 <_strtod_l+0xc4>
   b9932:	2a69      	cmp	r2, #105	; 0x69
   b9934:	d027      	beq.n	b9986 <_strtod_l+0x356>
   b9936:	dc24      	bgt.n	b9982 <_strtod_l+0x352>
   b9938:	2a49      	cmp	r2, #73	; 0x49
   b993a:	d024      	beq.n	b9986 <_strtod_l+0x356>
   b993c:	2a4e      	cmp	r2, #78	; 0x4e
   b993e:	f47f aed9 	bne.w	b96f4 <_strtod_l+0xc4>
   b9942:	499f      	ldr	r1, [pc, #636]	; (b9bc0 <_strtod_l+0x590>)
   b9944:	a817      	add	r0, sp, #92	; 0x5c
   b9946:	f001 f833 	bl	ba9b0 <__match>
   b994a:	2800      	cmp	r0, #0
   b994c:	f43f aed2 	beq.w	b96f4 <_strtod_l+0xc4>
   b9950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9952:	781b      	ldrb	r3, [r3, #0]
   b9954:	2b28      	cmp	r3, #40	; 0x28
   b9956:	d12d      	bne.n	b99b4 <_strtod_l+0x384>
   b9958:	499a      	ldr	r1, [pc, #616]	; (b9bc4 <_strtod_l+0x594>)
   b995a:	aa1a      	add	r2, sp, #104	; 0x68
   b995c:	a817      	add	r0, sp, #92	; 0x5c
   b995e:	f001 f83b 	bl	ba9d8 <__hexnan>
   b9962:	2805      	cmp	r0, #5
   b9964:	d126      	bne.n	b99b4 <_strtod_l+0x384>
   b9966:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9968:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b996c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9970:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9974:	e6a0      	b.n	b96b8 <_strtod_l+0x88>
   b9976:	210a      	movs	r1, #10
   b9978:	fb01 2e0e 	mla	lr, r1, lr, r2
   b997c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9980:	e7b9      	b.n	b98f6 <_strtod_l+0x2c6>
   b9982:	2a6e      	cmp	r2, #110	; 0x6e
   b9984:	e7db      	b.n	b993e <_strtod_l+0x30e>
   b9986:	4990      	ldr	r1, [pc, #576]	; (b9bc8 <_strtod_l+0x598>)
   b9988:	a817      	add	r0, sp, #92	; 0x5c
   b998a:	f001 f811 	bl	ba9b0 <__match>
   b998e:	2800      	cmp	r0, #0
   b9990:	f43f aeb0 	beq.w	b96f4 <_strtod_l+0xc4>
   b9994:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9996:	498d      	ldr	r1, [pc, #564]	; (b9bcc <_strtod_l+0x59c>)
   b9998:	3b01      	subs	r3, #1
   b999a:	a817      	add	r0, sp, #92	; 0x5c
   b999c:	9317      	str	r3, [sp, #92]	; 0x5c
   b999e:	f001 f807 	bl	ba9b0 <__match>
   b99a2:	b910      	cbnz	r0, b99aa <_strtod_l+0x37a>
   b99a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b99a6:	3301      	adds	r3, #1
   b99a8:	9317      	str	r3, [sp, #92]	; 0x5c
   b99aa:	f8df b230 	ldr.w	fp, [pc, #560]	; b9bdc <_strtod_l+0x5ac>
   b99ae:	f04f 0a00 	mov.w	sl, #0
   b99b2:	e681      	b.n	b96b8 <_strtod_l+0x88>
   b99b4:	4886      	ldr	r0, [pc, #536]	; (b9bd0 <_strtod_l+0x5a0>)
   b99b6:	f001 fd93 	bl	bb4e0 <nan>
   b99ba:	ec5b ab10 	vmov	sl, fp, d0
   b99be:	e67b      	b.n	b96b8 <_strtod_l+0x88>
   b99c0:	9b05      	ldr	r3, [sp, #20]
   b99c2:	9807      	ldr	r0, [sp, #28]
   b99c4:	1af3      	subs	r3, r6, r3
   b99c6:	2f00      	cmp	r7, #0
   b99c8:	bf08      	it	eq
   b99ca:	462f      	moveq	r7, r5
   b99cc:	2d10      	cmp	r5, #16
   b99ce:	9306      	str	r3, [sp, #24]
   b99d0:	46a8      	mov	r8, r5
   b99d2:	bfa8      	it	ge
   b99d4:	f04f 0810 	movge.w	r8, #16
   b99d8:	f7fa fc64 	bl	b42a4 <__aeabi_ui2d>
   b99dc:	2d09      	cmp	r5, #9
   b99de:	4682      	mov	sl, r0
   b99e0:	468b      	mov	fp, r1
   b99e2:	dd13      	ble.n	b9a0c <_strtod_l+0x3dc>
   b99e4:	4b7b      	ldr	r3, [pc, #492]	; (b9bd4 <_strtod_l+0x5a4>)
   b99e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b99ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b99ee:	f7fa fcd3 	bl	b4398 <__aeabi_dmul>
   b99f2:	4682      	mov	sl, r0
   b99f4:	4648      	mov	r0, r9
   b99f6:	468b      	mov	fp, r1
   b99f8:	f7fa fc54 	bl	b42a4 <__aeabi_ui2d>
   b99fc:	4602      	mov	r2, r0
   b99fe:	460b      	mov	r3, r1
   b9a00:	4650      	mov	r0, sl
   b9a02:	4659      	mov	r1, fp
   b9a04:	f7fa fb12 	bl	b402c <__adddf3>
   b9a08:	4682      	mov	sl, r0
   b9a0a:	468b      	mov	fp, r1
   b9a0c:	2d0f      	cmp	r5, #15
   b9a0e:	dc38      	bgt.n	b9a82 <_strtod_l+0x452>
   b9a10:	9b06      	ldr	r3, [sp, #24]
   b9a12:	2b00      	cmp	r3, #0
   b9a14:	f43f ae50 	beq.w	b96b8 <_strtod_l+0x88>
   b9a18:	dd24      	ble.n	b9a64 <_strtod_l+0x434>
   b9a1a:	2b16      	cmp	r3, #22
   b9a1c:	dc0b      	bgt.n	b9a36 <_strtod_l+0x406>
   b9a1e:	496d      	ldr	r1, [pc, #436]	; (b9bd4 <_strtod_l+0x5a4>)
   b9a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9a24:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9a28:	4652      	mov	r2, sl
   b9a2a:	465b      	mov	r3, fp
   b9a2c:	f7fa fcb4 	bl	b4398 <__aeabi_dmul>
   b9a30:	4682      	mov	sl, r0
   b9a32:	468b      	mov	fp, r1
   b9a34:	e640      	b.n	b96b8 <_strtod_l+0x88>
   b9a36:	9a06      	ldr	r2, [sp, #24]
   b9a38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b9a3c:	4293      	cmp	r3, r2
   b9a3e:	db20      	blt.n	b9a82 <_strtod_l+0x452>
   b9a40:	4c64      	ldr	r4, [pc, #400]	; (b9bd4 <_strtod_l+0x5a4>)
   b9a42:	f1c5 050f 	rsb	r5, r5, #15
   b9a46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b9a4a:	4652      	mov	r2, sl
   b9a4c:	465b      	mov	r3, fp
   b9a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9a52:	f7fa fca1 	bl	b4398 <__aeabi_dmul>
   b9a56:	9b06      	ldr	r3, [sp, #24]
   b9a58:	1b5d      	subs	r5, r3, r5
   b9a5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b9a5e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9a62:	e7e3      	b.n	b9a2c <_strtod_l+0x3fc>
   b9a64:	9b06      	ldr	r3, [sp, #24]
   b9a66:	3316      	adds	r3, #22
   b9a68:	db0b      	blt.n	b9a82 <_strtod_l+0x452>
   b9a6a:	9b05      	ldr	r3, [sp, #20]
   b9a6c:	1b9e      	subs	r6, r3, r6
   b9a6e:	4b59      	ldr	r3, [pc, #356]	; (b9bd4 <_strtod_l+0x5a4>)
   b9a70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9a74:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9a78:	4650      	mov	r0, sl
   b9a7a:	4659      	mov	r1, fp
   b9a7c:	f7fa fdb6 	bl	b45ec <__aeabi_ddiv>
   b9a80:	e7d6      	b.n	b9a30 <_strtod_l+0x400>
   b9a82:	9b06      	ldr	r3, [sp, #24]
   b9a84:	eba5 0808 	sub.w	r8, r5, r8
   b9a88:	4498      	add	r8, r3
   b9a8a:	f1b8 0f00 	cmp.w	r8, #0
   b9a8e:	dd74      	ble.n	b9b7a <_strtod_l+0x54a>
   b9a90:	f018 030f 	ands.w	r3, r8, #15
   b9a94:	d00a      	beq.n	b9aac <_strtod_l+0x47c>
   b9a96:	494f      	ldr	r1, [pc, #316]	; (b9bd4 <_strtod_l+0x5a4>)
   b9a98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9a9c:	4652      	mov	r2, sl
   b9a9e:	465b      	mov	r3, fp
   b9aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9aa4:	f7fa fc78 	bl	b4398 <__aeabi_dmul>
   b9aa8:	4682      	mov	sl, r0
   b9aaa:	468b      	mov	fp, r1
   b9aac:	f038 080f 	bics.w	r8, r8, #15
   b9ab0:	d04f      	beq.n	b9b52 <_strtod_l+0x522>
   b9ab2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9ab6:	dd22      	ble.n	b9afe <_strtod_l+0x4ce>
   b9ab8:	2500      	movs	r5, #0
   b9aba:	462e      	mov	r6, r5
   b9abc:	9507      	str	r5, [sp, #28]
   b9abe:	9505      	str	r5, [sp, #20]
   b9ac0:	2322      	movs	r3, #34	; 0x22
   b9ac2:	f8df b118 	ldr.w	fp, [pc, #280]	; b9bdc <_strtod_l+0x5ac>
   b9ac6:	6023      	str	r3, [r4, #0]
   b9ac8:	f04f 0a00 	mov.w	sl, #0
   b9acc:	9b07      	ldr	r3, [sp, #28]
   b9ace:	2b00      	cmp	r3, #0
   b9ad0:	f43f adf2 	beq.w	b96b8 <_strtod_l+0x88>
   b9ad4:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9ad6:	4620      	mov	r0, r4
   b9ad8:	f001 f870 	bl	babbc <_Bfree>
   b9adc:	9905      	ldr	r1, [sp, #20]
   b9ade:	4620      	mov	r0, r4
   b9ae0:	f001 f86c 	bl	babbc <_Bfree>
   b9ae4:	4631      	mov	r1, r6
   b9ae6:	4620      	mov	r0, r4
   b9ae8:	f001 f868 	bl	babbc <_Bfree>
   b9aec:	9907      	ldr	r1, [sp, #28]
   b9aee:	4620      	mov	r0, r4
   b9af0:	f001 f864 	bl	babbc <_Bfree>
   b9af4:	4629      	mov	r1, r5
   b9af6:	4620      	mov	r0, r4
   b9af8:	f001 f860 	bl	babbc <_Bfree>
   b9afc:	e5dc      	b.n	b96b8 <_strtod_l+0x88>
   b9afe:	4b36      	ldr	r3, [pc, #216]	; (b9bd8 <_strtod_l+0x5a8>)
   b9b00:	9304      	str	r3, [sp, #16]
   b9b02:	2300      	movs	r3, #0
   b9b04:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9b08:	4650      	mov	r0, sl
   b9b0a:	4659      	mov	r1, fp
   b9b0c:	4699      	mov	r9, r3
   b9b0e:	f1b8 0f01 	cmp.w	r8, #1
   b9b12:	dc21      	bgt.n	b9b58 <_strtod_l+0x528>
   b9b14:	b10b      	cbz	r3, b9b1a <_strtod_l+0x4ea>
   b9b16:	4682      	mov	sl, r0
   b9b18:	468b      	mov	fp, r1
   b9b1a:	4b2f      	ldr	r3, [pc, #188]	; (b9bd8 <_strtod_l+0x5a8>)
   b9b1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9b20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9b24:	4652      	mov	r2, sl
   b9b26:	465b      	mov	r3, fp
   b9b28:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9b2c:	f7fa fc34 	bl	b4398 <__aeabi_dmul>
   b9b30:	4b2a      	ldr	r3, [pc, #168]	; (b9bdc <_strtod_l+0x5ac>)
   b9b32:	460a      	mov	r2, r1
   b9b34:	400b      	ands	r3, r1
   b9b36:	492a      	ldr	r1, [pc, #168]	; (b9be0 <_strtod_l+0x5b0>)
   b9b38:	428b      	cmp	r3, r1
   b9b3a:	4682      	mov	sl, r0
   b9b3c:	d8bc      	bhi.n	b9ab8 <_strtod_l+0x488>
   b9b3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9b42:	428b      	cmp	r3, r1
   b9b44:	bf86      	itte	hi
   b9b46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9be4 <_strtod_l+0x5b4>
   b9b4a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b9b4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9b52:	2300      	movs	r3, #0
   b9b54:	9304      	str	r3, [sp, #16]
   b9b56:	e084      	b.n	b9c62 <_strtod_l+0x632>
   b9b58:	f018 0f01 	tst.w	r8, #1
   b9b5c:	d005      	beq.n	b9b6a <_strtod_l+0x53a>
   b9b5e:	9b04      	ldr	r3, [sp, #16]
   b9b60:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b64:	f7fa fc18 	bl	b4398 <__aeabi_dmul>
   b9b68:	2301      	movs	r3, #1
   b9b6a:	9a04      	ldr	r2, [sp, #16]
   b9b6c:	3208      	adds	r2, #8
   b9b6e:	f109 0901 	add.w	r9, r9, #1
   b9b72:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9b76:	9204      	str	r2, [sp, #16]
   b9b78:	e7c9      	b.n	b9b0e <_strtod_l+0x4de>
   b9b7a:	d0ea      	beq.n	b9b52 <_strtod_l+0x522>
   b9b7c:	f1c8 0800 	rsb	r8, r8, #0
   b9b80:	f018 020f 	ands.w	r2, r8, #15
   b9b84:	d00a      	beq.n	b9b9c <_strtod_l+0x56c>
   b9b86:	4b13      	ldr	r3, [pc, #76]	; (b9bd4 <_strtod_l+0x5a4>)
   b9b88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b9b8c:	4650      	mov	r0, sl
   b9b8e:	4659      	mov	r1, fp
   b9b90:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9b94:	f7fa fd2a 	bl	b45ec <__aeabi_ddiv>
   b9b98:	4682      	mov	sl, r0
   b9b9a:	468b      	mov	fp, r1
   b9b9c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9ba0:	d0d7      	beq.n	b9b52 <_strtod_l+0x522>
   b9ba2:	f1b8 0f1f 	cmp.w	r8, #31
   b9ba6:	dd1f      	ble.n	b9be8 <_strtod_l+0x5b8>
   b9ba8:	2500      	movs	r5, #0
   b9baa:	462e      	mov	r6, r5
   b9bac:	9507      	str	r5, [sp, #28]
   b9bae:	9505      	str	r5, [sp, #20]
   b9bb0:	2322      	movs	r3, #34	; 0x22
   b9bb2:	f04f 0a00 	mov.w	sl, #0
   b9bb6:	f04f 0b00 	mov.w	fp, #0
   b9bba:	6023      	str	r3, [r4, #0]
   b9bbc:	e786      	b.n	b9acc <_strtod_l+0x49c>
   b9bbe:	bf00      	nop
   b9bc0:	000bc69d 	.word	0x000bc69d
   b9bc4:	000bc968 	.word	0x000bc968
   b9bc8:	000bc6a1 	.word	0x000bc6a1
   b9bcc:	000bc94d 	.word	0x000bc94d
   b9bd0:	000bb557 	.word	0x000bb557
   b9bd4:	000bcbb0 	.word	0x000bcbb0
   b9bd8:	000bcb88 	.word	0x000bcb88
   b9bdc:	7ff00000 	.word	0x7ff00000
   b9be0:	7ca00000 	.word	0x7ca00000
   b9be4:	7fefffff 	.word	0x7fefffff
   b9be8:	f018 0310 	ands.w	r3, r8, #16
   b9bec:	bf18      	it	ne
   b9bee:	236a      	movne	r3, #106	; 0x6a
   b9bf0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b9fa0 <_strtod_l+0x970>
   b9bf4:	9304      	str	r3, [sp, #16]
   b9bf6:	4650      	mov	r0, sl
   b9bf8:	4659      	mov	r1, fp
   b9bfa:	2300      	movs	r3, #0
   b9bfc:	f018 0f01 	tst.w	r8, #1
   b9c00:	d004      	beq.n	b9c0c <_strtod_l+0x5dc>
   b9c02:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9c06:	f7fa fbc7 	bl	b4398 <__aeabi_dmul>
   b9c0a:	2301      	movs	r3, #1
   b9c0c:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9c10:	f109 0908 	add.w	r9, r9, #8
   b9c14:	d1f2      	bne.n	b9bfc <_strtod_l+0x5cc>
   b9c16:	b10b      	cbz	r3, b9c1c <_strtod_l+0x5ec>
   b9c18:	4682      	mov	sl, r0
   b9c1a:	468b      	mov	fp, r1
   b9c1c:	9b04      	ldr	r3, [sp, #16]
   b9c1e:	b1c3      	cbz	r3, b9c52 <_strtod_l+0x622>
   b9c20:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9c24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9c28:	2b00      	cmp	r3, #0
   b9c2a:	4659      	mov	r1, fp
   b9c2c:	dd11      	ble.n	b9c52 <_strtod_l+0x622>
   b9c2e:	2b1f      	cmp	r3, #31
   b9c30:	f340 8124 	ble.w	b9e7c <_strtod_l+0x84c>
   b9c34:	2b34      	cmp	r3, #52	; 0x34
   b9c36:	bfde      	ittt	le
   b9c38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9c3c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b9c40:	fa03 f202 	lslle.w	r2, r3, r2
   b9c44:	f04f 0a00 	mov.w	sl, #0
   b9c48:	bfcc      	ite	gt
   b9c4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9c4e:	ea02 0b01 	andle.w	fp, r2, r1
   b9c52:	2200      	movs	r2, #0
   b9c54:	2300      	movs	r3, #0
   b9c56:	4650      	mov	r0, sl
   b9c58:	4659      	mov	r1, fp
   b9c5a:	f7fa fe05 	bl	b4868 <__aeabi_dcmpeq>
   b9c5e:	2800      	cmp	r0, #0
   b9c60:	d1a2      	bne.n	b9ba8 <_strtod_l+0x578>
   b9c62:	9b07      	ldr	r3, [sp, #28]
   b9c64:	9300      	str	r3, [sp, #0]
   b9c66:	9908      	ldr	r1, [sp, #32]
   b9c68:	462b      	mov	r3, r5
   b9c6a:	463a      	mov	r2, r7
   b9c6c:	4620      	mov	r0, r4
   b9c6e:	f001 f80d 	bl	bac8c <__s2b>
   b9c72:	9007      	str	r0, [sp, #28]
   b9c74:	2800      	cmp	r0, #0
   b9c76:	f43f af1f 	beq.w	b9ab8 <_strtod_l+0x488>
   b9c7a:	9b05      	ldr	r3, [sp, #20]
   b9c7c:	1b9e      	subs	r6, r3, r6
   b9c7e:	9b06      	ldr	r3, [sp, #24]
   b9c80:	2b00      	cmp	r3, #0
   b9c82:	bfb4      	ite	lt
   b9c84:	4633      	movlt	r3, r6
   b9c86:	2300      	movge	r3, #0
   b9c88:	930c      	str	r3, [sp, #48]	; 0x30
   b9c8a:	9b06      	ldr	r3, [sp, #24]
   b9c8c:	2500      	movs	r5, #0
   b9c8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9c92:	9312      	str	r3, [sp, #72]	; 0x48
   b9c94:	462e      	mov	r6, r5
   b9c96:	9b07      	ldr	r3, [sp, #28]
   b9c98:	4620      	mov	r0, r4
   b9c9a:	6859      	ldr	r1, [r3, #4]
   b9c9c:	f000 ff4e 	bl	bab3c <_Balloc>
   b9ca0:	9005      	str	r0, [sp, #20]
   b9ca2:	2800      	cmp	r0, #0
   b9ca4:	f43f af0c 	beq.w	b9ac0 <_strtod_l+0x490>
   b9ca8:	9b07      	ldr	r3, [sp, #28]
   b9caa:	691a      	ldr	r2, [r3, #16]
   b9cac:	3202      	adds	r2, #2
   b9cae:	f103 010c 	add.w	r1, r3, #12
   b9cb2:	0092      	lsls	r2, r2, #2
   b9cb4:	300c      	adds	r0, #12
   b9cb6:	f7ff fc32 	bl	b951e <memcpy>
   b9cba:	ec4b ab10 	vmov	d0, sl, fp
   b9cbe:	aa1a      	add	r2, sp, #104	; 0x68
   b9cc0:	a919      	add	r1, sp, #100	; 0x64
   b9cc2:	4620      	mov	r0, r4
   b9cc4:	f001 fb28 	bl	bb318 <__d2b>
   b9cc8:	ec4b ab18 	vmov	d8, sl, fp
   b9ccc:	9018      	str	r0, [sp, #96]	; 0x60
   b9cce:	2800      	cmp	r0, #0
   b9cd0:	f43f aef6 	beq.w	b9ac0 <_strtod_l+0x490>
   b9cd4:	2101      	movs	r1, #1
   b9cd6:	4620      	mov	r0, r4
   b9cd8:	f001 f872 	bl	badc0 <__i2b>
   b9cdc:	4606      	mov	r6, r0
   b9cde:	2800      	cmp	r0, #0
   b9ce0:	f43f aeee 	beq.w	b9ac0 <_strtod_l+0x490>
   b9ce4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9ce6:	9904      	ldr	r1, [sp, #16]
   b9ce8:	2b00      	cmp	r3, #0
   b9cea:	bfab      	itete	ge
   b9cec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9cee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9cf0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9cf2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9cf6:	bfac      	ite	ge
   b9cf8:	eb03 0902 	addge.w	r9, r3, r2
   b9cfc:	1ad7      	sublt	r7, r2, r3
   b9cfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9d00:	eba3 0801 	sub.w	r8, r3, r1
   b9d04:	4490      	add	r8, r2
   b9d06:	4ba1      	ldr	r3, [pc, #644]	; (b9f8c <_strtod_l+0x95c>)
   b9d08:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9d0c:	4598      	cmp	r8, r3
   b9d0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9d12:	f280 80c7 	bge.w	b9ea4 <_strtod_l+0x874>
   b9d16:	eba3 0308 	sub.w	r3, r3, r8
   b9d1a:	2b1f      	cmp	r3, #31
   b9d1c:	eba2 0203 	sub.w	r2, r2, r3
   b9d20:	f04f 0101 	mov.w	r1, #1
   b9d24:	f300 80b1 	bgt.w	b9e8a <_strtod_l+0x85a>
   b9d28:	fa01 f303 	lsl.w	r3, r1, r3
   b9d2c:	930d      	str	r3, [sp, #52]	; 0x34
   b9d2e:	2300      	movs	r3, #0
   b9d30:	9308      	str	r3, [sp, #32]
   b9d32:	eb09 0802 	add.w	r8, r9, r2
   b9d36:	9b04      	ldr	r3, [sp, #16]
   b9d38:	45c1      	cmp	r9, r8
   b9d3a:	4417      	add	r7, r2
   b9d3c:	441f      	add	r7, r3
   b9d3e:	464b      	mov	r3, r9
   b9d40:	bfa8      	it	ge
   b9d42:	4643      	movge	r3, r8
   b9d44:	42bb      	cmp	r3, r7
   b9d46:	bfa8      	it	ge
   b9d48:	463b      	movge	r3, r7
   b9d4a:	2b00      	cmp	r3, #0
   b9d4c:	bfc2      	ittt	gt
   b9d4e:	eba8 0803 	subgt.w	r8, r8, r3
   b9d52:	1aff      	subgt	r7, r7, r3
   b9d54:	eba9 0903 	subgt.w	r9, r9, r3
   b9d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9d5a:	2b00      	cmp	r3, #0
   b9d5c:	dd17      	ble.n	b9d8e <_strtod_l+0x75e>
   b9d5e:	4631      	mov	r1, r6
   b9d60:	461a      	mov	r2, r3
   b9d62:	4620      	mov	r0, r4
   b9d64:	f001 f8ec 	bl	baf40 <__pow5mult>
   b9d68:	4606      	mov	r6, r0
   b9d6a:	2800      	cmp	r0, #0
   b9d6c:	f43f aea8 	beq.w	b9ac0 <_strtod_l+0x490>
   b9d70:	4601      	mov	r1, r0
   b9d72:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9d74:	4620      	mov	r0, r4
   b9d76:	f001 f839 	bl	badec <__multiply>
   b9d7a:	900b      	str	r0, [sp, #44]	; 0x2c
   b9d7c:	2800      	cmp	r0, #0
   b9d7e:	f43f ae9f 	beq.w	b9ac0 <_strtod_l+0x490>
   b9d82:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9d84:	4620      	mov	r0, r4
   b9d86:	f000 ff19 	bl	babbc <_Bfree>
   b9d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9d8c:	9318      	str	r3, [sp, #96]	; 0x60
   b9d8e:	f1b8 0f00 	cmp.w	r8, #0
   b9d92:	f300 808c 	bgt.w	b9eae <_strtod_l+0x87e>
   b9d96:	9b06      	ldr	r3, [sp, #24]
   b9d98:	2b00      	cmp	r3, #0
   b9d9a:	dd08      	ble.n	b9dae <_strtod_l+0x77e>
   b9d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9d9e:	9905      	ldr	r1, [sp, #20]
   b9da0:	4620      	mov	r0, r4
   b9da2:	f001 f8cd 	bl	baf40 <__pow5mult>
   b9da6:	9005      	str	r0, [sp, #20]
   b9da8:	2800      	cmp	r0, #0
   b9daa:	f43f ae89 	beq.w	b9ac0 <_strtod_l+0x490>
   b9dae:	2f00      	cmp	r7, #0
   b9db0:	dd08      	ble.n	b9dc4 <_strtod_l+0x794>
   b9db2:	9905      	ldr	r1, [sp, #20]
   b9db4:	463a      	mov	r2, r7
   b9db6:	4620      	mov	r0, r4
   b9db8:	f001 f91c 	bl	baff4 <__lshift>
   b9dbc:	9005      	str	r0, [sp, #20]
   b9dbe:	2800      	cmp	r0, #0
   b9dc0:	f43f ae7e 	beq.w	b9ac0 <_strtod_l+0x490>
   b9dc4:	f1b9 0f00 	cmp.w	r9, #0
   b9dc8:	dd08      	ble.n	b9ddc <_strtod_l+0x7ac>
   b9dca:	4631      	mov	r1, r6
   b9dcc:	464a      	mov	r2, r9
   b9dce:	4620      	mov	r0, r4
   b9dd0:	f001 f910 	bl	baff4 <__lshift>
   b9dd4:	4606      	mov	r6, r0
   b9dd6:	2800      	cmp	r0, #0
   b9dd8:	f43f ae72 	beq.w	b9ac0 <_strtod_l+0x490>
   b9ddc:	9a05      	ldr	r2, [sp, #20]
   b9dde:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9de0:	4620      	mov	r0, r4
   b9de2:	f001 f993 	bl	bb10c <__mdiff>
   b9de6:	4605      	mov	r5, r0
   b9de8:	2800      	cmp	r0, #0
   b9dea:	f43f ae69 	beq.w	b9ac0 <_strtod_l+0x490>
   b9dee:	68c3      	ldr	r3, [r0, #12]
   b9df0:	930b      	str	r3, [sp, #44]	; 0x2c
   b9df2:	2300      	movs	r3, #0
   b9df4:	60c3      	str	r3, [r0, #12]
   b9df6:	4631      	mov	r1, r6
   b9df8:	f001 f96c 	bl	bb0d4 <__mcmp>
   b9dfc:	2800      	cmp	r0, #0
   b9dfe:	da60      	bge.n	b9ec2 <_strtod_l+0x892>
   b9e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9e02:	ea53 030a 	orrs.w	r3, r3, sl
   b9e06:	f040 8082 	bne.w	b9f0e <_strtod_l+0x8de>
   b9e0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9e0e:	2b00      	cmp	r3, #0
   b9e10:	d17d      	bne.n	b9f0e <_strtod_l+0x8de>
   b9e12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9e16:	0d1b      	lsrs	r3, r3, #20
   b9e18:	051b      	lsls	r3, r3, #20
   b9e1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b9e1e:	d976      	bls.n	b9f0e <_strtod_l+0x8de>
   b9e20:	696b      	ldr	r3, [r5, #20]
   b9e22:	b913      	cbnz	r3, b9e2a <_strtod_l+0x7fa>
   b9e24:	692b      	ldr	r3, [r5, #16]
   b9e26:	2b01      	cmp	r3, #1
   b9e28:	dd71      	ble.n	b9f0e <_strtod_l+0x8de>
   b9e2a:	4629      	mov	r1, r5
   b9e2c:	2201      	movs	r2, #1
   b9e2e:	4620      	mov	r0, r4
   b9e30:	f001 f8e0 	bl	baff4 <__lshift>
   b9e34:	4631      	mov	r1, r6
   b9e36:	4605      	mov	r5, r0
   b9e38:	f001 f94c 	bl	bb0d4 <__mcmp>
   b9e3c:	2800      	cmp	r0, #0
   b9e3e:	dd66      	ble.n	b9f0e <_strtod_l+0x8de>
   b9e40:	9904      	ldr	r1, [sp, #16]
   b9e42:	4a53      	ldr	r2, [pc, #332]	; (b9f90 <_strtod_l+0x960>)
   b9e44:	465b      	mov	r3, fp
   b9e46:	2900      	cmp	r1, #0
   b9e48:	f000 8081 	beq.w	b9f4e <_strtod_l+0x91e>
   b9e4c:	ea02 010b 	and.w	r1, r2, fp
   b9e50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b9e54:	dc7b      	bgt.n	b9f4e <_strtod_l+0x91e>
   b9e56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b9e5a:	f77f aea9 	ble.w	b9bb0 <_strtod_l+0x580>
   b9e5e:	4b4d      	ldr	r3, [pc, #308]	; (b9f94 <_strtod_l+0x964>)
   b9e60:	4650      	mov	r0, sl
   b9e62:	4659      	mov	r1, fp
   b9e64:	2200      	movs	r2, #0
   b9e66:	f7fa fa97 	bl	b4398 <__aeabi_dmul>
   b9e6a:	460b      	mov	r3, r1
   b9e6c:	4303      	orrs	r3, r0
   b9e6e:	bf08      	it	eq
   b9e70:	2322      	moveq	r3, #34	; 0x22
   b9e72:	4682      	mov	sl, r0
   b9e74:	468b      	mov	fp, r1
   b9e76:	bf08      	it	eq
   b9e78:	6023      	streq	r3, [r4, #0]
   b9e7a:	e62b      	b.n	b9ad4 <_strtod_l+0x4a4>
   b9e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9e80:	fa02 f303 	lsl.w	r3, r2, r3
   b9e84:	ea03 0a0a 	and.w	sl, r3, sl
   b9e88:	e6e3      	b.n	b9c52 <_strtod_l+0x622>
   b9e8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b9e8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b9e92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b9e96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b9e9a:	fa01 f308 	lsl.w	r3, r1, r8
   b9e9e:	9308      	str	r3, [sp, #32]
   b9ea0:	910d      	str	r1, [sp, #52]	; 0x34
   b9ea2:	e746      	b.n	b9d32 <_strtod_l+0x702>
   b9ea4:	2300      	movs	r3, #0
   b9ea6:	9308      	str	r3, [sp, #32]
   b9ea8:	2301      	movs	r3, #1
   b9eaa:	930d      	str	r3, [sp, #52]	; 0x34
   b9eac:	e741      	b.n	b9d32 <_strtod_l+0x702>
   b9eae:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9eb0:	4642      	mov	r2, r8
   b9eb2:	4620      	mov	r0, r4
   b9eb4:	f001 f89e 	bl	baff4 <__lshift>
   b9eb8:	9018      	str	r0, [sp, #96]	; 0x60
   b9eba:	2800      	cmp	r0, #0
   b9ebc:	f47f af6b 	bne.w	b9d96 <_strtod_l+0x766>
   b9ec0:	e5fe      	b.n	b9ac0 <_strtod_l+0x490>
   b9ec2:	465f      	mov	r7, fp
   b9ec4:	d16e      	bne.n	b9fa4 <_strtod_l+0x974>
   b9ec6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9ec8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9ecc:	b342      	cbz	r2, b9f20 <_strtod_l+0x8f0>
   b9ece:	4a32      	ldr	r2, [pc, #200]	; (b9f98 <_strtod_l+0x968>)
   b9ed0:	4293      	cmp	r3, r2
   b9ed2:	d128      	bne.n	b9f26 <_strtod_l+0x8f6>
   b9ed4:	9b04      	ldr	r3, [sp, #16]
   b9ed6:	4651      	mov	r1, sl
   b9ed8:	b1eb      	cbz	r3, b9f16 <_strtod_l+0x8e6>
   b9eda:	4b2d      	ldr	r3, [pc, #180]	; (b9f90 <_strtod_l+0x960>)
   b9edc:	403b      	ands	r3, r7
   b9ede:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9ee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9ee6:	d819      	bhi.n	b9f1c <_strtod_l+0x8ec>
   b9ee8:	0d1b      	lsrs	r3, r3, #20
   b9eea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9eee:	fa02 f303 	lsl.w	r3, r2, r3
   b9ef2:	4299      	cmp	r1, r3
   b9ef4:	d117      	bne.n	b9f26 <_strtod_l+0x8f6>
   b9ef6:	4b29      	ldr	r3, [pc, #164]	; (b9f9c <_strtod_l+0x96c>)
   b9ef8:	429f      	cmp	r7, r3
   b9efa:	d102      	bne.n	b9f02 <_strtod_l+0x8d2>
   b9efc:	3101      	adds	r1, #1
   b9efe:	f43f addf 	beq.w	b9ac0 <_strtod_l+0x490>
   b9f02:	4b23      	ldr	r3, [pc, #140]	; (b9f90 <_strtod_l+0x960>)
   b9f04:	403b      	ands	r3, r7
   b9f06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b9f0a:	f04f 0a00 	mov.w	sl, #0
   b9f0e:	9b04      	ldr	r3, [sp, #16]
   b9f10:	2b00      	cmp	r3, #0
   b9f12:	d1a4      	bne.n	b9e5e <_strtod_l+0x82e>
   b9f14:	e5de      	b.n	b9ad4 <_strtod_l+0x4a4>
   b9f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9f1a:	e7ea      	b.n	b9ef2 <_strtod_l+0x8c2>
   b9f1c:	4613      	mov	r3, r2
   b9f1e:	e7e8      	b.n	b9ef2 <_strtod_l+0x8c2>
   b9f20:	ea53 030a 	orrs.w	r3, r3, sl
   b9f24:	d08c      	beq.n	b9e40 <_strtod_l+0x810>
   b9f26:	9b08      	ldr	r3, [sp, #32]
   b9f28:	b1db      	cbz	r3, b9f62 <_strtod_l+0x932>
   b9f2a:	423b      	tst	r3, r7
   b9f2c:	d0ef      	beq.n	b9f0e <_strtod_l+0x8de>
   b9f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9f30:	9a04      	ldr	r2, [sp, #16]
   b9f32:	4650      	mov	r0, sl
   b9f34:	4659      	mov	r1, fp
   b9f36:	b1c3      	cbz	r3, b9f6a <_strtod_l+0x93a>
   b9f38:	f7ff fb5d 	bl	b95f6 <sulp>
   b9f3c:	4602      	mov	r2, r0
   b9f3e:	460b      	mov	r3, r1
   b9f40:	ec51 0b18 	vmov	r0, r1, d8
   b9f44:	f7fa f872 	bl	b402c <__adddf3>
   b9f48:	4682      	mov	sl, r0
   b9f4a:	468b      	mov	fp, r1
   b9f4c:	e7df      	b.n	b9f0e <_strtod_l+0x8de>
   b9f4e:	4013      	ands	r3, r2
   b9f50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b9f54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9f58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b9f5c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b9f60:	e7d5      	b.n	b9f0e <_strtod_l+0x8de>
   b9f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9f64:	ea13 0f0a 	tst.w	r3, sl
   b9f68:	e7e0      	b.n	b9f2c <_strtod_l+0x8fc>
   b9f6a:	f7ff fb44 	bl	b95f6 <sulp>
   b9f6e:	4602      	mov	r2, r0
   b9f70:	460b      	mov	r3, r1
   b9f72:	ec51 0b18 	vmov	r0, r1, d8
   b9f76:	f7fa f857 	bl	b4028 <__aeabi_dsub>
   b9f7a:	2200      	movs	r2, #0
   b9f7c:	2300      	movs	r3, #0
   b9f7e:	4682      	mov	sl, r0
   b9f80:	468b      	mov	fp, r1
   b9f82:	f7fa fc71 	bl	b4868 <__aeabi_dcmpeq>
   b9f86:	2800      	cmp	r0, #0
   b9f88:	d0c1      	beq.n	b9f0e <_strtod_l+0x8de>
   b9f8a:	e611      	b.n	b9bb0 <_strtod_l+0x580>
   b9f8c:	fffffc02 	.word	0xfffffc02
   b9f90:	7ff00000 	.word	0x7ff00000
   b9f94:	39500000 	.word	0x39500000
   b9f98:	000fffff 	.word	0x000fffff
   b9f9c:	7fefffff 	.word	0x7fefffff
   b9fa0:	000bc980 	.word	0x000bc980
   b9fa4:	4631      	mov	r1, r6
   b9fa6:	4628      	mov	r0, r5
   b9fa8:	f001 fa12 	bl	bb3d0 <__ratio>
   b9fac:	ec59 8b10 	vmov	r8, r9, d0
   b9fb0:	ee10 0a10 	vmov	r0, s0
   b9fb4:	2200      	movs	r2, #0
   b9fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b9fba:	4649      	mov	r1, r9
   b9fbc:	f7fa fc68 	bl	b4890 <__aeabi_dcmple>
   b9fc0:	2800      	cmp	r0, #0
   b9fc2:	d07a      	beq.n	ba0ba <_strtod_l+0xa8a>
   b9fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9fc6:	2b00      	cmp	r3, #0
   b9fc8:	d04a      	beq.n	ba060 <_strtod_l+0xa30>
   b9fca:	4b95      	ldr	r3, [pc, #596]	; (ba220 <_strtod_l+0xbf0>)
   b9fcc:	2200      	movs	r2, #0
   b9fce:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9fd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; ba220 <_strtod_l+0xbf0>
   b9fd6:	f04f 0800 	mov.w	r8, #0
   b9fda:	4b92      	ldr	r3, [pc, #584]	; (ba224 <_strtod_l+0xbf4>)
   b9fdc:	403b      	ands	r3, r7
   b9fde:	930d      	str	r3, [sp, #52]	; 0x34
   b9fe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9fe2:	4b91      	ldr	r3, [pc, #580]	; (ba228 <_strtod_l+0xbf8>)
   b9fe4:	429a      	cmp	r2, r3
   b9fe6:	f040 80b0 	bne.w	ba14a <_strtod_l+0xb1a>
   b9fea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9fee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9ff2:	ec4b ab10 	vmov	d0, sl, fp
   b9ff6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9ffa:	f001 f911 	bl	bb220 <__ulp>
   b9ffe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba002:	ec53 2b10 	vmov	r2, r3, d0
   ba006:	f7fa f9c7 	bl	b4398 <__aeabi_dmul>
   ba00a:	4652      	mov	r2, sl
   ba00c:	465b      	mov	r3, fp
   ba00e:	f7fa f80d 	bl	b402c <__adddf3>
   ba012:	460b      	mov	r3, r1
   ba014:	4983      	ldr	r1, [pc, #524]	; (ba224 <_strtod_l+0xbf4>)
   ba016:	4a85      	ldr	r2, [pc, #532]	; (ba22c <_strtod_l+0xbfc>)
   ba018:	4019      	ands	r1, r3
   ba01a:	4291      	cmp	r1, r2
   ba01c:	4682      	mov	sl, r0
   ba01e:	d960      	bls.n	ba0e2 <_strtod_l+0xab2>
   ba020:	ee18 3a90 	vmov	r3, s17
   ba024:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   ba028:	4293      	cmp	r3, r2
   ba02a:	d104      	bne.n	ba036 <_strtod_l+0xa06>
   ba02c:	ee18 3a10 	vmov	r3, s16
   ba030:	3301      	adds	r3, #1
   ba032:	f43f ad45 	beq.w	b9ac0 <_strtod_l+0x490>
   ba036:	f8df b200 	ldr.w	fp, [pc, #512]	; ba238 <_strtod_l+0xc08>
   ba03a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   ba03e:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba040:	4620      	mov	r0, r4
   ba042:	f000 fdbb 	bl	babbc <_Bfree>
   ba046:	9905      	ldr	r1, [sp, #20]
   ba048:	4620      	mov	r0, r4
   ba04a:	f000 fdb7 	bl	babbc <_Bfree>
   ba04e:	4631      	mov	r1, r6
   ba050:	4620      	mov	r0, r4
   ba052:	f000 fdb3 	bl	babbc <_Bfree>
   ba056:	4629      	mov	r1, r5
   ba058:	4620      	mov	r0, r4
   ba05a:	f000 fdaf 	bl	babbc <_Bfree>
   ba05e:	e61a      	b.n	b9c96 <_strtod_l+0x666>
   ba060:	f1ba 0f00 	cmp.w	sl, #0
   ba064:	d11b      	bne.n	ba09e <_strtod_l+0xa6e>
   ba066:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba06a:	b9f3      	cbnz	r3, ba0aa <_strtod_l+0xa7a>
   ba06c:	4b6c      	ldr	r3, [pc, #432]	; (ba220 <_strtod_l+0xbf0>)
   ba06e:	2200      	movs	r2, #0
   ba070:	4640      	mov	r0, r8
   ba072:	4649      	mov	r1, r9
   ba074:	f7fa fc02 	bl	b487c <__aeabi_dcmplt>
   ba078:	b9d0      	cbnz	r0, ba0b0 <_strtod_l+0xa80>
   ba07a:	4640      	mov	r0, r8
   ba07c:	4649      	mov	r1, r9
   ba07e:	4b6c      	ldr	r3, [pc, #432]	; (ba230 <_strtod_l+0xc00>)
   ba080:	2200      	movs	r2, #0
   ba082:	f7fa f989 	bl	b4398 <__aeabi_dmul>
   ba086:	4680      	mov	r8, r0
   ba088:	4689      	mov	r9, r1
   ba08a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   ba08e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   ba092:	9315      	str	r3, [sp, #84]	; 0x54
   ba094:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   ba098:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba09c:	e79d      	b.n	b9fda <_strtod_l+0x9aa>
   ba09e:	f1ba 0f01 	cmp.w	sl, #1
   ba0a2:	d102      	bne.n	ba0aa <_strtod_l+0xa7a>
   ba0a4:	2f00      	cmp	r7, #0
   ba0a6:	f43f ad83 	beq.w	b9bb0 <_strtod_l+0x580>
   ba0aa:	4b62      	ldr	r3, [pc, #392]	; (ba234 <_strtod_l+0xc04>)
   ba0ac:	2200      	movs	r2, #0
   ba0ae:	e78e      	b.n	b9fce <_strtod_l+0x99e>
   ba0b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; ba230 <_strtod_l+0xc00>
   ba0b4:	f04f 0800 	mov.w	r8, #0
   ba0b8:	e7e7      	b.n	ba08a <_strtod_l+0xa5a>
   ba0ba:	4b5d      	ldr	r3, [pc, #372]	; (ba230 <_strtod_l+0xc00>)
   ba0bc:	4640      	mov	r0, r8
   ba0be:	4649      	mov	r1, r9
   ba0c0:	2200      	movs	r2, #0
   ba0c2:	f7fa f969 	bl	b4398 <__aeabi_dmul>
   ba0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba0c8:	4680      	mov	r8, r0
   ba0ca:	4689      	mov	r9, r1
   ba0cc:	b933      	cbnz	r3, ba0dc <_strtod_l+0xaac>
   ba0ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba0d2:	900e      	str	r0, [sp, #56]	; 0x38
   ba0d4:	930f      	str	r3, [sp, #60]	; 0x3c
   ba0d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   ba0da:	e7dd      	b.n	ba098 <_strtod_l+0xa68>
   ba0dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   ba0e0:	e7f9      	b.n	ba0d6 <_strtod_l+0xaa6>
   ba0e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   ba0e6:	9b04      	ldr	r3, [sp, #16]
   ba0e8:	2b00      	cmp	r3, #0
   ba0ea:	d1a8      	bne.n	ba03e <_strtod_l+0xa0e>
   ba0ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba0f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba0f2:	0d1b      	lsrs	r3, r3, #20
   ba0f4:	051b      	lsls	r3, r3, #20
   ba0f6:	429a      	cmp	r2, r3
   ba0f8:	d1a1      	bne.n	ba03e <_strtod_l+0xa0e>
   ba0fa:	4640      	mov	r0, r8
   ba0fc:	4649      	mov	r1, r9
   ba0fe:	f7fa fcc3 	bl	b4a88 <__aeabi_d2lz>
   ba102:	f7fa f91b 	bl	b433c <__aeabi_l2d>
   ba106:	4602      	mov	r2, r0
   ba108:	460b      	mov	r3, r1
   ba10a:	4640      	mov	r0, r8
   ba10c:	4649      	mov	r1, r9
   ba10e:	f7f9 ff8b 	bl	b4028 <__aeabi_dsub>
   ba112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba114:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba118:	ea43 030a 	orr.w	r3, r3, sl
   ba11c:	4313      	orrs	r3, r2
   ba11e:	4680      	mov	r8, r0
   ba120:	4689      	mov	r9, r1
   ba122:	d055      	beq.n	ba1d0 <_strtod_l+0xba0>
   ba124:	a336      	add	r3, pc, #216	; (adr r3, ba200 <_strtod_l+0xbd0>)
   ba126:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba12a:	f7fa fba7 	bl	b487c <__aeabi_dcmplt>
   ba12e:	2800      	cmp	r0, #0
   ba130:	f47f acd0 	bne.w	b9ad4 <_strtod_l+0x4a4>
   ba134:	a334      	add	r3, pc, #208	; (adr r3, ba208 <_strtod_l+0xbd8>)
   ba136:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba13a:	4640      	mov	r0, r8
   ba13c:	4649      	mov	r1, r9
   ba13e:	f7fa fbbb 	bl	b48b8 <__aeabi_dcmpgt>
   ba142:	2800      	cmp	r0, #0
   ba144:	f43f af7b 	beq.w	ba03e <_strtod_l+0xa0e>
   ba148:	e4c4      	b.n	b9ad4 <_strtod_l+0x4a4>
   ba14a:	9b04      	ldr	r3, [sp, #16]
   ba14c:	b333      	cbz	r3, ba19c <_strtod_l+0xb6c>
   ba14e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba150:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba154:	d822      	bhi.n	ba19c <_strtod_l+0xb6c>
   ba156:	a32e      	add	r3, pc, #184	; (adr r3, ba210 <_strtod_l+0xbe0>)
   ba158:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba15c:	4640      	mov	r0, r8
   ba15e:	4649      	mov	r1, r9
   ba160:	f7fa fb96 	bl	b4890 <__aeabi_dcmple>
   ba164:	b1a0      	cbz	r0, ba190 <_strtod_l+0xb60>
   ba166:	4649      	mov	r1, r9
   ba168:	4640      	mov	r0, r8
   ba16a:	f7fa fbed 	bl	b4948 <__aeabi_d2uiz>
   ba16e:	2801      	cmp	r0, #1
   ba170:	bf38      	it	cc
   ba172:	2001      	movcc	r0, #1
   ba174:	f7fa f896 	bl	b42a4 <__aeabi_ui2d>
   ba178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba17a:	4680      	mov	r8, r0
   ba17c:	4689      	mov	r9, r1
   ba17e:	bb23      	cbnz	r3, ba1ca <_strtod_l+0xb9a>
   ba180:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba184:	9010      	str	r0, [sp, #64]	; 0x40
   ba186:	9311      	str	r3, [sp, #68]	; 0x44
   ba188:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   ba18c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba190:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba194:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ba198:	1a9b      	subs	r3, r3, r2
   ba19a:	9309      	str	r3, [sp, #36]	; 0x24
   ba19c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba1a0:	eeb0 0a48 	vmov.f32	s0, s16
   ba1a4:	eef0 0a68 	vmov.f32	s1, s17
   ba1a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba1ac:	f001 f838 	bl	bb220 <__ulp>
   ba1b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba1b4:	ec53 2b10 	vmov	r2, r3, d0
   ba1b8:	f7fa f8ee 	bl	b4398 <__aeabi_dmul>
   ba1bc:	ec53 2b18 	vmov	r2, r3, d8
   ba1c0:	f7f9 ff34 	bl	b402c <__adddf3>
   ba1c4:	4682      	mov	sl, r0
   ba1c6:	468b      	mov	fp, r1
   ba1c8:	e78d      	b.n	ba0e6 <_strtod_l+0xab6>
   ba1ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   ba1ce:	e7db      	b.n	ba188 <_strtod_l+0xb58>
   ba1d0:	a311      	add	r3, pc, #68	; (adr r3, ba218 <_strtod_l+0xbe8>)
   ba1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba1d6:	f7fa fb51 	bl	b487c <__aeabi_dcmplt>
   ba1da:	e7b2      	b.n	ba142 <_strtod_l+0xb12>
   ba1dc:	2300      	movs	r3, #0
   ba1de:	930a      	str	r3, [sp, #40]	; 0x28
   ba1e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba1e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba1e4:	6013      	str	r3, [r2, #0]
   ba1e6:	f7ff ba6b 	b.w	b96c0 <_strtod_l+0x90>
   ba1ea:	2a65      	cmp	r2, #101	; 0x65
   ba1ec:	f43f ab5f 	beq.w	b98ae <_strtod_l+0x27e>
   ba1f0:	2a45      	cmp	r2, #69	; 0x45
   ba1f2:	f43f ab5c 	beq.w	b98ae <_strtod_l+0x27e>
   ba1f6:	2301      	movs	r3, #1
   ba1f8:	f7ff bb94 	b.w	b9924 <_strtod_l+0x2f4>
   ba1fc:	f3af 8000 	nop.w
   ba200:	94a03595 	.word	0x94a03595
   ba204:	3fdfffff 	.word	0x3fdfffff
   ba208:	35afe535 	.word	0x35afe535
   ba20c:	3fe00000 	.word	0x3fe00000
   ba210:	ffc00000 	.word	0xffc00000
   ba214:	41dfffff 	.word	0x41dfffff
   ba218:	94a03595 	.word	0x94a03595
   ba21c:	3fcfffff 	.word	0x3fcfffff
   ba220:	3ff00000 	.word	0x3ff00000
   ba224:	7ff00000 	.word	0x7ff00000
   ba228:	7fe00000 	.word	0x7fe00000
   ba22c:	7c9fffff 	.word	0x7c9fffff
   ba230:	3fe00000 	.word	0x3fe00000
   ba234:	bff00000 	.word	0xbff00000
   ba238:	7fefffff 	.word	0x7fefffff

000ba23c <strtod>:
   ba23c:	460a      	mov	r2, r1
   ba23e:	4601      	mov	r1, r0
   ba240:	4802      	ldr	r0, [pc, #8]	; (ba24c <strtod+0x10>)
   ba242:	4b03      	ldr	r3, [pc, #12]	; (ba250 <strtod+0x14>)
   ba244:	6800      	ldr	r0, [r0, #0]
   ba246:	f7ff b9f3 	b.w	b9630 <_strtod_l>
   ba24a:	bf00      	nop
   ba24c:	2003e048 	.word	0x2003e048
   ba250:	2003e0b4 	.word	0x2003e0b4

000ba254 <_strtol_l.constprop.0>:
   ba254:	2b01      	cmp	r3, #1
   ba256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba25a:	d001      	beq.n	ba260 <_strtol_l.constprop.0+0xc>
   ba25c:	2b24      	cmp	r3, #36	; 0x24
   ba25e:	d906      	bls.n	ba26e <_strtol_l.constprop.0+0x1a>
   ba260:	f7fd fd3c 	bl	b7cdc <__errno>
   ba264:	2316      	movs	r3, #22
   ba266:	6003      	str	r3, [r0, #0]
   ba268:	2000      	movs	r0, #0
   ba26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba26e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba354 <_strtol_l.constprop.0+0x100>
   ba272:	460d      	mov	r5, r1
   ba274:	462e      	mov	r6, r5
   ba276:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba27a:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba27e:	f017 0708 	ands.w	r7, r7, #8
   ba282:	d1f7      	bne.n	ba274 <_strtol_l.constprop.0+0x20>
   ba284:	2c2d      	cmp	r4, #45	; 0x2d
   ba286:	d132      	bne.n	ba2ee <_strtol_l.constprop.0+0x9a>
   ba288:	782c      	ldrb	r4, [r5, #0]
   ba28a:	2701      	movs	r7, #1
   ba28c:	1cb5      	adds	r5, r6, #2
   ba28e:	2b00      	cmp	r3, #0
   ba290:	d05b      	beq.n	ba34a <_strtol_l.constprop.0+0xf6>
   ba292:	2b10      	cmp	r3, #16
   ba294:	d109      	bne.n	ba2aa <_strtol_l.constprop.0+0x56>
   ba296:	2c30      	cmp	r4, #48	; 0x30
   ba298:	d107      	bne.n	ba2aa <_strtol_l.constprop.0+0x56>
   ba29a:	782c      	ldrb	r4, [r5, #0]
   ba29c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba2a0:	2c58      	cmp	r4, #88	; 0x58
   ba2a2:	d14d      	bne.n	ba340 <_strtol_l.constprop.0+0xec>
   ba2a4:	786c      	ldrb	r4, [r5, #1]
   ba2a6:	2310      	movs	r3, #16
   ba2a8:	3502      	adds	r5, #2
   ba2aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba2ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ba2b2:	f04f 0c00 	mov.w	ip, #0
   ba2b6:	fbb8 f9f3 	udiv	r9, r8, r3
   ba2ba:	4666      	mov	r6, ip
   ba2bc:	fb03 8a19 	mls	sl, r3, r9, r8
   ba2c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba2c4:	f1be 0f09 	cmp.w	lr, #9
   ba2c8:	d816      	bhi.n	ba2f8 <_strtol_l.constprop.0+0xa4>
   ba2ca:	4674      	mov	r4, lr
   ba2cc:	42a3      	cmp	r3, r4
   ba2ce:	dd24      	ble.n	ba31a <_strtol_l.constprop.0+0xc6>
   ba2d0:	f1bc 0f00 	cmp.w	ip, #0
   ba2d4:	db1e      	blt.n	ba314 <_strtol_l.constprop.0+0xc0>
   ba2d6:	45b1      	cmp	r9, r6
   ba2d8:	d31c      	bcc.n	ba314 <_strtol_l.constprop.0+0xc0>
   ba2da:	d101      	bne.n	ba2e0 <_strtol_l.constprop.0+0x8c>
   ba2dc:	45a2      	cmp	sl, r4
   ba2de:	db19      	blt.n	ba314 <_strtol_l.constprop.0+0xc0>
   ba2e0:	fb06 4603 	mla	r6, r6, r3, r4
   ba2e4:	f04f 0c01 	mov.w	ip, #1
   ba2e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba2ec:	e7e8      	b.n	ba2c0 <_strtol_l.constprop.0+0x6c>
   ba2ee:	2c2b      	cmp	r4, #43	; 0x2b
   ba2f0:	bf04      	itt	eq
   ba2f2:	782c      	ldrbeq	r4, [r5, #0]
   ba2f4:	1cb5      	addeq	r5, r6, #2
   ba2f6:	e7ca      	b.n	ba28e <_strtol_l.constprop.0+0x3a>
   ba2f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba2fc:	f1be 0f19 	cmp.w	lr, #25
   ba300:	d801      	bhi.n	ba306 <_strtol_l.constprop.0+0xb2>
   ba302:	3c37      	subs	r4, #55	; 0x37
   ba304:	e7e2      	b.n	ba2cc <_strtol_l.constprop.0+0x78>
   ba306:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba30a:	f1be 0f19 	cmp.w	lr, #25
   ba30e:	d804      	bhi.n	ba31a <_strtol_l.constprop.0+0xc6>
   ba310:	3c57      	subs	r4, #87	; 0x57
   ba312:	e7db      	b.n	ba2cc <_strtol_l.constprop.0+0x78>
   ba314:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba318:	e7e6      	b.n	ba2e8 <_strtol_l.constprop.0+0x94>
   ba31a:	f1bc 0f00 	cmp.w	ip, #0
   ba31e:	da05      	bge.n	ba32c <_strtol_l.constprop.0+0xd8>
   ba320:	2322      	movs	r3, #34	; 0x22
   ba322:	6003      	str	r3, [r0, #0]
   ba324:	4646      	mov	r6, r8
   ba326:	b942      	cbnz	r2, ba33a <_strtol_l.constprop.0+0xe6>
   ba328:	4630      	mov	r0, r6
   ba32a:	e79e      	b.n	ba26a <_strtol_l.constprop.0+0x16>
   ba32c:	b107      	cbz	r7, ba330 <_strtol_l.constprop.0+0xdc>
   ba32e:	4276      	negs	r6, r6
   ba330:	2a00      	cmp	r2, #0
   ba332:	d0f9      	beq.n	ba328 <_strtol_l.constprop.0+0xd4>
   ba334:	f1bc 0f00 	cmp.w	ip, #0
   ba338:	d000      	beq.n	ba33c <_strtol_l.constprop.0+0xe8>
   ba33a:	1e69      	subs	r1, r5, #1
   ba33c:	6011      	str	r1, [r2, #0]
   ba33e:	e7f3      	b.n	ba328 <_strtol_l.constprop.0+0xd4>
   ba340:	2430      	movs	r4, #48	; 0x30
   ba342:	2b00      	cmp	r3, #0
   ba344:	d1b1      	bne.n	ba2aa <_strtol_l.constprop.0+0x56>
   ba346:	2308      	movs	r3, #8
   ba348:	e7af      	b.n	ba2aa <_strtol_l.constprop.0+0x56>
   ba34a:	2c30      	cmp	r4, #48	; 0x30
   ba34c:	d0a5      	beq.n	ba29a <_strtol_l.constprop.0+0x46>
   ba34e:	230a      	movs	r3, #10
   ba350:	e7ab      	b.n	ba2aa <_strtol_l.constprop.0+0x56>
   ba352:	bf00      	nop
   ba354:	000bc9a9 	.word	0x000bc9a9

000ba358 <strtol>:
   ba358:	4613      	mov	r3, r2
   ba35a:	460a      	mov	r2, r1
   ba35c:	4601      	mov	r1, r0
   ba35e:	4802      	ldr	r0, [pc, #8]	; (ba368 <strtol+0x10>)
   ba360:	6800      	ldr	r0, [r0, #0]
   ba362:	f7ff bf77 	b.w	ba254 <_strtol_l.constprop.0>
   ba366:	bf00      	nop
   ba368:	2003e048 	.word	0x2003e048

000ba36c <__register_exitproc>:
   ba36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba370:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba42c <__register_exitproc+0xc0>
   ba374:	4606      	mov	r6, r0
   ba376:	f8d8 0000 	ldr.w	r0, [r8]
   ba37a:	461f      	mov	r7, r3
   ba37c:	460d      	mov	r5, r1
   ba37e:	4691      	mov	r9, r2
   ba380:	f000 fbc6 	bl	bab10 <__retarget_lock_acquire_recursive>
   ba384:	4b25      	ldr	r3, [pc, #148]	; (ba41c <__register_exitproc+0xb0>)
   ba386:	681c      	ldr	r4, [r3, #0]
   ba388:	b934      	cbnz	r4, ba398 <__register_exitproc+0x2c>
   ba38a:	4c25      	ldr	r4, [pc, #148]	; (ba420 <__register_exitproc+0xb4>)
   ba38c:	601c      	str	r4, [r3, #0]
   ba38e:	4b25      	ldr	r3, [pc, #148]	; (ba424 <__register_exitproc+0xb8>)
   ba390:	b113      	cbz	r3, ba398 <__register_exitproc+0x2c>
   ba392:	681b      	ldr	r3, [r3, #0]
   ba394:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba398:	6863      	ldr	r3, [r4, #4]
   ba39a:	2b1f      	cmp	r3, #31
   ba39c:	dd07      	ble.n	ba3ae <__register_exitproc+0x42>
   ba39e:	f8d8 0000 	ldr.w	r0, [r8]
   ba3a2:	f000 fbb7 	bl	bab14 <__retarget_lock_release_recursive>
   ba3a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba3ae:	b34e      	cbz	r6, ba404 <__register_exitproc+0x98>
   ba3b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba3b4:	b988      	cbnz	r0, ba3da <__register_exitproc+0x6e>
   ba3b6:	4b1c      	ldr	r3, [pc, #112]	; (ba428 <__register_exitproc+0xbc>)
   ba3b8:	b923      	cbnz	r3, ba3c4 <__register_exitproc+0x58>
   ba3ba:	f8d8 0000 	ldr.w	r0, [r8]
   ba3be:	f000 fba8 	bl	bab12 <__retarget_lock_release>
   ba3c2:	e7f0      	b.n	ba3a6 <__register_exitproc+0x3a>
   ba3c4:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba3c8:	f7fd fc50 	bl	b7c6c <malloc>
   ba3cc:	2800      	cmp	r0, #0
   ba3ce:	d0f4      	beq.n	ba3ba <__register_exitproc+0x4e>
   ba3d0:	2300      	movs	r3, #0
   ba3d2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba3d6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba3da:	6863      	ldr	r3, [r4, #4]
   ba3dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba3e0:	2201      	movs	r2, #1
   ba3e2:	409a      	lsls	r2, r3
   ba3e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba3e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba3ec:	4313      	orrs	r3, r2
   ba3ee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba3f2:	2e02      	cmp	r6, #2
   ba3f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba3f8:	bf02      	ittt	eq
   ba3fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba3fe:	4313      	orreq	r3, r2
   ba400:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba404:	6863      	ldr	r3, [r4, #4]
   ba406:	f8d8 0000 	ldr.w	r0, [r8]
   ba40a:	1c5a      	adds	r2, r3, #1
   ba40c:	3302      	adds	r3, #2
   ba40e:	6062      	str	r2, [r4, #4]
   ba410:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba414:	f000 fb7e 	bl	bab14 <__retarget_lock_release_recursive>
   ba418:	2000      	movs	r0, #0
   ba41a:	e7c6      	b.n	ba3aa <__register_exitproc+0x3e>
   ba41c:	2003e7e8 	.word	0x2003e7e8
   ba420:	2003e75c 	.word	0x2003e75c
   ba424:	00000000 	.word	0x00000000
   ba428:	000b7c6d 	.word	0x000b7c6d
   ba42c:	2003e0ac 	.word	0x2003e0ac

000ba430 <rshift>:
   ba430:	6903      	ldr	r3, [r0, #16]
   ba432:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba436:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba43a:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba43e:	f100 0414 	add.w	r4, r0, #20
   ba442:	dd45      	ble.n	ba4d0 <rshift+0xa0>
   ba444:	f011 011f 	ands.w	r1, r1, #31
   ba448:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba44c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba450:	d10c      	bne.n	ba46c <rshift+0x3c>
   ba452:	f100 0710 	add.w	r7, r0, #16
   ba456:	4629      	mov	r1, r5
   ba458:	42b1      	cmp	r1, r6
   ba45a:	d334      	bcc.n	ba4c6 <rshift+0x96>
   ba45c:	1a9b      	subs	r3, r3, r2
   ba45e:	009b      	lsls	r3, r3, #2
   ba460:	1eea      	subs	r2, r5, #3
   ba462:	4296      	cmp	r6, r2
   ba464:	bf38      	it	cc
   ba466:	2300      	movcc	r3, #0
   ba468:	4423      	add	r3, r4
   ba46a:	e015      	b.n	ba498 <rshift+0x68>
   ba46c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba470:	f1c1 0820 	rsb	r8, r1, #32
   ba474:	40cf      	lsrs	r7, r1
   ba476:	f105 0e04 	add.w	lr, r5, #4
   ba47a:	46a1      	mov	r9, r4
   ba47c:	4576      	cmp	r6, lr
   ba47e:	46f4      	mov	ip, lr
   ba480:	d815      	bhi.n	ba4ae <rshift+0x7e>
   ba482:	1a9a      	subs	r2, r3, r2
   ba484:	0092      	lsls	r2, r2, #2
   ba486:	3a04      	subs	r2, #4
   ba488:	3501      	adds	r5, #1
   ba48a:	42ae      	cmp	r6, r5
   ba48c:	bf38      	it	cc
   ba48e:	2200      	movcc	r2, #0
   ba490:	18a3      	adds	r3, r4, r2
   ba492:	50a7      	str	r7, [r4, r2]
   ba494:	b107      	cbz	r7, ba498 <rshift+0x68>
   ba496:	3304      	adds	r3, #4
   ba498:	1b1a      	subs	r2, r3, r4
   ba49a:	42a3      	cmp	r3, r4
   ba49c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba4a0:	bf08      	it	eq
   ba4a2:	2300      	moveq	r3, #0
   ba4a4:	6102      	str	r2, [r0, #16]
   ba4a6:	bf08      	it	eq
   ba4a8:	6143      	streq	r3, [r0, #20]
   ba4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba4ae:	f8dc c000 	ldr.w	ip, [ip]
   ba4b2:	fa0c fc08 	lsl.w	ip, ip, r8
   ba4b6:	ea4c 0707 	orr.w	r7, ip, r7
   ba4ba:	f849 7b04 	str.w	r7, [r9], #4
   ba4be:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba4c2:	40cf      	lsrs	r7, r1
   ba4c4:	e7da      	b.n	ba47c <rshift+0x4c>
   ba4c6:	f851 cb04 	ldr.w	ip, [r1], #4
   ba4ca:	f847 cf04 	str.w	ip, [r7, #4]!
   ba4ce:	e7c3      	b.n	ba458 <rshift+0x28>
   ba4d0:	4623      	mov	r3, r4
   ba4d2:	e7e1      	b.n	ba498 <rshift+0x68>

000ba4d4 <__hexdig_fun>:
   ba4d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba4d8:	2b09      	cmp	r3, #9
   ba4da:	d802      	bhi.n	ba4e2 <__hexdig_fun+0xe>
   ba4dc:	3820      	subs	r0, #32
   ba4de:	b2c0      	uxtb	r0, r0
   ba4e0:	4770      	bx	lr
   ba4e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba4e6:	2b05      	cmp	r3, #5
   ba4e8:	d801      	bhi.n	ba4ee <__hexdig_fun+0x1a>
   ba4ea:	3847      	subs	r0, #71	; 0x47
   ba4ec:	e7f7      	b.n	ba4de <__hexdig_fun+0xa>
   ba4ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba4f2:	2b05      	cmp	r3, #5
   ba4f4:	d801      	bhi.n	ba4fa <__hexdig_fun+0x26>
   ba4f6:	3827      	subs	r0, #39	; 0x27
   ba4f8:	e7f1      	b.n	ba4de <__hexdig_fun+0xa>
   ba4fa:	2000      	movs	r0, #0
   ba4fc:	4770      	bx	lr
	...

000ba500 <__gethex>:
   ba500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba504:	ed2d 8b02 	vpush	{d8}
   ba508:	b089      	sub	sp, #36	; 0x24
   ba50a:	ee08 0a10 	vmov	s16, r0
   ba50e:	9304      	str	r3, [sp, #16]
   ba510:	4bb4      	ldr	r3, [pc, #720]	; (ba7e4 <__gethex+0x2e4>)
   ba512:	681b      	ldr	r3, [r3, #0]
   ba514:	9301      	str	r3, [sp, #4]
   ba516:	4618      	mov	r0, r3
   ba518:	468b      	mov	fp, r1
   ba51a:	4690      	mov	r8, r2
   ba51c:	f7fa faac 	bl	b4a78 <strlen>
   ba520:	9b01      	ldr	r3, [sp, #4]
   ba522:	f8db 2000 	ldr.w	r2, [fp]
   ba526:	4403      	add	r3, r0
   ba528:	4682      	mov	sl, r0
   ba52a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba52e:	9305      	str	r3, [sp, #20]
   ba530:	1c93      	adds	r3, r2, #2
   ba532:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba536:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba53a:	32fe      	adds	r2, #254	; 0xfe
   ba53c:	18d1      	adds	r1, r2, r3
   ba53e:	461f      	mov	r7, r3
   ba540:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba544:	9100      	str	r1, [sp, #0]
   ba546:	2830      	cmp	r0, #48	; 0x30
   ba548:	d0f8      	beq.n	ba53c <__gethex+0x3c>
   ba54a:	f7ff ffc3 	bl	ba4d4 <__hexdig_fun>
   ba54e:	4604      	mov	r4, r0
   ba550:	2800      	cmp	r0, #0
   ba552:	d13a      	bne.n	ba5ca <__gethex+0xca>
   ba554:	9901      	ldr	r1, [sp, #4]
   ba556:	4652      	mov	r2, sl
   ba558:	4638      	mov	r0, r7
   ba55a:	f7ff f825 	bl	b95a8 <strncmp>
   ba55e:	4605      	mov	r5, r0
   ba560:	2800      	cmp	r0, #0
   ba562:	d168      	bne.n	ba636 <__gethex+0x136>
   ba564:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba568:	eb07 060a 	add.w	r6, r7, sl
   ba56c:	f7ff ffb2 	bl	ba4d4 <__hexdig_fun>
   ba570:	2800      	cmp	r0, #0
   ba572:	d062      	beq.n	ba63a <__gethex+0x13a>
   ba574:	4633      	mov	r3, r6
   ba576:	7818      	ldrb	r0, [r3, #0]
   ba578:	2830      	cmp	r0, #48	; 0x30
   ba57a:	461f      	mov	r7, r3
   ba57c:	f103 0301 	add.w	r3, r3, #1
   ba580:	d0f9      	beq.n	ba576 <__gethex+0x76>
   ba582:	f7ff ffa7 	bl	ba4d4 <__hexdig_fun>
   ba586:	2301      	movs	r3, #1
   ba588:	fab0 f480 	clz	r4, r0
   ba58c:	0964      	lsrs	r4, r4, #5
   ba58e:	4635      	mov	r5, r6
   ba590:	9300      	str	r3, [sp, #0]
   ba592:	463a      	mov	r2, r7
   ba594:	4616      	mov	r6, r2
   ba596:	3201      	adds	r2, #1
   ba598:	7830      	ldrb	r0, [r6, #0]
   ba59a:	f7ff ff9b 	bl	ba4d4 <__hexdig_fun>
   ba59e:	2800      	cmp	r0, #0
   ba5a0:	d1f8      	bne.n	ba594 <__gethex+0x94>
   ba5a2:	9901      	ldr	r1, [sp, #4]
   ba5a4:	4652      	mov	r2, sl
   ba5a6:	4630      	mov	r0, r6
   ba5a8:	f7fe fffe 	bl	b95a8 <strncmp>
   ba5ac:	b980      	cbnz	r0, ba5d0 <__gethex+0xd0>
   ba5ae:	b94d      	cbnz	r5, ba5c4 <__gethex+0xc4>
   ba5b0:	eb06 050a 	add.w	r5, r6, sl
   ba5b4:	462a      	mov	r2, r5
   ba5b6:	4616      	mov	r6, r2
   ba5b8:	3201      	adds	r2, #1
   ba5ba:	7830      	ldrb	r0, [r6, #0]
   ba5bc:	f7ff ff8a 	bl	ba4d4 <__hexdig_fun>
   ba5c0:	2800      	cmp	r0, #0
   ba5c2:	d1f8      	bne.n	ba5b6 <__gethex+0xb6>
   ba5c4:	1bad      	subs	r5, r5, r6
   ba5c6:	00ad      	lsls	r5, r5, #2
   ba5c8:	e004      	b.n	ba5d4 <__gethex+0xd4>
   ba5ca:	2400      	movs	r4, #0
   ba5cc:	4625      	mov	r5, r4
   ba5ce:	e7e0      	b.n	ba592 <__gethex+0x92>
   ba5d0:	2d00      	cmp	r5, #0
   ba5d2:	d1f7      	bne.n	ba5c4 <__gethex+0xc4>
   ba5d4:	7833      	ldrb	r3, [r6, #0]
   ba5d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba5da:	2b50      	cmp	r3, #80	; 0x50
   ba5dc:	d13b      	bne.n	ba656 <__gethex+0x156>
   ba5de:	7873      	ldrb	r3, [r6, #1]
   ba5e0:	2b2b      	cmp	r3, #43	; 0x2b
   ba5e2:	d02c      	beq.n	ba63e <__gethex+0x13e>
   ba5e4:	2b2d      	cmp	r3, #45	; 0x2d
   ba5e6:	d02e      	beq.n	ba646 <__gethex+0x146>
   ba5e8:	1c71      	adds	r1, r6, #1
   ba5ea:	f04f 0900 	mov.w	r9, #0
   ba5ee:	7808      	ldrb	r0, [r1, #0]
   ba5f0:	f7ff ff70 	bl	ba4d4 <__hexdig_fun>
   ba5f4:	1e43      	subs	r3, r0, #1
   ba5f6:	b2db      	uxtb	r3, r3
   ba5f8:	2b18      	cmp	r3, #24
   ba5fa:	d82c      	bhi.n	ba656 <__gethex+0x156>
   ba5fc:	f1a0 0210 	sub.w	r2, r0, #16
   ba600:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba604:	f7ff ff66 	bl	ba4d4 <__hexdig_fun>
   ba608:	1e43      	subs	r3, r0, #1
   ba60a:	b2db      	uxtb	r3, r3
   ba60c:	2b18      	cmp	r3, #24
   ba60e:	d91d      	bls.n	ba64c <__gethex+0x14c>
   ba610:	f1b9 0f00 	cmp.w	r9, #0
   ba614:	d000      	beq.n	ba618 <__gethex+0x118>
   ba616:	4252      	negs	r2, r2
   ba618:	4415      	add	r5, r2
   ba61a:	f8cb 1000 	str.w	r1, [fp]
   ba61e:	b1e4      	cbz	r4, ba65a <__gethex+0x15a>
   ba620:	9b00      	ldr	r3, [sp, #0]
   ba622:	2b00      	cmp	r3, #0
   ba624:	bf14      	ite	ne
   ba626:	2700      	movne	r7, #0
   ba628:	2706      	moveq	r7, #6
   ba62a:	4638      	mov	r0, r7
   ba62c:	b009      	add	sp, #36	; 0x24
   ba62e:	ecbd 8b02 	vpop	{d8}
   ba632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba636:	463e      	mov	r6, r7
   ba638:	4625      	mov	r5, r4
   ba63a:	2401      	movs	r4, #1
   ba63c:	e7ca      	b.n	ba5d4 <__gethex+0xd4>
   ba63e:	f04f 0900 	mov.w	r9, #0
   ba642:	1cb1      	adds	r1, r6, #2
   ba644:	e7d3      	b.n	ba5ee <__gethex+0xee>
   ba646:	f04f 0901 	mov.w	r9, #1
   ba64a:	e7fa      	b.n	ba642 <__gethex+0x142>
   ba64c:	230a      	movs	r3, #10
   ba64e:	fb03 0202 	mla	r2, r3, r2, r0
   ba652:	3a10      	subs	r2, #16
   ba654:	e7d4      	b.n	ba600 <__gethex+0x100>
   ba656:	4631      	mov	r1, r6
   ba658:	e7df      	b.n	ba61a <__gethex+0x11a>
   ba65a:	1bf3      	subs	r3, r6, r7
   ba65c:	3b01      	subs	r3, #1
   ba65e:	4621      	mov	r1, r4
   ba660:	2b07      	cmp	r3, #7
   ba662:	dc0b      	bgt.n	ba67c <__gethex+0x17c>
   ba664:	ee18 0a10 	vmov	r0, s16
   ba668:	f000 fa68 	bl	bab3c <_Balloc>
   ba66c:	4604      	mov	r4, r0
   ba66e:	b940      	cbnz	r0, ba682 <__gethex+0x182>
   ba670:	4b5d      	ldr	r3, [pc, #372]	; (ba7e8 <__gethex+0x2e8>)
   ba672:	4602      	mov	r2, r0
   ba674:	21de      	movs	r1, #222	; 0xde
   ba676:	485d      	ldr	r0, [pc, #372]	; (ba7ec <__gethex+0x2ec>)
   ba678:	f7fd fb38 	bl	b7cec <__assert_func>
   ba67c:	3101      	adds	r1, #1
   ba67e:	105b      	asrs	r3, r3, #1
   ba680:	e7ee      	b.n	ba660 <__gethex+0x160>
   ba682:	f100 0914 	add.w	r9, r0, #20
   ba686:	f04f 0b00 	mov.w	fp, #0
   ba68a:	f1ca 0301 	rsb	r3, sl, #1
   ba68e:	f8cd 9008 	str.w	r9, [sp, #8]
   ba692:	f8cd b000 	str.w	fp, [sp]
   ba696:	9306      	str	r3, [sp, #24]
   ba698:	42b7      	cmp	r7, r6
   ba69a:	d340      	bcc.n	ba71e <__gethex+0x21e>
   ba69c:	9802      	ldr	r0, [sp, #8]
   ba69e:	9b00      	ldr	r3, [sp, #0]
   ba6a0:	f840 3b04 	str.w	r3, [r0], #4
   ba6a4:	eba0 0009 	sub.w	r0, r0, r9
   ba6a8:	1080      	asrs	r0, r0, #2
   ba6aa:	0146      	lsls	r6, r0, #5
   ba6ac:	6120      	str	r0, [r4, #16]
   ba6ae:	4618      	mov	r0, r3
   ba6b0:	f000 fb36 	bl	bad20 <__hi0bits>
   ba6b4:	1a30      	subs	r0, r6, r0
   ba6b6:	f8d8 6000 	ldr.w	r6, [r8]
   ba6ba:	42b0      	cmp	r0, r6
   ba6bc:	dd63      	ble.n	ba786 <__gethex+0x286>
   ba6be:	1b87      	subs	r7, r0, r6
   ba6c0:	4639      	mov	r1, r7
   ba6c2:	4620      	mov	r0, r4
   ba6c4:	f000 feda 	bl	bb47c <__any_on>
   ba6c8:	4682      	mov	sl, r0
   ba6ca:	b1a8      	cbz	r0, ba6f8 <__gethex+0x1f8>
   ba6cc:	1e7b      	subs	r3, r7, #1
   ba6ce:	1159      	asrs	r1, r3, #5
   ba6d0:	f003 021f 	and.w	r2, r3, #31
   ba6d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba6d8:	f04f 0a01 	mov.w	sl, #1
   ba6dc:	fa0a f202 	lsl.w	r2, sl, r2
   ba6e0:	420a      	tst	r2, r1
   ba6e2:	d009      	beq.n	ba6f8 <__gethex+0x1f8>
   ba6e4:	4553      	cmp	r3, sl
   ba6e6:	dd05      	ble.n	ba6f4 <__gethex+0x1f4>
   ba6e8:	1eb9      	subs	r1, r7, #2
   ba6ea:	4620      	mov	r0, r4
   ba6ec:	f000 fec6 	bl	bb47c <__any_on>
   ba6f0:	2800      	cmp	r0, #0
   ba6f2:	d145      	bne.n	ba780 <__gethex+0x280>
   ba6f4:	f04f 0a02 	mov.w	sl, #2
   ba6f8:	4639      	mov	r1, r7
   ba6fa:	4620      	mov	r0, r4
   ba6fc:	f7ff fe98 	bl	ba430 <rshift>
   ba700:	443d      	add	r5, r7
   ba702:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba706:	42ab      	cmp	r3, r5
   ba708:	da4c      	bge.n	ba7a4 <__gethex+0x2a4>
   ba70a:	ee18 0a10 	vmov	r0, s16
   ba70e:	4621      	mov	r1, r4
   ba710:	f000 fa54 	bl	babbc <_Bfree>
   ba714:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba716:	2300      	movs	r3, #0
   ba718:	6013      	str	r3, [r2, #0]
   ba71a:	27a3      	movs	r7, #163	; 0xa3
   ba71c:	e785      	b.n	ba62a <__gethex+0x12a>
   ba71e:	1e73      	subs	r3, r6, #1
   ba720:	9a05      	ldr	r2, [sp, #20]
   ba722:	9303      	str	r3, [sp, #12]
   ba724:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba728:	4293      	cmp	r3, r2
   ba72a:	d019      	beq.n	ba760 <__gethex+0x260>
   ba72c:	f1bb 0f20 	cmp.w	fp, #32
   ba730:	d107      	bne.n	ba742 <__gethex+0x242>
   ba732:	9b02      	ldr	r3, [sp, #8]
   ba734:	9a00      	ldr	r2, [sp, #0]
   ba736:	f843 2b04 	str.w	r2, [r3], #4
   ba73a:	9302      	str	r3, [sp, #8]
   ba73c:	2300      	movs	r3, #0
   ba73e:	9300      	str	r3, [sp, #0]
   ba740:	469b      	mov	fp, r3
   ba742:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba746:	f7ff fec5 	bl	ba4d4 <__hexdig_fun>
   ba74a:	9b00      	ldr	r3, [sp, #0]
   ba74c:	f000 000f 	and.w	r0, r0, #15
   ba750:	fa00 f00b 	lsl.w	r0, r0, fp
   ba754:	4303      	orrs	r3, r0
   ba756:	9300      	str	r3, [sp, #0]
   ba758:	f10b 0b04 	add.w	fp, fp, #4
   ba75c:	9b03      	ldr	r3, [sp, #12]
   ba75e:	e00d      	b.n	ba77c <__gethex+0x27c>
   ba760:	9b03      	ldr	r3, [sp, #12]
   ba762:	9a06      	ldr	r2, [sp, #24]
   ba764:	4413      	add	r3, r2
   ba766:	42bb      	cmp	r3, r7
   ba768:	d3e0      	bcc.n	ba72c <__gethex+0x22c>
   ba76a:	4618      	mov	r0, r3
   ba76c:	9901      	ldr	r1, [sp, #4]
   ba76e:	9307      	str	r3, [sp, #28]
   ba770:	4652      	mov	r2, sl
   ba772:	f7fe ff19 	bl	b95a8 <strncmp>
   ba776:	9b07      	ldr	r3, [sp, #28]
   ba778:	2800      	cmp	r0, #0
   ba77a:	d1d7      	bne.n	ba72c <__gethex+0x22c>
   ba77c:	461e      	mov	r6, r3
   ba77e:	e78b      	b.n	ba698 <__gethex+0x198>
   ba780:	f04f 0a03 	mov.w	sl, #3
   ba784:	e7b8      	b.n	ba6f8 <__gethex+0x1f8>
   ba786:	da0a      	bge.n	ba79e <__gethex+0x29e>
   ba788:	1a37      	subs	r7, r6, r0
   ba78a:	4621      	mov	r1, r4
   ba78c:	ee18 0a10 	vmov	r0, s16
   ba790:	463a      	mov	r2, r7
   ba792:	f000 fc2f 	bl	baff4 <__lshift>
   ba796:	1bed      	subs	r5, r5, r7
   ba798:	4604      	mov	r4, r0
   ba79a:	f100 0914 	add.w	r9, r0, #20
   ba79e:	f04f 0a00 	mov.w	sl, #0
   ba7a2:	e7ae      	b.n	ba702 <__gethex+0x202>
   ba7a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba7a8:	42a8      	cmp	r0, r5
   ba7aa:	dd72      	ble.n	ba892 <__gethex+0x392>
   ba7ac:	1b45      	subs	r5, r0, r5
   ba7ae:	42ae      	cmp	r6, r5
   ba7b0:	dc36      	bgt.n	ba820 <__gethex+0x320>
   ba7b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba7b6:	2b02      	cmp	r3, #2
   ba7b8:	d02a      	beq.n	ba810 <__gethex+0x310>
   ba7ba:	2b03      	cmp	r3, #3
   ba7bc:	d02c      	beq.n	ba818 <__gethex+0x318>
   ba7be:	2b01      	cmp	r3, #1
   ba7c0:	d11c      	bne.n	ba7fc <__gethex+0x2fc>
   ba7c2:	42ae      	cmp	r6, r5
   ba7c4:	d11a      	bne.n	ba7fc <__gethex+0x2fc>
   ba7c6:	2e01      	cmp	r6, #1
   ba7c8:	d112      	bne.n	ba7f0 <__gethex+0x2f0>
   ba7ca:	9a04      	ldr	r2, [sp, #16]
   ba7cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba7d0:	6013      	str	r3, [r2, #0]
   ba7d2:	2301      	movs	r3, #1
   ba7d4:	6123      	str	r3, [r4, #16]
   ba7d6:	f8c9 3000 	str.w	r3, [r9]
   ba7da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba7dc:	2762      	movs	r7, #98	; 0x62
   ba7de:	601c      	str	r4, [r3, #0]
   ba7e0:	e723      	b.n	ba62a <__gethex+0x12a>
   ba7e2:	bf00      	nop
   ba7e4:	000bcb1c 	.word	0x000bcb1c
   ba7e8:	000bcaa9 	.word	0x000bcaa9
   ba7ec:	000bcaba 	.word	0x000bcaba
   ba7f0:	1e71      	subs	r1, r6, #1
   ba7f2:	4620      	mov	r0, r4
   ba7f4:	f000 fe42 	bl	bb47c <__any_on>
   ba7f8:	2800      	cmp	r0, #0
   ba7fa:	d1e6      	bne.n	ba7ca <__gethex+0x2ca>
   ba7fc:	ee18 0a10 	vmov	r0, s16
   ba800:	4621      	mov	r1, r4
   ba802:	f000 f9db 	bl	babbc <_Bfree>
   ba806:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba808:	2300      	movs	r3, #0
   ba80a:	6013      	str	r3, [r2, #0]
   ba80c:	2750      	movs	r7, #80	; 0x50
   ba80e:	e70c      	b.n	ba62a <__gethex+0x12a>
   ba810:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba812:	2b00      	cmp	r3, #0
   ba814:	d1f2      	bne.n	ba7fc <__gethex+0x2fc>
   ba816:	e7d8      	b.n	ba7ca <__gethex+0x2ca>
   ba818:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba81a:	2b00      	cmp	r3, #0
   ba81c:	d1d5      	bne.n	ba7ca <__gethex+0x2ca>
   ba81e:	e7ed      	b.n	ba7fc <__gethex+0x2fc>
   ba820:	1e6f      	subs	r7, r5, #1
   ba822:	f1ba 0f00 	cmp.w	sl, #0
   ba826:	d131      	bne.n	ba88c <__gethex+0x38c>
   ba828:	b127      	cbz	r7, ba834 <__gethex+0x334>
   ba82a:	4639      	mov	r1, r7
   ba82c:	4620      	mov	r0, r4
   ba82e:	f000 fe25 	bl	bb47c <__any_on>
   ba832:	4682      	mov	sl, r0
   ba834:	117b      	asrs	r3, r7, #5
   ba836:	2101      	movs	r1, #1
   ba838:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba83c:	f007 071f 	and.w	r7, r7, #31
   ba840:	fa01 f707 	lsl.w	r7, r1, r7
   ba844:	421f      	tst	r7, r3
   ba846:	4629      	mov	r1, r5
   ba848:	4620      	mov	r0, r4
   ba84a:	bf18      	it	ne
   ba84c:	f04a 0a02 	orrne.w	sl, sl, #2
   ba850:	1b76      	subs	r6, r6, r5
   ba852:	f7ff fded 	bl	ba430 <rshift>
   ba856:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba85a:	2702      	movs	r7, #2
   ba85c:	f1ba 0f00 	cmp.w	sl, #0
   ba860:	d048      	beq.n	ba8f4 <__gethex+0x3f4>
   ba862:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba866:	2b02      	cmp	r3, #2
   ba868:	d015      	beq.n	ba896 <__gethex+0x396>
   ba86a:	2b03      	cmp	r3, #3
   ba86c:	d017      	beq.n	ba89e <__gethex+0x39e>
   ba86e:	2b01      	cmp	r3, #1
   ba870:	d109      	bne.n	ba886 <__gethex+0x386>
   ba872:	f01a 0f02 	tst.w	sl, #2
   ba876:	d006      	beq.n	ba886 <__gethex+0x386>
   ba878:	f8d9 0000 	ldr.w	r0, [r9]
   ba87c:	ea4a 0a00 	orr.w	sl, sl, r0
   ba880:	f01a 0f01 	tst.w	sl, #1
   ba884:	d10e      	bne.n	ba8a4 <__gethex+0x3a4>
   ba886:	f047 0710 	orr.w	r7, r7, #16
   ba88a:	e033      	b.n	ba8f4 <__gethex+0x3f4>
   ba88c:	f04f 0a01 	mov.w	sl, #1
   ba890:	e7d0      	b.n	ba834 <__gethex+0x334>
   ba892:	2701      	movs	r7, #1
   ba894:	e7e2      	b.n	ba85c <__gethex+0x35c>
   ba896:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba898:	f1c3 0301 	rsb	r3, r3, #1
   ba89c:	9315      	str	r3, [sp, #84]	; 0x54
   ba89e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba8a0:	2b00      	cmp	r3, #0
   ba8a2:	d0f0      	beq.n	ba886 <__gethex+0x386>
   ba8a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba8a8:	f104 0314 	add.w	r3, r4, #20
   ba8ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba8b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba8b4:	f04f 0c00 	mov.w	ip, #0
   ba8b8:	4618      	mov	r0, r3
   ba8ba:	f853 2b04 	ldr.w	r2, [r3], #4
   ba8be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   ba8c2:	d01c      	beq.n	ba8fe <__gethex+0x3fe>
   ba8c4:	3201      	adds	r2, #1
   ba8c6:	6002      	str	r2, [r0, #0]
   ba8c8:	2f02      	cmp	r7, #2
   ba8ca:	f104 0314 	add.w	r3, r4, #20
   ba8ce:	d13f      	bne.n	ba950 <__gethex+0x450>
   ba8d0:	f8d8 2000 	ldr.w	r2, [r8]
   ba8d4:	3a01      	subs	r2, #1
   ba8d6:	42b2      	cmp	r2, r6
   ba8d8:	d10a      	bne.n	ba8f0 <__gethex+0x3f0>
   ba8da:	1171      	asrs	r1, r6, #5
   ba8dc:	2201      	movs	r2, #1
   ba8de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba8e2:	f006 061f 	and.w	r6, r6, #31
   ba8e6:	fa02 f606 	lsl.w	r6, r2, r6
   ba8ea:	421e      	tst	r6, r3
   ba8ec:	bf18      	it	ne
   ba8ee:	4617      	movne	r7, r2
   ba8f0:	f047 0720 	orr.w	r7, r7, #32
   ba8f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba8f6:	601c      	str	r4, [r3, #0]
   ba8f8:	9b04      	ldr	r3, [sp, #16]
   ba8fa:	601d      	str	r5, [r3, #0]
   ba8fc:	e695      	b.n	ba62a <__gethex+0x12a>
   ba8fe:	4299      	cmp	r1, r3
   ba900:	f843 cc04 	str.w	ip, [r3, #-4]
   ba904:	d8d8      	bhi.n	ba8b8 <__gethex+0x3b8>
   ba906:	68a3      	ldr	r3, [r4, #8]
   ba908:	459b      	cmp	fp, r3
   ba90a:	db19      	blt.n	ba940 <__gethex+0x440>
   ba90c:	6861      	ldr	r1, [r4, #4]
   ba90e:	ee18 0a10 	vmov	r0, s16
   ba912:	3101      	adds	r1, #1
   ba914:	f000 f912 	bl	bab3c <_Balloc>
   ba918:	4681      	mov	r9, r0
   ba91a:	b918      	cbnz	r0, ba924 <__gethex+0x424>
   ba91c:	4b1a      	ldr	r3, [pc, #104]	; (ba988 <__gethex+0x488>)
   ba91e:	4602      	mov	r2, r0
   ba920:	2184      	movs	r1, #132	; 0x84
   ba922:	e6a8      	b.n	ba676 <__gethex+0x176>
   ba924:	6922      	ldr	r2, [r4, #16]
   ba926:	3202      	adds	r2, #2
   ba928:	f104 010c 	add.w	r1, r4, #12
   ba92c:	0092      	lsls	r2, r2, #2
   ba92e:	300c      	adds	r0, #12
   ba930:	f7fe fdf5 	bl	b951e <memcpy>
   ba934:	4621      	mov	r1, r4
   ba936:	ee18 0a10 	vmov	r0, s16
   ba93a:	f000 f93f 	bl	babbc <_Bfree>
   ba93e:	464c      	mov	r4, r9
   ba940:	6923      	ldr	r3, [r4, #16]
   ba942:	1c5a      	adds	r2, r3, #1
   ba944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba948:	6122      	str	r2, [r4, #16]
   ba94a:	2201      	movs	r2, #1
   ba94c:	615a      	str	r2, [r3, #20]
   ba94e:	e7bb      	b.n	ba8c8 <__gethex+0x3c8>
   ba950:	6922      	ldr	r2, [r4, #16]
   ba952:	455a      	cmp	r2, fp
   ba954:	dd0b      	ble.n	ba96e <__gethex+0x46e>
   ba956:	2101      	movs	r1, #1
   ba958:	4620      	mov	r0, r4
   ba95a:	f7ff fd69 	bl	ba430 <rshift>
   ba95e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba962:	3501      	adds	r5, #1
   ba964:	42ab      	cmp	r3, r5
   ba966:	f6ff aed0 	blt.w	ba70a <__gethex+0x20a>
   ba96a:	2701      	movs	r7, #1
   ba96c:	e7c0      	b.n	ba8f0 <__gethex+0x3f0>
   ba96e:	f016 061f 	ands.w	r6, r6, #31
   ba972:	d0fa      	beq.n	ba96a <__gethex+0x46a>
   ba974:	4453      	add	r3, sl
   ba976:	f1c6 0620 	rsb	r6, r6, #32
   ba97a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba97e:	f000 f9cf 	bl	bad20 <__hi0bits>
   ba982:	42b0      	cmp	r0, r6
   ba984:	dbe7      	blt.n	ba956 <__gethex+0x456>
   ba986:	e7f0      	b.n	ba96a <__gethex+0x46a>
   ba988:	000bcaa9 	.word	0x000bcaa9

000ba98c <L_shift>:
   ba98c:	f1c2 0208 	rsb	r2, r2, #8
   ba990:	0092      	lsls	r2, r2, #2
   ba992:	b570      	push	{r4, r5, r6, lr}
   ba994:	f1c2 0620 	rsb	r6, r2, #32
   ba998:	6843      	ldr	r3, [r0, #4]
   ba99a:	6804      	ldr	r4, [r0, #0]
   ba99c:	fa03 f506 	lsl.w	r5, r3, r6
   ba9a0:	432c      	orrs	r4, r5
   ba9a2:	40d3      	lsrs	r3, r2
   ba9a4:	6004      	str	r4, [r0, #0]
   ba9a6:	f840 3f04 	str.w	r3, [r0, #4]!
   ba9aa:	4288      	cmp	r0, r1
   ba9ac:	d3f4      	bcc.n	ba998 <L_shift+0xc>
   ba9ae:	bd70      	pop	{r4, r5, r6, pc}

000ba9b0 <__match>:
   ba9b0:	b530      	push	{r4, r5, lr}
   ba9b2:	6803      	ldr	r3, [r0, #0]
   ba9b4:	3301      	adds	r3, #1
   ba9b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba9ba:	b914      	cbnz	r4, ba9c2 <__match+0x12>
   ba9bc:	6003      	str	r3, [r0, #0]
   ba9be:	2001      	movs	r0, #1
   ba9c0:	bd30      	pop	{r4, r5, pc}
   ba9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba9c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba9ca:	2d19      	cmp	r5, #25
   ba9cc:	bf98      	it	ls
   ba9ce:	3220      	addls	r2, #32
   ba9d0:	42a2      	cmp	r2, r4
   ba9d2:	d0f0      	beq.n	ba9b6 <__match+0x6>
   ba9d4:	2000      	movs	r0, #0
   ba9d6:	e7f3      	b.n	ba9c0 <__match+0x10>

000ba9d8 <__hexnan>:
   ba9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba9dc:	680b      	ldr	r3, [r1, #0]
   ba9de:	115e      	asrs	r6, r3, #5
   ba9e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba9e4:	f013 031f 	ands.w	r3, r3, #31
   ba9e8:	b087      	sub	sp, #28
   ba9ea:	bf18      	it	ne
   ba9ec:	3604      	addne	r6, #4
   ba9ee:	2500      	movs	r5, #0
   ba9f0:	1f37      	subs	r7, r6, #4
   ba9f2:	4690      	mov	r8, r2
   ba9f4:	6802      	ldr	r2, [r0, #0]
   ba9f6:	9301      	str	r3, [sp, #4]
   ba9f8:	4682      	mov	sl, r0
   ba9fa:	f846 5c04 	str.w	r5, [r6, #-4]
   ba9fe:	46b9      	mov	r9, r7
   baa00:	463c      	mov	r4, r7
   baa02:	9502      	str	r5, [sp, #8]
   baa04:	46ab      	mov	fp, r5
   baa06:	7851      	ldrb	r1, [r2, #1]
   baa08:	1c53      	adds	r3, r2, #1
   baa0a:	9303      	str	r3, [sp, #12]
   baa0c:	b341      	cbz	r1, baa60 <__hexnan+0x88>
   baa0e:	4608      	mov	r0, r1
   baa10:	9205      	str	r2, [sp, #20]
   baa12:	9104      	str	r1, [sp, #16]
   baa14:	f7ff fd5e 	bl	ba4d4 <__hexdig_fun>
   baa18:	2800      	cmp	r0, #0
   baa1a:	d14f      	bne.n	baabc <__hexnan+0xe4>
   baa1c:	9904      	ldr	r1, [sp, #16]
   baa1e:	9a05      	ldr	r2, [sp, #20]
   baa20:	2920      	cmp	r1, #32
   baa22:	d818      	bhi.n	baa56 <__hexnan+0x7e>
   baa24:	9b02      	ldr	r3, [sp, #8]
   baa26:	459b      	cmp	fp, r3
   baa28:	dd13      	ble.n	baa52 <__hexnan+0x7a>
   baa2a:	454c      	cmp	r4, r9
   baa2c:	d206      	bcs.n	baa3c <__hexnan+0x64>
   baa2e:	2d07      	cmp	r5, #7
   baa30:	dc04      	bgt.n	baa3c <__hexnan+0x64>
   baa32:	462a      	mov	r2, r5
   baa34:	4649      	mov	r1, r9
   baa36:	4620      	mov	r0, r4
   baa38:	f7ff ffa8 	bl	ba98c <L_shift>
   baa3c:	4544      	cmp	r4, r8
   baa3e:	d950      	bls.n	baae2 <__hexnan+0x10a>
   baa40:	2300      	movs	r3, #0
   baa42:	f1a4 0904 	sub.w	r9, r4, #4
   baa46:	f844 3c04 	str.w	r3, [r4, #-4]
   baa4a:	f8cd b008 	str.w	fp, [sp, #8]
   baa4e:	464c      	mov	r4, r9
   baa50:	461d      	mov	r5, r3
   baa52:	9a03      	ldr	r2, [sp, #12]
   baa54:	e7d7      	b.n	baa06 <__hexnan+0x2e>
   baa56:	2929      	cmp	r1, #41	; 0x29
   baa58:	d156      	bne.n	bab08 <__hexnan+0x130>
   baa5a:	3202      	adds	r2, #2
   baa5c:	f8ca 2000 	str.w	r2, [sl]
   baa60:	f1bb 0f00 	cmp.w	fp, #0
   baa64:	d050      	beq.n	bab08 <__hexnan+0x130>
   baa66:	454c      	cmp	r4, r9
   baa68:	d206      	bcs.n	baa78 <__hexnan+0xa0>
   baa6a:	2d07      	cmp	r5, #7
   baa6c:	dc04      	bgt.n	baa78 <__hexnan+0xa0>
   baa6e:	462a      	mov	r2, r5
   baa70:	4649      	mov	r1, r9
   baa72:	4620      	mov	r0, r4
   baa74:	f7ff ff8a 	bl	ba98c <L_shift>
   baa78:	4544      	cmp	r4, r8
   baa7a:	d934      	bls.n	baae6 <__hexnan+0x10e>
   baa7c:	f1a8 0204 	sub.w	r2, r8, #4
   baa80:	4623      	mov	r3, r4
   baa82:	f853 1b04 	ldr.w	r1, [r3], #4
   baa86:	f842 1f04 	str.w	r1, [r2, #4]!
   baa8a:	429f      	cmp	r7, r3
   baa8c:	d2f9      	bcs.n	baa82 <__hexnan+0xaa>
   baa8e:	1b3b      	subs	r3, r7, r4
   baa90:	f023 0303 	bic.w	r3, r3, #3
   baa94:	3304      	adds	r3, #4
   baa96:	3401      	adds	r4, #1
   baa98:	3e03      	subs	r6, #3
   baa9a:	42b4      	cmp	r4, r6
   baa9c:	bf88      	it	hi
   baa9e:	2304      	movhi	r3, #4
   baaa0:	4443      	add	r3, r8
   baaa2:	2200      	movs	r2, #0
   baaa4:	f843 2b04 	str.w	r2, [r3], #4
   baaa8:	429f      	cmp	r7, r3
   baaaa:	d2fb      	bcs.n	baaa4 <__hexnan+0xcc>
   baaac:	683b      	ldr	r3, [r7, #0]
   baaae:	b91b      	cbnz	r3, baab8 <__hexnan+0xe0>
   baab0:	4547      	cmp	r7, r8
   baab2:	d127      	bne.n	bab04 <__hexnan+0x12c>
   baab4:	2301      	movs	r3, #1
   baab6:	603b      	str	r3, [r7, #0]
   baab8:	2005      	movs	r0, #5
   baaba:	e026      	b.n	bab0a <__hexnan+0x132>
   baabc:	3501      	adds	r5, #1
   baabe:	2d08      	cmp	r5, #8
   baac0:	f10b 0b01 	add.w	fp, fp, #1
   baac4:	dd06      	ble.n	baad4 <__hexnan+0xfc>
   baac6:	4544      	cmp	r4, r8
   baac8:	d9c3      	bls.n	baa52 <__hexnan+0x7a>
   baaca:	2300      	movs	r3, #0
   baacc:	f844 3c04 	str.w	r3, [r4, #-4]
   baad0:	2501      	movs	r5, #1
   baad2:	3c04      	subs	r4, #4
   baad4:	6822      	ldr	r2, [r4, #0]
   baad6:	f000 000f 	and.w	r0, r0, #15
   baada:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   baade:	6022      	str	r2, [r4, #0]
   baae0:	e7b7      	b.n	baa52 <__hexnan+0x7a>
   baae2:	2508      	movs	r5, #8
   baae4:	e7b5      	b.n	baa52 <__hexnan+0x7a>
   baae6:	9b01      	ldr	r3, [sp, #4]
   baae8:	2b00      	cmp	r3, #0
   baaea:	d0df      	beq.n	baaac <__hexnan+0xd4>
   baaec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baaf0:	f1c3 0320 	rsb	r3, r3, #32
   baaf4:	fa22 f303 	lsr.w	r3, r2, r3
   baaf8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   baafc:	401a      	ands	r2, r3
   baafe:	f846 2c04 	str.w	r2, [r6, #-4]
   bab02:	e7d3      	b.n	baaac <__hexnan+0xd4>
   bab04:	3f04      	subs	r7, #4
   bab06:	e7d1      	b.n	baaac <__hexnan+0xd4>
   bab08:	2004      	movs	r0, #4
   bab0a:	b007      	add	sp, #28
   bab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bab10 <__retarget_lock_acquire_recursive>:
   bab10:	4770      	bx	lr

000bab12 <__retarget_lock_release>:
   bab12:	4770      	bx	lr

000bab14 <__retarget_lock_release_recursive>:
   bab14:	4770      	bx	lr

000bab16 <__ascii_mbtowc>:
   bab16:	b082      	sub	sp, #8
   bab18:	b901      	cbnz	r1, bab1c <__ascii_mbtowc+0x6>
   bab1a:	a901      	add	r1, sp, #4
   bab1c:	b142      	cbz	r2, bab30 <__ascii_mbtowc+0x1a>
   bab1e:	b14b      	cbz	r3, bab34 <__ascii_mbtowc+0x1e>
   bab20:	7813      	ldrb	r3, [r2, #0]
   bab22:	600b      	str	r3, [r1, #0]
   bab24:	7812      	ldrb	r2, [r2, #0]
   bab26:	1e10      	subs	r0, r2, #0
   bab28:	bf18      	it	ne
   bab2a:	2001      	movne	r0, #1
   bab2c:	b002      	add	sp, #8
   bab2e:	4770      	bx	lr
   bab30:	4610      	mov	r0, r2
   bab32:	e7fb      	b.n	bab2c <__ascii_mbtowc+0x16>
   bab34:	f06f 0001 	mvn.w	r0, #1
   bab38:	e7f8      	b.n	bab2c <__ascii_mbtowc+0x16>
	...

000bab3c <_Balloc>:
   bab3c:	b570      	push	{r4, r5, r6, lr}
   bab3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bab40:	4604      	mov	r4, r0
   bab42:	460d      	mov	r5, r1
   bab44:	b976      	cbnz	r6, bab64 <_Balloc+0x28>
   bab46:	2010      	movs	r0, #16
   bab48:	f7fd f890 	bl	b7c6c <malloc>
   bab4c:	4602      	mov	r2, r0
   bab4e:	6260      	str	r0, [r4, #36]	; 0x24
   bab50:	b920      	cbnz	r0, bab5c <_Balloc+0x20>
   bab52:	4b18      	ldr	r3, [pc, #96]	; (babb4 <_Balloc+0x78>)
   bab54:	4818      	ldr	r0, [pc, #96]	; (babb8 <_Balloc+0x7c>)
   bab56:	2166      	movs	r1, #102	; 0x66
   bab58:	f7fd f8c8 	bl	b7cec <__assert_func>
   bab5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bab60:	6006      	str	r6, [r0, #0]
   bab62:	60c6      	str	r6, [r0, #12]
   bab64:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bab66:	68f3      	ldr	r3, [r6, #12]
   bab68:	b183      	cbz	r3, bab8c <_Balloc+0x50>
   bab6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bab6c:	68db      	ldr	r3, [r3, #12]
   bab6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bab72:	b9b8      	cbnz	r0, baba4 <_Balloc+0x68>
   bab74:	2101      	movs	r1, #1
   bab76:	fa01 f605 	lsl.w	r6, r1, r5
   bab7a:	1d72      	adds	r2, r6, #5
   bab7c:	0092      	lsls	r2, r2, #2
   bab7e:	4620      	mov	r0, r4
   bab80:	f000 fc9d 	bl	bb4be <_calloc_r>
   bab84:	b160      	cbz	r0, baba0 <_Balloc+0x64>
   bab86:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bab8a:	e00e      	b.n	babaa <_Balloc+0x6e>
   bab8c:	2221      	movs	r2, #33	; 0x21
   bab8e:	2104      	movs	r1, #4
   bab90:	4620      	mov	r0, r4
   bab92:	f000 fc94 	bl	bb4be <_calloc_r>
   bab96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bab98:	60f0      	str	r0, [r6, #12]
   bab9a:	68db      	ldr	r3, [r3, #12]
   bab9c:	2b00      	cmp	r3, #0
   bab9e:	d1e4      	bne.n	bab6a <_Balloc+0x2e>
   baba0:	2000      	movs	r0, #0
   baba2:	bd70      	pop	{r4, r5, r6, pc}
   baba4:	6802      	ldr	r2, [r0, #0]
   baba6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   babaa:	2300      	movs	r3, #0
   babac:	e9c0 3303 	strd	r3, r3, [r0, #12]
   babb0:	e7f7      	b.n	baba2 <_Balloc+0x66>
   babb2:	bf00      	nop
   babb4:	000bc8dd 	.word	0x000bc8dd
   babb8:	000bcb2e 	.word	0x000bcb2e

000babbc <_Bfree>:
   babbc:	b570      	push	{r4, r5, r6, lr}
   babbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   babc0:	4605      	mov	r5, r0
   babc2:	460c      	mov	r4, r1
   babc4:	b976      	cbnz	r6, babe4 <_Bfree+0x28>
   babc6:	2010      	movs	r0, #16
   babc8:	f7fd f850 	bl	b7c6c <malloc>
   babcc:	4602      	mov	r2, r0
   babce:	6268      	str	r0, [r5, #36]	; 0x24
   babd0:	b920      	cbnz	r0, babdc <_Bfree+0x20>
   babd2:	4b09      	ldr	r3, [pc, #36]	; (babf8 <_Bfree+0x3c>)
   babd4:	4809      	ldr	r0, [pc, #36]	; (babfc <_Bfree+0x40>)
   babd6:	218a      	movs	r1, #138	; 0x8a
   babd8:	f7fd f888 	bl	b7cec <__assert_func>
   babdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   babe0:	6006      	str	r6, [r0, #0]
   babe2:	60c6      	str	r6, [r0, #12]
   babe4:	b13c      	cbz	r4, babf6 <_Bfree+0x3a>
   babe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   babe8:	6862      	ldr	r2, [r4, #4]
   babea:	68db      	ldr	r3, [r3, #12]
   babec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   babf0:	6021      	str	r1, [r4, #0]
   babf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   babf6:	bd70      	pop	{r4, r5, r6, pc}
   babf8:	000bc8dd 	.word	0x000bc8dd
   babfc:	000bcb2e 	.word	0x000bcb2e

000bac00 <__multadd>:
   bac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bac04:	690d      	ldr	r5, [r1, #16]
   bac06:	4607      	mov	r7, r0
   bac08:	460c      	mov	r4, r1
   bac0a:	461e      	mov	r6, r3
   bac0c:	f101 0c14 	add.w	ip, r1, #20
   bac10:	2000      	movs	r0, #0
   bac12:	f8dc 3000 	ldr.w	r3, [ip]
   bac16:	b299      	uxth	r1, r3
   bac18:	fb02 6101 	mla	r1, r2, r1, r6
   bac1c:	0c1e      	lsrs	r6, r3, #16
   bac1e:	0c0b      	lsrs	r3, r1, #16
   bac20:	fb02 3306 	mla	r3, r2, r6, r3
   bac24:	b289      	uxth	r1, r1
   bac26:	3001      	adds	r0, #1
   bac28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bac2c:	4285      	cmp	r5, r0
   bac2e:	f84c 1b04 	str.w	r1, [ip], #4
   bac32:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bac36:	dcec      	bgt.n	bac12 <__multadd+0x12>
   bac38:	b30e      	cbz	r6, bac7e <__multadd+0x7e>
   bac3a:	68a3      	ldr	r3, [r4, #8]
   bac3c:	42ab      	cmp	r3, r5
   bac3e:	dc19      	bgt.n	bac74 <__multadd+0x74>
   bac40:	6861      	ldr	r1, [r4, #4]
   bac42:	4638      	mov	r0, r7
   bac44:	3101      	adds	r1, #1
   bac46:	f7ff ff79 	bl	bab3c <_Balloc>
   bac4a:	4680      	mov	r8, r0
   bac4c:	b928      	cbnz	r0, bac5a <__multadd+0x5a>
   bac4e:	4602      	mov	r2, r0
   bac50:	4b0c      	ldr	r3, [pc, #48]	; (bac84 <__multadd+0x84>)
   bac52:	480d      	ldr	r0, [pc, #52]	; (bac88 <__multadd+0x88>)
   bac54:	21b5      	movs	r1, #181	; 0xb5
   bac56:	f7fd f849 	bl	b7cec <__assert_func>
   bac5a:	6922      	ldr	r2, [r4, #16]
   bac5c:	3202      	adds	r2, #2
   bac5e:	f104 010c 	add.w	r1, r4, #12
   bac62:	0092      	lsls	r2, r2, #2
   bac64:	300c      	adds	r0, #12
   bac66:	f7fe fc5a 	bl	b951e <memcpy>
   bac6a:	4621      	mov	r1, r4
   bac6c:	4638      	mov	r0, r7
   bac6e:	f7ff ffa5 	bl	babbc <_Bfree>
   bac72:	4644      	mov	r4, r8
   bac74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bac78:	3501      	adds	r5, #1
   bac7a:	615e      	str	r6, [r3, #20]
   bac7c:	6125      	str	r5, [r4, #16]
   bac7e:	4620      	mov	r0, r4
   bac80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bac84:	000bcaa9 	.word	0x000bcaa9
   bac88:	000bcb2e 	.word	0x000bcb2e

000bac8c <__s2b>:
   bac8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bac90:	460c      	mov	r4, r1
   bac92:	4615      	mov	r5, r2
   bac94:	461f      	mov	r7, r3
   bac96:	2209      	movs	r2, #9
   bac98:	3308      	adds	r3, #8
   bac9a:	4606      	mov	r6, r0
   bac9c:	fb93 f3f2 	sdiv	r3, r3, r2
   baca0:	2100      	movs	r1, #0
   baca2:	2201      	movs	r2, #1
   baca4:	429a      	cmp	r2, r3
   baca6:	db09      	blt.n	bacbc <__s2b+0x30>
   baca8:	4630      	mov	r0, r6
   bacaa:	f7ff ff47 	bl	bab3c <_Balloc>
   bacae:	b940      	cbnz	r0, bacc2 <__s2b+0x36>
   bacb0:	4602      	mov	r2, r0
   bacb2:	4b19      	ldr	r3, [pc, #100]	; (bad18 <__s2b+0x8c>)
   bacb4:	4819      	ldr	r0, [pc, #100]	; (bad1c <__s2b+0x90>)
   bacb6:	21ce      	movs	r1, #206	; 0xce
   bacb8:	f7fd f818 	bl	b7cec <__assert_func>
   bacbc:	0052      	lsls	r2, r2, #1
   bacbe:	3101      	adds	r1, #1
   bacc0:	e7f0      	b.n	baca4 <__s2b+0x18>
   bacc2:	9b08      	ldr	r3, [sp, #32]
   bacc4:	6143      	str	r3, [r0, #20]
   bacc6:	2d09      	cmp	r5, #9
   bacc8:	f04f 0301 	mov.w	r3, #1
   baccc:	6103      	str	r3, [r0, #16]
   bacce:	dd16      	ble.n	bacfe <__s2b+0x72>
   bacd0:	f104 0909 	add.w	r9, r4, #9
   bacd4:	46c8      	mov	r8, r9
   bacd6:	442c      	add	r4, r5
   bacd8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bacdc:	4601      	mov	r1, r0
   bacde:	3b30      	subs	r3, #48	; 0x30
   bace0:	220a      	movs	r2, #10
   bace2:	4630      	mov	r0, r6
   bace4:	f7ff ff8c 	bl	bac00 <__multadd>
   bace8:	45a0      	cmp	r8, r4
   bacea:	d1f5      	bne.n	bacd8 <__s2b+0x4c>
   bacec:	f1a5 0408 	sub.w	r4, r5, #8
   bacf0:	444c      	add	r4, r9
   bacf2:	1b2d      	subs	r5, r5, r4
   bacf4:	1963      	adds	r3, r4, r5
   bacf6:	42bb      	cmp	r3, r7
   bacf8:	db04      	blt.n	bad04 <__s2b+0x78>
   bacfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bacfe:	340a      	adds	r4, #10
   bad00:	2509      	movs	r5, #9
   bad02:	e7f6      	b.n	bacf2 <__s2b+0x66>
   bad04:	f814 3b01 	ldrb.w	r3, [r4], #1
   bad08:	4601      	mov	r1, r0
   bad0a:	3b30      	subs	r3, #48	; 0x30
   bad0c:	220a      	movs	r2, #10
   bad0e:	4630      	mov	r0, r6
   bad10:	f7ff ff76 	bl	bac00 <__multadd>
   bad14:	e7ee      	b.n	bacf4 <__s2b+0x68>
   bad16:	bf00      	nop
   bad18:	000bcaa9 	.word	0x000bcaa9
   bad1c:	000bcb2e 	.word	0x000bcb2e

000bad20 <__hi0bits>:
   bad20:	0c03      	lsrs	r3, r0, #16
   bad22:	041b      	lsls	r3, r3, #16
   bad24:	b9d3      	cbnz	r3, bad5c <__hi0bits+0x3c>
   bad26:	0400      	lsls	r0, r0, #16
   bad28:	2310      	movs	r3, #16
   bad2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bad2e:	bf04      	itt	eq
   bad30:	0200      	lsleq	r0, r0, #8
   bad32:	3308      	addeq	r3, #8
   bad34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bad38:	bf04      	itt	eq
   bad3a:	0100      	lsleq	r0, r0, #4
   bad3c:	3304      	addeq	r3, #4
   bad3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bad42:	bf04      	itt	eq
   bad44:	0080      	lsleq	r0, r0, #2
   bad46:	3302      	addeq	r3, #2
   bad48:	2800      	cmp	r0, #0
   bad4a:	db05      	blt.n	bad58 <__hi0bits+0x38>
   bad4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bad50:	f103 0301 	add.w	r3, r3, #1
   bad54:	bf08      	it	eq
   bad56:	2320      	moveq	r3, #32
   bad58:	4618      	mov	r0, r3
   bad5a:	4770      	bx	lr
   bad5c:	2300      	movs	r3, #0
   bad5e:	e7e4      	b.n	bad2a <__hi0bits+0xa>

000bad60 <__lo0bits>:
   bad60:	6803      	ldr	r3, [r0, #0]
   bad62:	f013 0207 	ands.w	r2, r3, #7
   bad66:	4601      	mov	r1, r0
   bad68:	d00b      	beq.n	bad82 <__lo0bits+0x22>
   bad6a:	07da      	lsls	r2, r3, #31
   bad6c:	d423      	bmi.n	badb6 <__lo0bits+0x56>
   bad6e:	0798      	lsls	r0, r3, #30
   bad70:	bf49      	itett	mi
   bad72:	085b      	lsrmi	r3, r3, #1
   bad74:	089b      	lsrpl	r3, r3, #2
   bad76:	2001      	movmi	r0, #1
   bad78:	600b      	strmi	r3, [r1, #0]
   bad7a:	bf5c      	itt	pl
   bad7c:	600b      	strpl	r3, [r1, #0]
   bad7e:	2002      	movpl	r0, #2
   bad80:	4770      	bx	lr
   bad82:	b298      	uxth	r0, r3
   bad84:	b9a8      	cbnz	r0, badb2 <__lo0bits+0x52>
   bad86:	0c1b      	lsrs	r3, r3, #16
   bad88:	2010      	movs	r0, #16
   bad8a:	b2da      	uxtb	r2, r3
   bad8c:	b90a      	cbnz	r2, bad92 <__lo0bits+0x32>
   bad8e:	3008      	adds	r0, #8
   bad90:	0a1b      	lsrs	r3, r3, #8
   bad92:	071a      	lsls	r2, r3, #28
   bad94:	bf04      	itt	eq
   bad96:	091b      	lsreq	r3, r3, #4
   bad98:	3004      	addeq	r0, #4
   bad9a:	079a      	lsls	r2, r3, #30
   bad9c:	bf04      	itt	eq
   bad9e:	089b      	lsreq	r3, r3, #2
   bada0:	3002      	addeq	r0, #2
   bada2:	07da      	lsls	r2, r3, #31
   bada4:	d403      	bmi.n	badae <__lo0bits+0x4e>
   bada6:	085b      	lsrs	r3, r3, #1
   bada8:	f100 0001 	add.w	r0, r0, #1
   badac:	d005      	beq.n	badba <__lo0bits+0x5a>
   badae:	600b      	str	r3, [r1, #0]
   badb0:	4770      	bx	lr
   badb2:	4610      	mov	r0, r2
   badb4:	e7e9      	b.n	bad8a <__lo0bits+0x2a>
   badb6:	2000      	movs	r0, #0
   badb8:	4770      	bx	lr
   badba:	2020      	movs	r0, #32
   badbc:	4770      	bx	lr
	...

000badc0 <__i2b>:
   badc0:	b510      	push	{r4, lr}
   badc2:	460c      	mov	r4, r1
   badc4:	2101      	movs	r1, #1
   badc6:	f7ff feb9 	bl	bab3c <_Balloc>
   badca:	4602      	mov	r2, r0
   badcc:	b928      	cbnz	r0, badda <__i2b+0x1a>
   badce:	4b05      	ldr	r3, [pc, #20]	; (bade4 <__i2b+0x24>)
   badd0:	4805      	ldr	r0, [pc, #20]	; (bade8 <__i2b+0x28>)
   badd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   badd6:	f7fc ff89 	bl	b7cec <__assert_func>
   badda:	2301      	movs	r3, #1
   baddc:	6144      	str	r4, [r0, #20]
   badde:	6103      	str	r3, [r0, #16]
   bade0:	bd10      	pop	{r4, pc}
   bade2:	bf00      	nop
   bade4:	000bcaa9 	.word	0x000bcaa9
   bade8:	000bcb2e 	.word	0x000bcb2e

000badec <__multiply>:
   badec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   badf0:	4691      	mov	r9, r2
   badf2:	690a      	ldr	r2, [r1, #16]
   badf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   badf8:	429a      	cmp	r2, r3
   badfa:	bfb8      	it	lt
   badfc:	460b      	movlt	r3, r1
   badfe:	460c      	mov	r4, r1
   bae00:	bfbc      	itt	lt
   bae02:	464c      	movlt	r4, r9
   bae04:	4699      	movlt	r9, r3
   bae06:	6927      	ldr	r7, [r4, #16]
   bae08:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bae0c:	68a3      	ldr	r3, [r4, #8]
   bae0e:	6861      	ldr	r1, [r4, #4]
   bae10:	eb07 060a 	add.w	r6, r7, sl
   bae14:	42b3      	cmp	r3, r6
   bae16:	b085      	sub	sp, #20
   bae18:	bfb8      	it	lt
   bae1a:	3101      	addlt	r1, #1
   bae1c:	f7ff fe8e 	bl	bab3c <_Balloc>
   bae20:	b930      	cbnz	r0, bae30 <__multiply+0x44>
   bae22:	4602      	mov	r2, r0
   bae24:	4b44      	ldr	r3, [pc, #272]	; (baf38 <__multiply+0x14c>)
   bae26:	4845      	ldr	r0, [pc, #276]	; (baf3c <__multiply+0x150>)
   bae28:	f240 115d 	movw	r1, #349	; 0x15d
   bae2c:	f7fc ff5e 	bl	b7cec <__assert_func>
   bae30:	f100 0514 	add.w	r5, r0, #20
   bae34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bae38:	462b      	mov	r3, r5
   bae3a:	2200      	movs	r2, #0
   bae3c:	4543      	cmp	r3, r8
   bae3e:	d321      	bcc.n	bae84 <__multiply+0x98>
   bae40:	f104 0314 	add.w	r3, r4, #20
   bae44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bae48:	f109 0314 	add.w	r3, r9, #20
   bae4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bae50:	9202      	str	r2, [sp, #8]
   bae52:	1b3a      	subs	r2, r7, r4
   bae54:	3a15      	subs	r2, #21
   bae56:	f022 0203 	bic.w	r2, r2, #3
   bae5a:	3204      	adds	r2, #4
   bae5c:	f104 0115 	add.w	r1, r4, #21
   bae60:	428f      	cmp	r7, r1
   bae62:	bf38      	it	cc
   bae64:	2204      	movcc	r2, #4
   bae66:	9201      	str	r2, [sp, #4]
   bae68:	9a02      	ldr	r2, [sp, #8]
   bae6a:	9303      	str	r3, [sp, #12]
   bae6c:	429a      	cmp	r2, r3
   bae6e:	d80c      	bhi.n	bae8a <__multiply+0x9e>
   bae70:	2e00      	cmp	r6, #0
   bae72:	dd03      	ble.n	bae7c <__multiply+0x90>
   bae74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bae78:	2b00      	cmp	r3, #0
   bae7a:	d05a      	beq.n	baf32 <__multiply+0x146>
   bae7c:	6106      	str	r6, [r0, #16]
   bae7e:	b005      	add	sp, #20
   bae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bae84:	f843 2b04 	str.w	r2, [r3], #4
   bae88:	e7d8      	b.n	bae3c <__multiply+0x50>
   bae8a:	f8b3 a000 	ldrh.w	sl, [r3]
   bae8e:	f1ba 0f00 	cmp.w	sl, #0
   bae92:	d024      	beq.n	baede <__multiply+0xf2>
   bae94:	f104 0e14 	add.w	lr, r4, #20
   bae98:	46a9      	mov	r9, r5
   bae9a:	f04f 0c00 	mov.w	ip, #0
   bae9e:	f85e 2b04 	ldr.w	r2, [lr], #4
   baea2:	f8d9 1000 	ldr.w	r1, [r9]
   baea6:	fa1f fb82 	uxth.w	fp, r2
   baeaa:	b289      	uxth	r1, r1
   baeac:	fb0a 110b 	mla	r1, sl, fp, r1
   baeb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   baeb4:	f8d9 2000 	ldr.w	r2, [r9]
   baeb8:	4461      	add	r1, ip
   baeba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baebe:	fb0a c20b 	mla	r2, sl, fp, ip
   baec2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   baec6:	b289      	uxth	r1, r1
   baec8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   baecc:	4577      	cmp	r7, lr
   baece:	f849 1b04 	str.w	r1, [r9], #4
   baed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baed6:	d8e2      	bhi.n	bae9e <__multiply+0xb2>
   baed8:	9a01      	ldr	r2, [sp, #4]
   baeda:	f845 c002 	str.w	ip, [r5, r2]
   baede:	9a03      	ldr	r2, [sp, #12]
   baee0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   baee4:	3304      	adds	r3, #4
   baee6:	f1b9 0f00 	cmp.w	r9, #0
   baeea:	d020      	beq.n	baf2e <__multiply+0x142>
   baeec:	6829      	ldr	r1, [r5, #0]
   baeee:	f104 0c14 	add.w	ip, r4, #20
   baef2:	46ae      	mov	lr, r5
   baef4:	f04f 0a00 	mov.w	sl, #0
   baef8:	f8bc b000 	ldrh.w	fp, [ip]
   baefc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   baf00:	fb09 220b 	mla	r2, r9, fp, r2
   baf04:	4492      	add	sl, r2
   baf06:	b289      	uxth	r1, r1
   baf08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   baf0c:	f84e 1b04 	str.w	r1, [lr], #4
   baf10:	f85c 2b04 	ldr.w	r2, [ip], #4
   baf14:	f8be 1000 	ldrh.w	r1, [lr]
   baf18:	0c12      	lsrs	r2, r2, #16
   baf1a:	fb09 1102 	mla	r1, r9, r2, r1
   baf1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   baf22:	4567      	cmp	r7, ip
   baf24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   baf28:	d8e6      	bhi.n	baef8 <__multiply+0x10c>
   baf2a:	9a01      	ldr	r2, [sp, #4]
   baf2c:	50a9      	str	r1, [r5, r2]
   baf2e:	3504      	adds	r5, #4
   baf30:	e79a      	b.n	bae68 <__multiply+0x7c>
   baf32:	3e01      	subs	r6, #1
   baf34:	e79c      	b.n	bae70 <__multiply+0x84>
   baf36:	bf00      	nop
   baf38:	000bcaa9 	.word	0x000bcaa9
   baf3c:	000bcb2e 	.word	0x000bcb2e

000baf40 <__pow5mult>:
   baf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baf44:	4615      	mov	r5, r2
   baf46:	f012 0203 	ands.w	r2, r2, #3
   baf4a:	4606      	mov	r6, r0
   baf4c:	460f      	mov	r7, r1
   baf4e:	d007      	beq.n	baf60 <__pow5mult+0x20>
   baf50:	4c25      	ldr	r4, [pc, #148]	; (bafe8 <__pow5mult+0xa8>)
   baf52:	3a01      	subs	r2, #1
   baf54:	2300      	movs	r3, #0
   baf56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   baf5a:	f7ff fe51 	bl	bac00 <__multadd>
   baf5e:	4607      	mov	r7, r0
   baf60:	10ad      	asrs	r5, r5, #2
   baf62:	d03d      	beq.n	bafe0 <__pow5mult+0xa0>
   baf64:	6a74      	ldr	r4, [r6, #36]	; 0x24
   baf66:	b97c      	cbnz	r4, baf88 <__pow5mult+0x48>
   baf68:	2010      	movs	r0, #16
   baf6a:	f7fc fe7f 	bl	b7c6c <malloc>
   baf6e:	4602      	mov	r2, r0
   baf70:	6270      	str	r0, [r6, #36]	; 0x24
   baf72:	b928      	cbnz	r0, baf80 <__pow5mult+0x40>
   baf74:	4b1d      	ldr	r3, [pc, #116]	; (bafec <__pow5mult+0xac>)
   baf76:	481e      	ldr	r0, [pc, #120]	; (baff0 <__pow5mult+0xb0>)
   baf78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   baf7c:	f7fc feb6 	bl	b7cec <__assert_func>
   baf80:	e9c0 4401 	strd	r4, r4, [r0, #4]
   baf84:	6004      	str	r4, [r0, #0]
   baf86:	60c4      	str	r4, [r0, #12]
   baf88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   baf8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   baf90:	b94c      	cbnz	r4, bafa6 <__pow5mult+0x66>
   baf92:	f240 2171 	movw	r1, #625	; 0x271
   baf96:	4630      	mov	r0, r6
   baf98:	f7ff ff12 	bl	badc0 <__i2b>
   baf9c:	2300      	movs	r3, #0
   baf9e:	f8c8 0008 	str.w	r0, [r8, #8]
   bafa2:	4604      	mov	r4, r0
   bafa4:	6003      	str	r3, [r0, #0]
   bafa6:	f04f 0900 	mov.w	r9, #0
   bafaa:	07eb      	lsls	r3, r5, #31
   bafac:	d50a      	bpl.n	bafc4 <__pow5mult+0x84>
   bafae:	4639      	mov	r1, r7
   bafb0:	4622      	mov	r2, r4
   bafb2:	4630      	mov	r0, r6
   bafb4:	f7ff ff1a 	bl	badec <__multiply>
   bafb8:	4639      	mov	r1, r7
   bafba:	4680      	mov	r8, r0
   bafbc:	4630      	mov	r0, r6
   bafbe:	f7ff fdfd 	bl	babbc <_Bfree>
   bafc2:	4647      	mov	r7, r8
   bafc4:	106d      	asrs	r5, r5, #1
   bafc6:	d00b      	beq.n	bafe0 <__pow5mult+0xa0>
   bafc8:	6820      	ldr	r0, [r4, #0]
   bafca:	b938      	cbnz	r0, bafdc <__pow5mult+0x9c>
   bafcc:	4622      	mov	r2, r4
   bafce:	4621      	mov	r1, r4
   bafd0:	4630      	mov	r0, r6
   bafd2:	f7ff ff0b 	bl	badec <__multiply>
   bafd6:	6020      	str	r0, [r4, #0]
   bafd8:	f8c0 9000 	str.w	r9, [r0]
   bafdc:	4604      	mov	r4, r0
   bafde:	e7e4      	b.n	bafaa <__pow5mult+0x6a>
   bafe0:	4638      	mov	r0, r7
   bafe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bafe6:	bf00      	nop
   bafe8:	000bcc78 	.word	0x000bcc78
   bafec:	000bc8dd 	.word	0x000bc8dd
   baff0:	000bcb2e 	.word	0x000bcb2e

000baff4 <__lshift>:
   baff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   baff8:	460c      	mov	r4, r1
   baffa:	6849      	ldr	r1, [r1, #4]
   baffc:	6923      	ldr	r3, [r4, #16]
   baffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bb002:	68a3      	ldr	r3, [r4, #8]
   bb004:	4607      	mov	r7, r0
   bb006:	4691      	mov	r9, r2
   bb008:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bb00c:	f108 0601 	add.w	r6, r8, #1
   bb010:	42b3      	cmp	r3, r6
   bb012:	db0b      	blt.n	bb02c <__lshift+0x38>
   bb014:	4638      	mov	r0, r7
   bb016:	f7ff fd91 	bl	bab3c <_Balloc>
   bb01a:	4605      	mov	r5, r0
   bb01c:	b948      	cbnz	r0, bb032 <__lshift+0x3e>
   bb01e:	4602      	mov	r2, r0
   bb020:	4b2a      	ldr	r3, [pc, #168]	; (bb0cc <__lshift+0xd8>)
   bb022:	482b      	ldr	r0, [pc, #172]	; (bb0d0 <__lshift+0xdc>)
   bb024:	f240 11d9 	movw	r1, #473	; 0x1d9
   bb028:	f7fc fe60 	bl	b7cec <__assert_func>
   bb02c:	3101      	adds	r1, #1
   bb02e:	005b      	lsls	r3, r3, #1
   bb030:	e7ee      	b.n	bb010 <__lshift+0x1c>
   bb032:	2300      	movs	r3, #0
   bb034:	f100 0114 	add.w	r1, r0, #20
   bb038:	f100 0210 	add.w	r2, r0, #16
   bb03c:	4618      	mov	r0, r3
   bb03e:	4553      	cmp	r3, sl
   bb040:	db37      	blt.n	bb0b2 <__lshift+0xbe>
   bb042:	6920      	ldr	r0, [r4, #16]
   bb044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bb048:	f104 0314 	add.w	r3, r4, #20
   bb04c:	f019 091f 	ands.w	r9, r9, #31
   bb050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bb054:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bb058:	d02f      	beq.n	bb0ba <__lshift+0xc6>
   bb05a:	f1c9 0e20 	rsb	lr, r9, #32
   bb05e:	468a      	mov	sl, r1
   bb060:	f04f 0c00 	mov.w	ip, #0
   bb064:	681a      	ldr	r2, [r3, #0]
   bb066:	fa02 f209 	lsl.w	r2, r2, r9
   bb06a:	ea42 020c 	orr.w	r2, r2, ip
   bb06e:	f84a 2b04 	str.w	r2, [sl], #4
   bb072:	f853 2b04 	ldr.w	r2, [r3], #4
   bb076:	4298      	cmp	r0, r3
   bb078:	fa22 fc0e 	lsr.w	ip, r2, lr
   bb07c:	d8f2      	bhi.n	bb064 <__lshift+0x70>
   bb07e:	1b03      	subs	r3, r0, r4
   bb080:	3b15      	subs	r3, #21
   bb082:	f023 0303 	bic.w	r3, r3, #3
   bb086:	3304      	adds	r3, #4
   bb088:	f104 0215 	add.w	r2, r4, #21
   bb08c:	4290      	cmp	r0, r2
   bb08e:	bf38      	it	cc
   bb090:	2304      	movcc	r3, #4
   bb092:	f841 c003 	str.w	ip, [r1, r3]
   bb096:	f1bc 0f00 	cmp.w	ip, #0
   bb09a:	d001      	beq.n	bb0a0 <__lshift+0xac>
   bb09c:	f108 0602 	add.w	r6, r8, #2
   bb0a0:	3e01      	subs	r6, #1
   bb0a2:	4638      	mov	r0, r7
   bb0a4:	612e      	str	r6, [r5, #16]
   bb0a6:	4621      	mov	r1, r4
   bb0a8:	f7ff fd88 	bl	babbc <_Bfree>
   bb0ac:	4628      	mov	r0, r5
   bb0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb0b2:	f842 0f04 	str.w	r0, [r2, #4]!
   bb0b6:	3301      	adds	r3, #1
   bb0b8:	e7c1      	b.n	bb03e <__lshift+0x4a>
   bb0ba:	3904      	subs	r1, #4
   bb0bc:	f853 2b04 	ldr.w	r2, [r3], #4
   bb0c0:	f841 2f04 	str.w	r2, [r1, #4]!
   bb0c4:	4298      	cmp	r0, r3
   bb0c6:	d8f9      	bhi.n	bb0bc <__lshift+0xc8>
   bb0c8:	e7ea      	b.n	bb0a0 <__lshift+0xac>
   bb0ca:	bf00      	nop
   bb0cc:	000bcaa9 	.word	0x000bcaa9
   bb0d0:	000bcb2e 	.word	0x000bcb2e

000bb0d4 <__mcmp>:
   bb0d4:	b530      	push	{r4, r5, lr}
   bb0d6:	6902      	ldr	r2, [r0, #16]
   bb0d8:	690c      	ldr	r4, [r1, #16]
   bb0da:	1b12      	subs	r2, r2, r4
   bb0dc:	d10e      	bne.n	bb0fc <__mcmp+0x28>
   bb0de:	f100 0314 	add.w	r3, r0, #20
   bb0e2:	3114      	adds	r1, #20
   bb0e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb0e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb0ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb0f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb0f4:	42a5      	cmp	r5, r4
   bb0f6:	d003      	beq.n	bb100 <__mcmp+0x2c>
   bb0f8:	d305      	bcc.n	bb106 <__mcmp+0x32>
   bb0fa:	2201      	movs	r2, #1
   bb0fc:	4610      	mov	r0, r2
   bb0fe:	bd30      	pop	{r4, r5, pc}
   bb100:	4283      	cmp	r3, r0
   bb102:	d3f3      	bcc.n	bb0ec <__mcmp+0x18>
   bb104:	e7fa      	b.n	bb0fc <__mcmp+0x28>
   bb106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb10a:	e7f7      	b.n	bb0fc <__mcmp+0x28>

000bb10c <__mdiff>:
   bb10c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb110:	460c      	mov	r4, r1
   bb112:	4606      	mov	r6, r0
   bb114:	4611      	mov	r1, r2
   bb116:	4620      	mov	r0, r4
   bb118:	4690      	mov	r8, r2
   bb11a:	f7ff ffdb 	bl	bb0d4 <__mcmp>
   bb11e:	1e05      	subs	r5, r0, #0
   bb120:	d110      	bne.n	bb144 <__mdiff+0x38>
   bb122:	4629      	mov	r1, r5
   bb124:	4630      	mov	r0, r6
   bb126:	f7ff fd09 	bl	bab3c <_Balloc>
   bb12a:	b930      	cbnz	r0, bb13a <__mdiff+0x2e>
   bb12c:	4b3a      	ldr	r3, [pc, #232]	; (bb218 <__mdiff+0x10c>)
   bb12e:	4602      	mov	r2, r0
   bb130:	f240 2132 	movw	r1, #562	; 0x232
   bb134:	4839      	ldr	r0, [pc, #228]	; (bb21c <__mdiff+0x110>)
   bb136:	f7fc fdd9 	bl	b7cec <__assert_func>
   bb13a:	2301      	movs	r3, #1
   bb13c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb144:	bfa4      	itt	ge
   bb146:	4643      	movge	r3, r8
   bb148:	46a0      	movge	r8, r4
   bb14a:	4630      	mov	r0, r6
   bb14c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb150:	bfa6      	itte	ge
   bb152:	461c      	movge	r4, r3
   bb154:	2500      	movge	r5, #0
   bb156:	2501      	movlt	r5, #1
   bb158:	f7ff fcf0 	bl	bab3c <_Balloc>
   bb15c:	b920      	cbnz	r0, bb168 <__mdiff+0x5c>
   bb15e:	4b2e      	ldr	r3, [pc, #184]	; (bb218 <__mdiff+0x10c>)
   bb160:	4602      	mov	r2, r0
   bb162:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb166:	e7e5      	b.n	bb134 <__mdiff+0x28>
   bb168:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb16c:	6926      	ldr	r6, [r4, #16]
   bb16e:	60c5      	str	r5, [r0, #12]
   bb170:	f104 0914 	add.w	r9, r4, #20
   bb174:	f108 0514 	add.w	r5, r8, #20
   bb178:	f100 0e14 	add.w	lr, r0, #20
   bb17c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bb180:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bb184:	f108 0210 	add.w	r2, r8, #16
   bb188:	46f2      	mov	sl, lr
   bb18a:	2100      	movs	r1, #0
   bb18c:	f859 3b04 	ldr.w	r3, [r9], #4
   bb190:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bb194:	fa1f f883 	uxth.w	r8, r3
   bb198:	fa11 f18b 	uxtah	r1, r1, fp
   bb19c:	0c1b      	lsrs	r3, r3, #16
   bb19e:	eba1 0808 	sub.w	r8, r1, r8
   bb1a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bb1a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bb1aa:	fa1f f888 	uxth.w	r8, r8
   bb1ae:	1419      	asrs	r1, r3, #16
   bb1b0:	454e      	cmp	r6, r9
   bb1b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bb1b6:	f84a 3b04 	str.w	r3, [sl], #4
   bb1ba:	d8e7      	bhi.n	bb18c <__mdiff+0x80>
   bb1bc:	1b33      	subs	r3, r6, r4
   bb1be:	3b15      	subs	r3, #21
   bb1c0:	f023 0303 	bic.w	r3, r3, #3
   bb1c4:	3304      	adds	r3, #4
   bb1c6:	3415      	adds	r4, #21
   bb1c8:	42a6      	cmp	r6, r4
   bb1ca:	bf38      	it	cc
   bb1cc:	2304      	movcc	r3, #4
   bb1ce:	441d      	add	r5, r3
   bb1d0:	4473      	add	r3, lr
   bb1d2:	469e      	mov	lr, r3
   bb1d4:	462e      	mov	r6, r5
   bb1d6:	4566      	cmp	r6, ip
   bb1d8:	d30e      	bcc.n	bb1f8 <__mdiff+0xec>
   bb1da:	f10c 0203 	add.w	r2, ip, #3
   bb1de:	1b52      	subs	r2, r2, r5
   bb1e0:	f022 0203 	bic.w	r2, r2, #3
   bb1e4:	3d03      	subs	r5, #3
   bb1e6:	45ac      	cmp	ip, r5
   bb1e8:	bf38      	it	cc
   bb1ea:	2200      	movcc	r2, #0
   bb1ec:	441a      	add	r2, r3
   bb1ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bb1f2:	b17b      	cbz	r3, bb214 <__mdiff+0x108>
   bb1f4:	6107      	str	r7, [r0, #16]
   bb1f6:	e7a3      	b.n	bb140 <__mdiff+0x34>
   bb1f8:	f856 8b04 	ldr.w	r8, [r6], #4
   bb1fc:	fa11 f288 	uxtah	r2, r1, r8
   bb200:	1414      	asrs	r4, r2, #16
   bb202:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bb206:	b292      	uxth	r2, r2
   bb208:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bb20c:	f84e 2b04 	str.w	r2, [lr], #4
   bb210:	1421      	asrs	r1, r4, #16
   bb212:	e7e0      	b.n	bb1d6 <__mdiff+0xca>
   bb214:	3f01      	subs	r7, #1
   bb216:	e7ea      	b.n	bb1ee <__mdiff+0xe2>
   bb218:	000bcaa9 	.word	0x000bcaa9
   bb21c:	000bcb2e 	.word	0x000bcb2e

000bb220 <__ulp>:
   bb220:	b082      	sub	sp, #8
   bb222:	ed8d 0b00 	vstr	d0, [sp]
   bb226:	9b01      	ldr	r3, [sp, #4]
   bb228:	4912      	ldr	r1, [pc, #72]	; (bb274 <__ulp+0x54>)
   bb22a:	4019      	ands	r1, r3
   bb22c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bb230:	2900      	cmp	r1, #0
   bb232:	dd05      	ble.n	bb240 <__ulp+0x20>
   bb234:	2200      	movs	r2, #0
   bb236:	460b      	mov	r3, r1
   bb238:	ec43 2b10 	vmov	d0, r2, r3
   bb23c:	b002      	add	sp, #8
   bb23e:	4770      	bx	lr
   bb240:	4249      	negs	r1, r1
   bb242:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bb246:	ea4f 5021 	mov.w	r0, r1, asr #20
   bb24a:	f04f 0200 	mov.w	r2, #0
   bb24e:	f04f 0300 	mov.w	r3, #0
   bb252:	da04      	bge.n	bb25e <__ulp+0x3e>
   bb254:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bb258:	fa41 f300 	asr.w	r3, r1, r0
   bb25c:	e7ec      	b.n	bb238 <__ulp+0x18>
   bb25e:	f1a0 0114 	sub.w	r1, r0, #20
   bb262:	291e      	cmp	r1, #30
   bb264:	bfda      	itte	le
   bb266:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bb26a:	fa20 f101 	lsrle.w	r1, r0, r1
   bb26e:	2101      	movgt	r1, #1
   bb270:	460a      	mov	r2, r1
   bb272:	e7e1      	b.n	bb238 <__ulp+0x18>
   bb274:	7ff00000 	.word	0x7ff00000

000bb278 <__b2d>:
   bb278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb27a:	6905      	ldr	r5, [r0, #16]
   bb27c:	f100 0714 	add.w	r7, r0, #20
   bb280:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bb284:	1f2e      	subs	r6, r5, #4
   bb286:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bb28a:	4620      	mov	r0, r4
   bb28c:	f7ff fd48 	bl	bad20 <__hi0bits>
   bb290:	f1c0 0320 	rsb	r3, r0, #32
   bb294:	280a      	cmp	r0, #10
   bb296:	f8df c07c 	ldr.w	ip, [pc, #124]	; bb314 <__b2d+0x9c>
   bb29a:	600b      	str	r3, [r1, #0]
   bb29c:	dc14      	bgt.n	bb2c8 <__b2d+0x50>
   bb29e:	f1c0 0e0b 	rsb	lr, r0, #11
   bb2a2:	fa24 f10e 	lsr.w	r1, r4, lr
   bb2a6:	42b7      	cmp	r7, r6
   bb2a8:	ea41 030c 	orr.w	r3, r1, ip
   bb2ac:	bf34      	ite	cc
   bb2ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb2b2:	2100      	movcs	r1, #0
   bb2b4:	3015      	adds	r0, #21
   bb2b6:	fa04 f000 	lsl.w	r0, r4, r0
   bb2ba:	fa21 f10e 	lsr.w	r1, r1, lr
   bb2be:	ea40 0201 	orr.w	r2, r0, r1
   bb2c2:	ec43 2b10 	vmov	d0, r2, r3
   bb2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb2c8:	42b7      	cmp	r7, r6
   bb2ca:	bf3a      	itte	cc
   bb2cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb2d0:	f1a5 0608 	subcc.w	r6, r5, #8
   bb2d4:	2100      	movcs	r1, #0
   bb2d6:	380b      	subs	r0, #11
   bb2d8:	d017      	beq.n	bb30a <__b2d+0x92>
   bb2da:	f1c0 0c20 	rsb	ip, r0, #32
   bb2de:	fa04 f500 	lsl.w	r5, r4, r0
   bb2e2:	42be      	cmp	r6, r7
   bb2e4:	fa21 f40c 	lsr.w	r4, r1, ip
   bb2e8:	ea45 0504 	orr.w	r5, r5, r4
   bb2ec:	bf8c      	ite	hi
   bb2ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bb2f2:	2400      	movls	r4, #0
   bb2f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bb2f8:	fa01 f000 	lsl.w	r0, r1, r0
   bb2fc:	fa24 f40c 	lsr.w	r4, r4, ip
   bb300:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bb304:	ea40 0204 	orr.w	r2, r0, r4
   bb308:	e7db      	b.n	bb2c2 <__b2d+0x4a>
   bb30a:	ea44 030c 	orr.w	r3, r4, ip
   bb30e:	460a      	mov	r2, r1
   bb310:	e7d7      	b.n	bb2c2 <__b2d+0x4a>
   bb312:	bf00      	nop
   bb314:	3ff00000 	.word	0x3ff00000

000bb318 <__d2b>:
   bb318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb31c:	4689      	mov	r9, r1
   bb31e:	2101      	movs	r1, #1
   bb320:	ec57 6b10 	vmov	r6, r7, d0
   bb324:	4690      	mov	r8, r2
   bb326:	f7ff fc09 	bl	bab3c <_Balloc>
   bb32a:	4604      	mov	r4, r0
   bb32c:	b930      	cbnz	r0, bb33c <__d2b+0x24>
   bb32e:	4602      	mov	r2, r0
   bb330:	4b25      	ldr	r3, [pc, #148]	; (bb3c8 <__d2b+0xb0>)
   bb332:	4826      	ldr	r0, [pc, #152]	; (bb3cc <__d2b+0xb4>)
   bb334:	f240 310a 	movw	r1, #778	; 0x30a
   bb338:	f7fc fcd8 	bl	b7cec <__assert_func>
   bb33c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bb340:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bb344:	bb35      	cbnz	r5, bb394 <__d2b+0x7c>
   bb346:	2e00      	cmp	r6, #0
   bb348:	9301      	str	r3, [sp, #4]
   bb34a:	d028      	beq.n	bb39e <__d2b+0x86>
   bb34c:	4668      	mov	r0, sp
   bb34e:	9600      	str	r6, [sp, #0]
   bb350:	f7ff fd06 	bl	bad60 <__lo0bits>
   bb354:	9900      	ldr	r1, [sp, #0]
   bb356:	b300      	cbz	r0, bb39a <__d2b+0x82>
   bb358:	9a01      	ldr	r2, [sp, #4]
   bb35a:	f1c0 0320 	rsb	r3, r0, #32
   bb35e:	fa02 f303 	lsl.w	r3, r2, r3
   bb362:	430b      	orrs	r3, r1
   bb364:	40c2      	lsrs	r2, r0
   bb366:	6163      	str	r3, [r4, #20]
   bb368:	9201      	str	r2, [sp, #4]
   bb36a:	9b01      	ldr	r3, [sp, #4]
   bb36c:	61a3      	str	r3, [r4, #24]
   bb36e:	2b00      	cmp	r3, #0
   bb370:	bf14      	ite	ne
   bb372:	2202      	movne	r2, #2
   bb374:	2201      	moveq	r2, #1
   bb376:	6122      	str	r2, [r4, #16]
   bb378:	b1d5      	cbz	r5, bb3b0 <__d2b+0x98>
   bb37a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bb37e:	4405      	add	r5, r0
   bb380:	f8c9 5000 	str.w	r5, [r9]
   bb384:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bb388:	f8c8 0000 	str.w	r0, [r8]
   bb38c:	4620      	mov	r0, r4
   bb38e:	b003      	add	sp, #12
   bb390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb398:	e7d5      	b.n	bb346 <__d2b+0x2e>
   bb39a:	6161      	str	r1, [r4, #20]
   bb39c:	e7e5      	b.n	bb36a <__d2b+0x52>
   bb39e:	a801      	add	r0, sp, #4
   bb3a0:	f7ff fcde 	bl	bad60 <__lo0bits>
   bb3a4:	9b01      	ldr	r3, [sp, #4]
   bb3a6:	6163      	str	r3, [r4, #20]
   bb3a8:	2201      	movs	r2, #1
   bb3aa:	6122      	str	r2, [r4, #16]
   bb3ac:	3020      	adds	r0, #32
   bb3ae:	e7e3      	b.n	bb378 <__d2b+0x60>
   bb3b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bb3b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bb3b8:	f8c9 0000 	str.w	r0, [r9]
   bb3bc:	6918      	ldr	r0, [r3, #16]
   bb3be:	f7ff fcaf 	bl	bad20 <__hi0bits>
   bb3c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bb3c6:	e7df      	b.n	bb388 <__d2b+0x70>
   bb3c8:	000bcaa9 	.word	0x000bcaa9
   bb3cc:	000bcb2e 	.word	0x000bcb2e

000bb3d0 <__ratio>:
   bb3d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3d4:	4688      	mov	r8, r1
   bb3d6:	4669      	mov	r1, sp
   bb3d8:	4681      	mov	r9, r0
   bb3da:	f7ff ff4d 	bl	bb278 <__b2d>
   bb3de:	a901      	add	r1, sp, #4
   bb3e0:	4640      	mov	r0, r8
   bb3e2:	ec55 4b10 	vmov	r4, r5, d0
   bb3e6:	f7ff ff47 	bl	bb278 <__b2d>
   bb3ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb3ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bb3f2:	eba3 0c02 	sub.w	ip, r3, r2
   bb3f6:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb3fa:	1a9b      	subs	r3, r3, r2
   bb3fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bb400:	ec51 0b10 	vmov	r0, r1, d0
   bb404:	2b00      	cmp	r3, #0
   bb406:	bfd6      	itet	le
   bb408:	460a      	movle	r2, r1
   bb40a:	462a      	movgt	r2, r5
   bb40c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bb410:	468b      	mov	fp, r1
   bb412:	462f      	mov	r7, r5
   bb414:	bfd4      	ite	le
   bb416:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bb41a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bb41e:	4620      	mov	r0, r4
   bb420:	ee10 2a10 	vmov	r2, s0
   bb424:	465b      	mov	r3, fp
   bb426:	4639      	mov	r1, r7
   bb428:	f7f9 f8e0 	bl	b45ec <__aeabi_ddiv>
   bb42c:	ec41 0b10 	vmov	d0, r0, r1
   bb430:	b003      	add	sp, #12
   bb432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb436 <__copybits>:
   bb436:	3901      	subs	r1, #1
   bb438:	b570      	push	{r4, r5, r6, lr}
   bb43a:	1149      	asrs	r1, r1, #5
   bb43c:	6914      	ldr	r4, [r2, #16]
   bb43e:	3101      	adds	r1, #1
   bb440:	f102 0314 	add.w	r3, r2, #20
   bb444:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb448:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb44c:	1f05      	subs	r5, r0, #4
   bb44e:	42a3      	cmp	r3, r4
   bb450:	d30c      	bcc.n	bb46c <__copybits+0x36>
   bb452:	1aa3      	subs	r3, r4, r2
   bb454:	3b11      	subs	r3, #17
   bb456:	f023 0303 	bic.w	r3, r3, #3
   bb45a:	3211      	adds	r2, #17
   bb45c:	42a2      	cmp	r2, r4
   bb45e:	bf88      	it	hi
   bb460:	2300      	movhi	r3, #0
   bb462:	4418      	add	r0, r3
   bb464:	2300      	movs	r3, #0
   bb466:	4288      	cmp	r0, r1
   bb468:	d305      	bcc.n	bb476 <__copybits+0x40>
   bb46a:	bd70      	pop	{r4, r5, r6, pc}
   bb46c:	f853 6b04 	ldr.w	r6, [r3], #4
   bb470:	f845 6f04 	str.w	r6, [r5, #4]!
   bb474:	e7eb      	b.n	bb44e <__copybits+0x18>
   bb476:	f840 3b04 	str.w	r3, [r0], #4
   bb47a:	e7f4      	b.n	bb466 <__copybits+0x30>

000bb47c <__any_on>:
   bb47c:	f100 0214 	add.w	r2, r0, #20
   bb480:	6900      	ldr	r0, [r0, #16]
   bb482:	114b      	asrs	r3, r1, #5
   bb484:	4298      	cmp	r0, r3
   bb486:	b510      	push	{r4, lr}
   bb488:	db11      	blt.n	bb4ae <__any_on+0x32>
   bb48a:	dd0a      	ble.n	bb4a2 <__any_on+0x26>
   bb48c:	f011 011f 	ands.w	r1, r1, #31
   bb490:	d007      	beq.n	bb4a2 <__any_on+0x26>
   bb492:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb496:	fa24 f001 	lsr.w	r0, r4, r1
   bb49a:	fa00 f101 	lsl.w	r1, r0, r1
   bb49e:	428c      	cmp	r4, r1
   bb4a0:	d10b      	bne.n	bb4ba <__any_on+0x3e>
   bb4a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb4a6:	4293      	cmp	r3, r2
   bb4a8:	d803      	bhi.n	bb4b2 <__any_on+0x36>
   bb4aa:	2000      	movs	r0, #0
   bb4ac:	bd10      	pop	{r4, pc}
   bb4ae:	4603      	mov	r3, r0
   bb4b0:	e7f7      	b.n	bb4a2 <__any_on+0x26>
   bb4b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb4b6:	2900      	cmp	r1, #0
   bb4b8:	d0f5      	beq.n	bb4a6 <__any_on+0x2a>
   bb4ba:	2001      	movs	r0, #1
   bb4bc:	e7f6      	b.n	bb4ac <__any_on+0x30>

000bb4be <_calloc_r>:
   bb4be:	b513      	push	{r0, r1, r4, lr}
   bb4c0:	434a      	muls	r2, r1
   bb4c2:	4611      	mov	r1, r2
   bb4c4:	9201      	str	r2, [sp, #4]
   bb4c6:	f7fc fc01 	bl	b7ccc <_malloc_r>
   bb4ca:	4604      	mov	r4, r0
   bb4cc:	b118      	cbz	r0, bb4d6 <_calloc_r+0x18>
   bb4ce:	9a01      	ldr	r2, [sp, #4]
   bb4d0:	2100      	movs	r1, #0
   bb4d2:	f7fe f832 	bl	b953a <memset>
   bb4d6:	4620      	mov	r0, r4
   bb4d8:	b002      	add	sp, #8
   bb4da:	bd10      	pop	{r4, pc}
   bb4dc:	0000      	movs	r0, r0
	...

000bb4e0 <nan>:
   bb4e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb4e8 <nan+0x8>
   bb4e4:	4770      	bx	lr
   bb4e6:	bf00      	nop
   bb4e8:	00000000 	.word	0x00000000
   bb4ec:	7ff80000 	.word	0x7ff80000

000bb4f0 <__ascii_wctomb>:
   bb4f0:	b149      	cbz	r1, bb506 <__ascii_wctomb+0x16>
   bb4f2:	2aff      	cmp	r2, #255	; 0xff
   bb4f4:	bf85      	ittet	hi
   bb4f6:	238a      	movhi	r3, #138	; 0x8a
   bb4f8:	6003      	strhi	r3, [r0, #0]
   bb4fa:	700a      	strbls	r2, [r1, #0]
   bb4fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bb500:	bf98      	it	ls
   bb502:	2001      	movls	r0, #1
   bb504:	4770      	bx	lr
   bb506:	4608      	mov	r0, r1
   bb508:	4770      	bx	lr

000bb50a <link_code_end>:
	...

000bb50c <link_const_data_start>:
   bb50c:	514d0400 	.word	0x514d0400
   bb510:	00045454 	.word	0x00045454
   bb514:	49514d06 	.word	0x49514d06
   bb518:	03706473 	.word	0x03706473

000bb51c <dynalib_user>:
   bb51c:	000b4ab9 000b4af5 000b4b1d 000b4b21     .J...J...K..!K..
   bb52c:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bb53c:	72697620 6c617574 00692500 00696c25      virtual.%i.%li.
   bb54c:	676e6f4c 64757469 00203a65 6974614c     Longitude: .Lati
   bb55c:	65647574 6900203a 756f006e 77700074     tude: .in.out.pw
   bb56c:	7764006d 00776100 48006f79 6f707069     m.dw.aw.yo.Hippo
   bb57c:	65724173 74736154 65472f79 69480074     sAreTasty/Get.Hi
   bb58c:	736f7070 54657241 79747361 6e6f6c2f     pposAreTasty/lon
   bb59c:	75746967 48006564 6f707069 65724173     gitude.HipposAre
   bb5ac:	74736154 616c2f79 75746974 74006564     Tasty/latitude.t
   bb5bc:	006c706d 4c504d54 34755432 4c4d646b     mpl.TMPL2Tu4kdML
   bb5cc:	77760063 2e322500 63006633 656e6e6f     c.vw.%2.3f.conne
   bb5dc:	6e697463 2e2e2e67 62397300 48705372     cting....s9brSpH
   bb5ec:	6247584b 502d4b4a 6f464c67 69734271     KXGbJK-PgLFoqBsi
   bb5fc:	32744d4e 4f4c382d 6c620043 2e6b6e79     NMt2-8LOC.blynk.
   bb60c:	756f6c63 616c0064 68742e62 6c637765     cloud.lab.thewcl
   bb61c:	6d6f632e 00000000                       .com....

000bb624 <_ZTV5Timer>:
	...
   bb62c:	000b4c01 000b4c55 000b4b75              .L..UL..uK..

000bb638 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   bb638:	6b6e6c62 00666e69 00726576 2e312e31     blnkinf.ver.1.1.
   bb648:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   bb658:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   bb668:	6c636974 72412065 006e6f67 742d7766     ticle Argon.fw-t
   bb678:	00657079 4c504d54 34755432 4c4d646b     ype.TMPL2Tu4kdML
   bb688:	75620063 00646c69 206c754a 32203620     c.build.Jul  6 2
   bb698:	20333230 343a3231 32323a37               023 12:47:22...

000bb6a7 <_ZL4font>:
   bb6a7:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   bb6b7:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   bb6c7:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   bb6d7:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   bb6e7:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   bb6f7:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   bb707:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   bb717:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   bb727:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   bb737:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   bb747:	00000000 5f000000 07000000 14000700     ......._........
   bb757:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   bb767:	00502056 00030708 41221c00 22410000     V P......."A..A"
   bb777:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   bb787:	08080800 00000808 20006060 02040810     ........``. ....
   bb797:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   bb7a7:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   bb7b7:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   bb7c7:	00001e29 00000014 00003440 22140800     ).......@4....."
   bb7d7:	14141441 41001414 02081422 06095901     A......A"....Y..
   bb7e7:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   bb7f7:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   bb807:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   bb817:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   bb827:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   bb837:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   bb847:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   bb857:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   bb867:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   bb877:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   bb887:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   bb897:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   bb8a7:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   bb8b7:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   bb8c7:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   bb8d7:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   bb8e7:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   bb8f7:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   bb907:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   bb917:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   bb927:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   bb937:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   bb947:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   bb957:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   bb967:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   bb977:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   bb987:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   bb997:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   bb9a7:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   bb9b7:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   bb9c7:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   bb9d7:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   bb9e7:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   bb9f7:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   bba07:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   bba17:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   bba27:	00ff0000 ff101010 14141400 101000ff     ................
   bba37:	10ff00ff f010f010 fc141414 f7141400     ................
   bba47:	0000ff00 14ff00ff fc04f414 10171414     ................
   bba57:	1f10101f 14141f10 10001f14 00f01010     ................
   bba67:	1f000000 10101010 1010101f 0010f010     ................
   bba77:	10ff0000 10101010 10101010 000010ff     ................
   bba87:	0014ff00 ff00ff00 101f0000 fc000017     ................
   bba97:	1414f404 14171017 f404f414 00ff0000     ................
   bbaa7:	141414f7 14141414 14f700f7 14171414     ................
   bbab7:	101f1010 1414141f 101014f4 00f010f0     ................
   bbac7:	1f101f00 1f000000 00000014 000014fc     ................
   bbad7:	10f010f0 ff10ff10 ff141414 10101014     ................
   bbae7:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   bbaf7:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   bbb07:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   bbb17:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   bbb27:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   bbb37:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   bbb47:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   bbb57:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   bbb67:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   bbb77:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   bbb87:	00000018 30001010 0101ff40 01011f00     .......0@.......
   bbb97:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000bbba8 <_ZTV12Adafruit_GFX>:
	...
   bbbb8:	000b6005 000b80f5 000b4b41 000b5a0b     .`......AK...Z..
   bbbc8:	000b5a0d 000b5a3f 000b5a1b 000b5a2d     .Z..?Z...Z..-Z..
   bbbd8:	000b594d 000b5a0b 000b5c37 000b5c35     MY...Z..7\..5\..
   bbbe8:	000b5a57 000b5a95 000b5acf 000b5b15     WZ...Z...Z...[..
   bbbf8:	000b5b31 000b5bb5 61666564 20746c75     1[...[..default 
   bbc08:	42534d00 42534c00 50533c00 74655349     .MSB.LSB.<SPISet
   bbc18:	676e6974 65642073 6c756166 3c003e74     tings default>.<
   bbc28:	53495053 69747465 2073676e 75257325     SPISettings %s%u
   bbc38:	20732520 45444f4d 003e7525               %s MODE%u>.

000bbc44 <_ZTVN8particle11SPISettingsE>:
	...
   bbc4c:	000b6141 000b6113 000b6115              Aa...a...a..

000bbc58 <_ZL12splash1_data>:
   bbc58:	00000000 00800100 00000000 00000000     ................
   bbc68:	00008003 00000000 07000000 000000c0     ................
   bbc78:	00000000 c0070000 00000000 00000000     ................
   bbc88:	00c00f00 00000000 00000000 0000e01f     ................
   bbc98:	00000000 1f000000 000000e0 00000000     ................
   bbca8:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   bbcc0:	0000f07f 00000000 7ff81f00 000000f0     ................
   bbcd0:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   bbce0:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   bbcf0:	00000000 f9ff0f00 0000c0ff 00000000     ................
   bbd00:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   bbd10:	00000000 fc030000 80ffff73 00000000     ........s.......
   bbd20:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   bbd30:	000000ff 00000000 fc1ffe7f 00000000     ................
   bbd40:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   bbd50:	0000e0ff 00000000 ff191f00 000000c0     ................
   bbd60:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   bbd70:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   bbd80:	00000000 fcffff00 00000000 00000000     ................
   bbd90:	00feffff 00000000 ff000000 0000feff     ................
   bbda0:	00000000 efff0100 000000fe 00000000     ................
   bbdb0:	fecfff01 00000000 03000000 00fe07ff     ................
   bbdc0:	00000000 fc030000 0000fe07 00000000     ................
   bbdd0:	03f00300 000000fe 00000000 fe008001     ................
	...
   bbde8:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   bbe00:	0000000c 07000000 00fc0080 00c00300     ................
   bbe10:	80070000 0000fc01 0000c003 01800700     ................
   bbe20:	030000fc 000000c0 e0018007 1e000000     ................
   bbe30:	07000000 00e00180 001e0000 9ff7e37f     ................
   bbe40:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   bbe50:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   bbe60:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   bbe70:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   bbe80:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   bbe90:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   bbea0:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   bbeb0:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   bbec0:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   bbed0:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   bbee0:	ffffff00 ffffffff c0ffffff ffffffff     ................
   bbef0:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   bbf00:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   bbf10:	5b6bfdff c0fd6adb                       ..k[.j..

000bbf18 <_ZL12splash2_data>:
   bbf18:	00600000 00000000 00000000 00000000     ..`.............
   bbf28:	0000e000 00000000 00000000 01000000     ................
   bbf38:	000000e0 00000000 00000000 f0010000     ................
	...
   bbf54:	00f00300 00000000 00000000 00000000     ................
   bbf64:	0000f007 00000000 00000000 07000000     ................
   bbf74:	000000f8 00000000 00000000 f80f0000     ................
   bbf84:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   bbf94:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   bbfa4:	00c00300 010000fe ffff00e0 000000f8     ................
   bbfb4:	f000c003 0f000000 7ffe7f00 030000c0     ................
   bbfc4:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   bbfd4:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   bbfe4:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   bbff4:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   bc004:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   bc014:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   bc024:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   bc034:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   bc044:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   bc054:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   bc064:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   bc074:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   bc084:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   bc094:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   bc0ac:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   bc0bc:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   bc0cc:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   bc0dc:	ff7f000f a5feffff 198d9dad 060000e0     ................
   bc0ec:	ffff7f00 adb5feff e07eb5ed              ..........~.

000bc0f8 <_ZTV16Adafruit_SSD1306>:
	...
   bc100:	000b6195 000b61ad 000b6005 000b80f5     .a...a...`......
   bc110:	000b61c1 000b5a0b 000b5a0d 000b5a3f     .a...Z...Z..?Z..
   bc120:	000b5a1b 000b5a2d 000b594d 000b5a0b     .Z..-Z..MY...Z..
   bc130:	000b5c37 000b635f 000b6907 000b68b9     7\.._c...i...h..
   bc140:	000b5acf 000b5b15 000b5b31 000b5bb5     .Z...[..1[...[..

000bc150 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bc150:	e0c08000 fefcf8f0                       ........

000bc158 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bc158:	07030100 7f3f1f0f                       ......?.

000bc160 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bc160:	a880d5ae                                ....

000bc164 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bc164:	8d4000d3                                ..@.

000bc168 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bc168:	c8a10020                                 ...

000bc16c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bc16c:	a6a440db                                 .@....

000bc172 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bc172:	8f8102da                                ....

000bc176 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bc176:	                                         ...

000bc179 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bc179:	                                         ...

000bc17c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bc17c:	21ff0022 00000000                       "..!....

000bc184 <_ZL22BlynkReadHandlerVector>:
   bc184:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc194:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc1a4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc1b4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc1c4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc1d4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc1e4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc1f4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc204:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc214:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc224:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc234:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc244:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc254:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc264:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc274:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc284:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc294:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc2a4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc2b4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc2c4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc2d4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc2e4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc2f4:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc304:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc314:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc324:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc334:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc344:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc354:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc364:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..
   bc374:	000b73b9 000b73b9 000b73b9 000b73b9     .s...s...s...s..

000bc384 <_ZL23BlynkWriteHandlerVector>:
   bc384:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc394:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc3a4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc3b4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc3c4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc3d4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc3e4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc3f4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc404:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc414:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc424:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc434:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc444:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc454:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc464:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc474:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc484:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc494:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc4a4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc4b4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc4c4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc4d4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc4e4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc4f4:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc504:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc514:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc524:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc534:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc544:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc554:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc564:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..
   bc574:	000b73bb 000b73bb 000b73bb 000b73bb     .s...s...s...s..

000bc584 <_ZTV16OledWingAdafruit>:
	...
   bc58c:	000b7581 000b75a1 000b6005 000b80f5     .u...u...`......
   bc59c:	000b61c1 000b5a0b 000b5a0d 000b5a3f     .a...Z...Z..?Z..
   bc5ac:	000b5a1b 000b5a2d 000b594d 000b5a0b     .Z..-Z..MY...Z..
   bc5bc:	000b5c37 000b635f 000b6907 000b68b9     7\.._c...i...h..
   bc5cc:	000b5acf 000b5b15 000b5b31 000b5bb5     .Z...[..1[...[..

000bc5dc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bc5e4 <_ZTVN5spark13EthernetClassE>:
	...
   bc5ec:	000b7d83 000b7d79 000b7d6f 000b7d65     .}..y}..o}..e}..
   bc5fc:	000b7d59 000b7d4d 000b7fd1 000b7fd9     Y}..M}..........
   bc60c:	000b7d41 000b7d39 000b7d2f 000b7d25     A}..9}../}..%}..
   bc61c:	000b8009                                ....

000bc620 <_ZTV7TwoWire>:
	...
   bc628:	000b7da1 000b7deb 000b7dc3 000b7da3     .}...}...}...}..
   bc638:	000b7dcb 000b7dd3 000b7ddb 000b7de3     .}...}...}...}..

000bc648 <_ZTV9IPAddress>:
	...
   bc650:	000b7e75 000b7e65 000b7e67 00707061     u~..e~..g~..app.

000bc660 <_ZTVN5spark12NetworkClassE>:
	...
   bc668:	000b7f91 000b7f9b 000b7fa5 000b7faf     ................
   bc678:	000b7fb9 000b7fc5 000b7fd1 000b7fd9     ................
   bc688:	000b7fe1 000b7fed 000b7ff5 000b7fff     ................
   bc698:	000b8009 006e616e 00666e69 0066766f     ....nan.inf.ovf.

000bc6a8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bc6a8:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   bc6b8:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000bc6c8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc6d0:	000b8785 000b87a9 000b8cdb 000b87b7     ................
   bc6e0:	000b8789                                ....

000bc6e4 <_ZTV9TCPClient>:
	...
   bc6ec:	000b8835 000b8869 000b8701 000b871b     5...i...........
   bc6fc:	000b8b71 000b8745 000b89e7 000b8779     q...E.......y...
   bc70c:	000b8a79 000b88b9 000b8a15 000b8c25     y...........%...
   bc71c:	000b89b5 000b877b 000b872d 000b87bd     ....{...-.......
   bc72c:	000b8899 252d5925 64252d6d 3a482554     ....%Y-%m-%dT%H:
   bc73c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bc74c <_ZTV11USARTSerial>:
	...
   bc754:	000b8cf5 000b8d61 000b8d39 000b80f5     ....a...9.......
   bc764:	000b8d09 000b8d25 000b8d17 000b8d33     ....%.......3...
   bc774:	000b8cf7 000b8cfb                       ........

000bc77c <_ZTV9USBSerial>:
	...
   bc784:	000b8d9f 000b8e07 000b8ddd 000b80f5     ................
   bc794:	000b8dcf 000b8da1 000b8db1 000b8e01     ................
   bc7a4:	000b8dc1 000b8d99                       ........

000bc7ac <_ZTVN5spark9WiFiClassE>:
	...
   bc7b4:	000b8f07 000b8efd 000b8ef3 000b8ea9     ................
   bc7c4:	000b8ee7 000b8edb 000b7fd1 000b7fd9     ................
   bc7d4:	000b8ecf 000b8ec7 000b8ebd 000b8eb3     ................
   bc7e4:	000b8009                                ....

000bc7e8 <_ZSt7nothrow>:
	...

000bc7e9 <_ZTSSt19_Sp_make_shared_tag>:
   bc7e9:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bc7f9:	5f646572 00676174                        red_tag....

000bc804 <_ZTISt19_Sp_make_shared_tag>:
   bc804:	000bc844 000bc7e9                       D.......

000bc80c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bc80c:	000bc8a4 000bc818 000bc8c8              ............

000bc818 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bc818:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bc828:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bc838:	00000045                                E...

000bc83c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bc83c:	00000000 000bc80c 000b9325 000b9339     ........%...9...
   bc84c:	000b94cd 000b94cd 000b93a3 000b92e5     ................
   bc85c:	000b938b 000b934d 000b9317              ....M.......

000bc868 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bc868:	000bc8a4 000bc874 000bc80c              ....t.......

000bc874 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bc874:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bc884:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bc894:	456f666e 00000000                       nfoE....

000bc89c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bc89c:	00000000 000bc868 000b93cd 000b93e1     ....h...........
   bc8ac:	000b94cd 000b94cd 000b93a3 000b92e5     ................
   bc8bc:	000b94a1 000b942d 000b93f5              ....-.......

000bc8c8 <_ZTISt9type_info>:
   bc8c8:	000bc844 000bc8d0                       D.......

000bc8d0 <_ZTSSt9type_info>:
   bc8d0:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bc8e0:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bc8f0:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   bc900:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bc910:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bc920:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bc930:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bc940:	696c6474 61722f62 632e646e 696e6900     tdlib/rand.c.ini
   bc950:	00007974                                ty..

000bc954 <fpi.1>:
   bc954:	00000035 fffffbce 000003cb 00000001     5...............
   bc964:	00000000                                ....

000bc968 <fpinan.0>:
   bc968:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bc980 <tinytens>:
   bc980:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bc990:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bc9a0:	64ac6f43 11680628                       Co.d(.h.

000bc9a8 <_ctype_>:
   bc9a8:	20202000 20202020 28282020 20282828     .         ((((( 
   bc9b8:	20202020 20202020 20202020 20202020                     
   bc9c8:	10108820 10101010 10101010 10101010      ...............
   bc9d8:	04040410 04040404 10040404 10101010     ................
   bc9e8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bc9f8:	01010101 01010101 01010101 10101010     ................
   bca08:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bca18:	02020202 02020202 02020202 10101010     ................
   bca28:	00000020 00000000 00000000 00000000      ...............
	...
   bcaa8:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bcab8:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
   bcac8:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bcad8:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bcae8:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bcaf8:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bcb08:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
   bcb18:	0000632e                                .c..

000bcb1c <_C_numeric_locale>:
   bcb1c:	000bb5e3 000bb557 2003e0b0 49534f50     ....W...... POSI
   bcb2c:	742f0058 6a2f706d 696b6e65 472d736e     X./tmp/jenkins-G
   bcb3c:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bcb4c:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bcb5c:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bcb6c:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bcb7c:	2f62696c 6572706d 00632e63              lib/mprec.c.

000bcb88 <__mprec_bigtens>:
   bcb88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bcb98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bcba8:	7f73bf3c 75154fdd                       <.s..O.u

000bcbb0 <__mprec_tens>:
   bcbb0:	00000000 3ff00000 00000000 40240000     .......?......$@
   bcbc0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bcbd0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bcbe0:	00000000 412e8480 00000000 416312d0     .......A......cA
   bcbf0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bcc00:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bcc10:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bcc20:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bcc30:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bcc40:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bcc50:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bcc60:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bcc70:	79d99db4 44ea7843                       ...yCx.D

000bcc78 <p05.0>:
   bcc78:	00000005 00000019 0000007d              ........}...

000bcc84 <link_const_data_end>:
   bcc84:	000b586d 	.word	0x000b586d
   bcc88:	000b7d15 	.word	0x000b7d15
   bcc8c:	000b7d8d 	.word	0x000b7d8d
   bcc90:	000b7f81 	.word	0x000b7f81
   bcc94:	000b80e1 	.word	0x000b80e1
   bcc98:	000b83ed 	.word	0x000b83ed
   bcc9c:	000b86dd 	.word	0x000b86dd
   bcca0:	000b8ce1 	.word	0x000b8ce1
   bcca4:	000b8f11 	.word	0x000b8f11
